1                                                          The SAS System                                19:16 Friday, April 4, 2008

NOTE: Copyright (c) 2002-2003 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) 9.1 (TS1M3)
      Licensed to BANK OF THE PHILIPPINE ISLANDS, Site 0031233007.
NOTE: This session is executing on the AIX 5.3 platform.



NOTE: SAS 9.1.3 Service Pack 4

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS initialization used:
      real time           0.04 seconds
      cpu time            0.02 seconds
      
1          /******************************************************************************
2           * Job:           POPULATE_INDIVIDUAL_CUSTOMER_FOR_ALS_INI  A5SFKZBN.BN000JAN *
3           *                TIAL_LOAD                                                   *
4           * Description:   Version 1.0                                                 *
5           *                                                                            *
6           * Repository:    Foundation                                A0000001.A5SFKZBN *
7           * Server:        BPIApp                                    A5SFKZBN.AT000002 *
8           *                                                                            *
9           * Source Tables: COPY_AMXUCF00 - COPY.COPY_AMXUCF00        A5SFKZBN.BK00035M *
10          *                COPY_RMEXTRACT - COPY.COPY_RMEXTRACT      A5SFKZBN.BK00071X *
11          *                COPY_AMXUCE - COPY.COPY_AMXUCE            A5SFKZBN.BK0006Y4 *
12          *                COPY_AMXUCF00 - COPY.COPY_AMXUCF00        A5SFKZBN.BK00035M *
13          *                COPY_AMXURT00 - COPY.COPY_AMXURT00        A5SFKZBN.BK0002BF *
14          *                STG_INDIVIDUAL_CUSTOMER_ALS -             A5SFKZBN.BK0003BD *
15          *                 STAGING.STG_INDIVIDUAL_CUSTOMER_ALS                        *
16          *                Exception Table - admin.Exception_Table   A5SFKZBN.BK0003UX *
17          *                STG_REF_COUNTERPARTY_TYPE_CD -            A5SFKZBN.BK0007QH *
18          *                 STAGING.STG_REF_COUNTERPARTY_TYPE_CD                       *
19          *                STG_REF_COUNTRY_CD -                      A5SFKZBN.BK00071C *
20          *                 STAGING.STG_REF_COUNTRY_CD                                 *
21          *                STG_REF_CURRENCY_CD -                     A5SFKZBN.BK00071G *
22          *                 STAGING.STG_REF_CURRENCY_CD                                *
23          *                STG_REF_DOSRI_CD -                        A5SFKZBN.BK00071I *
24          *                 STAGING.STG_REF_DOSRI_CD                                   *
25          *                STG_REF_REGULATORY_CNTRPRTY_CD -          A5SFKZBN.BK00071V *
26          *                 STAGING.STG_REF_REGULATORY_CNTRPRTY_CD                     *
27          *                STG_REF_STATE_CD -                        A5SFKZBN.BK00071T *
2                                                          The SAS System                                19:16 Friday, April 4, 2008

28          *                 STAGING.STG_REF_STATE_CD                                   *
29          *                STG_REF_POSTAL_CD -                       A5SFKZBN.BK0007QG *
30          *                 STAGING.STG_REF_POSTAL_CD                                  *
31          *                STG_REF_INDUSTRY_TYPE_CD -                A5SFKZBN.BK00071J *
32          *                 STAGING.STG_REF_INDUSTRY_TYPE_CD                           *
33          *                STG_REF_ADDRESS_TYPE_CD -                 A5SFKZBN.BK000717 *
34          *                 STAGING.STG_REF_ADDRESS_TYPE_CD                            *
35          *                STG_REF_COUNTERPARTY_TYPE_CD -            A5SFKZBN.BK0007QH *
36          *                 STAGING.STG_REF_COUNTERPARTY_TYPE_CD                       *
37          *                STG_REF_COUNTRY_CD -                      A5SFKZBN.BK00071C *
38          *                 STAGING.STG_REF_COUNTRY_CD                                 *
39          *                STG_REF_DOSRI_CD -                        A5SFKZBN.BK00071I *
40          *                 STAGING.STG_REF_DOSRI_CD                                   *
41          *                STG_REF_REGULATORY_CNTRPRTY_CD -          A5SFKZBN.BK00071V *
42          *                 STAGING.STG_REF_REGULATORY_CNTRPRTY_CD                     *
43          *                STG_REF_POSTAL_CD -                       A5SFKZBN.BK0007QG *
44          *                 STAGING.STG_REF_POSTAL_CD                                  *
45          *                STG_REF_INDUSTRY_TYPE_CD -                A5SFKZBN.BK00071J *
46          *                 STAGING.STG_REF_INDUSTRY_TYPE_CD                           *
47          *                COPY_RMEXTRACT - COPY.COPY_RMEXTRACT      A5SFKZBN.BK00071X *
48          *                COPY_AMXUCE - COPY.COPY_AMXUCE            A5SFKZBN.BK0006Y4 *
49          *                COPY_AMXURT00 - COPY.COPY_AMXURT00        A5SFKZBN.BK0002BF *
50          * Target Tables: COPY_AMXUCF00 - COPY.COPY_AMXUCF00        A5SFKZBN.BK00035M *
51          *                STG_INDIVIDUAL_CUSTOMER_ALS -             A5SFKZBN.BK0003BD *
52          *                 STAGING.STG_INDIVIDUAL_CUSTOMER_ALS                        *
53          *                Exception Table - admin.Exception_Table   A5SFKZBN.BK0003UX *
54          *                                                                            *
55          * Generated on:  Thursday, March 13, 2008 6:47:29 PM GMT+08:00               *
56          * Generated by:                                                              *
57          * Version:       9.1.20060626.51875                                          *
58          ******************************************************************************/
59         
60         /* Create metadata macro variables */
61         %let IOMServer      = %nrquote(BPIApp);
62         %let metaPort       = %nrquote(8561);
63         %let metaServer     = %nrquote(baslmtsp);
64         %let metaRepository = %nrquote(Foundation);
65         
66         /* Set metadata options */
67         options metaport       = &metaPort
68                 metaserver     = "&metaServer"
69                 metarepository = "&metaRepository";
70         
71         %let jobID = %quote(A5SFKZBN.BN000JAN);
72         
73         /* Setup for capturing job status  */
74         data _null_;
75            call symput('etls_startTime',put(datetime(),datetime.));
76         run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

77         
78         %let etls_jobName = POPULATE_INDIVIDUAL_CUSTOMER_FOR_ALS_INITIAL_LOAD;
79         %let etls_recordsBefore = 0;
3                                                          The SAS System                                19:16 Friday, April 4, 2008

80         %let etls_recordsAfter = 0;
81         %let etls_lib = 0;
82         %let etls_table = 0;
83         
84         /* Setup to capture return codes  */
85         %global job_rc trans_rc sqlrc;
86         %let job_rc = 0;
87         %let trans_rc = 0;
88         %let sqlrc = 0;
89         %global syserr;
90         
91         %macro rcSet(error);
92            %if (&error gt &trans_rc) %then
93               %let trans_rc = &error;
94            %if (&error gt &job_rc) %then
95               %let job_rc = &error;
96         %mend rcSet;
97         
98         %macro rcSetDS(error);
99            if &error gt input(symget('trans_rc'),12.) then
100              call symput('trans_rc',trim(left(put(&error,12.))));
101           if &error gt input(symget('job_rc'),12.) then
102              call symput('job_rc',trim(left(put(&error,12.))));
103        %mend rcSetDS;
104        
105        %global etls_debug;
106        %macro etls_setDebug;
107           %if %str(&etls_debug) ne 0 %then
108              OPTIONS MPRINT%str(;);
109        %mend;
110        %etls_setDebug;
111        
112        /*============================================================================*
113         * Pre-Process code for the job                             A5SFKZBN.AY000SMG *
114         *                                                                            *
115         * User Written:  Predecessor process                       A5SFKZBN.AF002A23 *
116         *============================================================================*/
117        
118        /*---- Start of User Written Code  ----*/
119        
120        %get_run_control_dates(runctrl=control.run_dates_ac)
NOTE: Libref CONTROL was successfully assigned as follows: 
      Engine:        REMOTE 
      Physical Name: /sasdata/admin
MPRINT(GET_RUN_CONTROL_DATES):   data _null_;
MPRINT(GET_RUN_CONTROL_DATES):   * read the last control record using point=;
MPRINT(GET_RUN_CONTROL_DATES):   set control.run_dates_ac nobs=nobs point=nobs;
MPRINT(GET_RUN_CONTROL_DATES):   call symput('LAST_LOAD_DTTM',strip(put(LAST_LOAD_DTTM,datetime19.)));
MPRINT(GET_RUN_CONTROL_DATES):   call symput('LOAD_DTTM',strip(put(LOAD_DTTM,datetime19.)));
MPRINT(GET_RUN_CONTROL_DATES):   call symput('LAST_LOAD_DATE',strip(put(datepart(LAST_LOAD_DTTM),date9.)));
MPRINT(GET_RUN_CONTROL_DATES):   call symput('LOAD_DATE',strip(put(datepart(LOAD_DTTM),date9.)));
MPRINT(GET_RUN_CONTROL_DATES):   stop;
MPRINT(GET_RUN_CONTROL_DATES):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      
4                                                          The SAS System                                19:16 Friday, April 4, 2008


NOTE: Value for LAST_LOAD_DTTM : 08FEB2008:00:00:00
NOTE: Value for LOAD_DTTM      : 31OCT2007:00:00:00
NOTE: Value for LAST_LOAD_DATE : 08FEB2008
NOTE: Value for LOAD_DATE      : 31OCT2007
121        
122        
123        /*---- End of User Written Code  ----*/
124        
125        %rcSet(&syserr);
126        %rcSet(&sqlrc);
127        
128        /*============================================================================*
129         * Step:          Declare Libraries                         A5SFKZBN.BS000U9L *
130         * Transform:     Declare Libraries                                           *
131         * Description:                                                               *
132         *                                                                            *
133         * Target Table:  Declare Libraries - work.W5I1BJCZ         A5SFKZBN.BQ000RYD *
134         *============================================================================*/
135        
136        %let transformID = %quote(A5SFKZBN.BS000U9L);
137        
138        %let trans_rc = 0;
139        
140        /* Target table/view(s)  */
141        %let _OUTPUT = work.W5I1BJCZ;
142        %let _OUTPUT0 = work.W5I1BJCZ;
143        
144        /* Delete target table(s)  */
145        proc datasets lib=work nolist nowarn memtype = (data view);
146           delete W5I1BJCZ;
147        quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

148        
149        /* Options  */
150        %let cSubsidiary = %nrquote(BPI);
151        
152        /* List of target columns to keep  */
153        %let keep = ;
154        
155        %global rawpath mylev;
156        %macro DeclareLib;
157        	
158        	%if %substr(&metaport,4,1)=1 or %substr(&metaport,4,1)=2
159        		%then %do;
160        			%let mylev=devt;
161        		%end;
162        	%else %if %substr(&metaport,4,1)=3 or %substr(&metaport,4,1)=4
163        		%then %do;
164        			%let mylev=test;
165        		%end;
166        	%else %do;
167        		%let mylev=prod;
5                                                          The SAS System                                19:16 Friday, April 4, 2008

168        		%end;
169        	%let rawpath=/sasdata/&cSubsidiary/cas/&mylev;
170        	
171        	%put rawpath = &rawpath;
172        	
173        	libname STAGING '/sasdata/STAGING';
174        	libname COPY '/sasdata/COPY';
175        	LIBNAME admin REMOTE  HOSTNAME="baslstsp"  Server=sasshr slibref=ADMIN sapw="{sas001}U0FTU2hhcmU=" ;	
176        	libname EXCP '/sasdata/admin';
177        	libname STG2_ERR '/sasdata/STG2_ERR';
178        	libname STAGING2 '/sasdata/STAGING2';
179        	libname DDS '/sasdds';
180        	libname CAR_COPY '/sasdata/CARMART/LEV1/CAR_COPY';
181        	libname CAR_STAG '/sasdata/CARMART/LEV1/CAR_STAGING';
182        	libname CAR_LV '/sasdata/CARMART/LEV1/CAR_LV';	
183        	libname libbpi '/etlreadmesas';
184        	libname CARMART '/sasdata/CARMART';	
185        	libname CONTROL '/sasdata/admin';
186        
187        %mend DeclareLib;
188        %DeclareLib;
rawpath = /sasdata/BPI/cas/devt
MPRINT(DECLARELIB):   libname STAGING '/sasdata/STAGING';
NOTE: Libref STAGING was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/STAGING
MPRINT(DECLARELIB):   libname COPY '/sasdata/COPY';
NOTE: Libref COPY was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/COPY
MPRINT(DECLARELIB):   LIBNAME admin REMOTE HOSTNAME="baslstsp" Server=sasshr slibref=ADMIN sapw="{sas001}U0FTU2hhcmU=" ;
NOTE: Libref ADMIN was successfully assigned as follows: 
      Engine:        REMOTE 
      Physical Name: /sasdata/admin
MPRINT(DECLARELIB):   libname EXCP '/sasdata/admin';
NOTE: Libref EXCP was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/admin
MPRINT(DECLARELIB):   libname STG2_ERR '/sasdata/STG2_ERR';
NOTE: Libref STG2_ERR was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/STG2_ERR
MPRINT(DECLARELIB):   libname STAGING2 '/sasdata/STAGING2';
NOTE: Libref STAGING2 was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/STAGING2
MPRINT(DECLARELIB):   libname DDS '/sasdds';
NOTE: Libref DDS was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdds
MPRINT(DECLARELIB):   libname CAR_COPY '/sasdata/CARMART/LEV1/CAR_COPY';
NOTE: Libref CAR_COPY was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/CARMART/LEV1/CAR_COPY
MPRINT(DECLARELIB):   libname CAR_STAG '/sasdata/CARMART/LEV1/CAR_STAGING';
NOTE: Libref CAR_STAG was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/CARMART/LEV1/CAR_STAGING
6                                                          The SAS System                                19:16 Friday, April 4, 2008

MPRINT(DECLARELIB):   libname CAR_LV '/sasdata/CARMART/LEV1/CAR_LV';
NOTE: Libref CAR_LV was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/CARMART/LEV1/CAR_LV
MPRINT(DECLARELIB):   libname libbpi '/etlreadmesas';
NOTE: Libref LIBBPI was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /etlreadmesas
MPRINT(DECLARELIB):   libname CARMART '/sasdata/CARMART';
NOTE: Libref CARMART was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/CARMART
MPRINT(DECLARELIB):   libname CONTROL '/sasdata/admin';
NOTE: Libname CONTROL refers to the same physical library as EXCP.
NOTE: Libref CONTROL was successfully assigned as follows: 
      Engine:        V9 
      Physical Name: /sasdata/admin
189        options fmtsearch=(work parm EXCP.FORMATS EXCP);
190        
191        
192        %let createdatetime = %sysfunc(datetime(),datetime16.);
193        %put createdatetime = &createdatetime;
createdatetime = 04APR08:19:16:57
194        
195        %macro etls_jobRCChk;
196           %if (&job_rc ge 5) %then
197           %do;
198        	%let prod = %sysfunc(compress(&etls_jobName));
199        	%let b = U_&prod..txt;
200        
201        	%macro etls_sendFile(directory =, filename = &b);
202                 		filename sendfile "&directory.&filename";
203                 		%local etls_syntaxcheck;
204                 		%let etls_syntaxcheck=%sysfunc(getoption(syntaxcheck));
205                 		/* Need syntax check mode to be turned off to perform return code steps */
206                 		options nosyntaxcheck;
207                 		data _null_;
208                    		file sendFile;
209                 		run;
210                 		/* Return syntax checking to previous setting */
211                 		options &etls_syntaxcheck;
212        	%mend etls_sendFile;
213        
214        	%etls_sendFile(directory = %str(/sasprog/triggers/));
215            %end;
216        %mend etls_jobRCChk;
217        
218        
219        
220        
221        %rcSet(&syserr);
222        %rcSet(&sysrc);
223        %rcSet(&sqlrc);
224        
225        /*============================================================================*
226         * Step:          Declare Macros                            A5SFKZBN.BS000U96 *
227         * Transform:     Declare Macros                                              *
228         * Description:                                                               *
7                                                          The SAS System                                19:16 Friday, April 4, 2008

229         *                                                                            *
230         * Source Table:  Declare Libraries - work.W5I1BJCZ         A5SFKZBN.BQ000RYD *
231         * Target Table:  Declare Macros - work.W5HIQJ9G            A5SFKZBN.BQ000RYE *
232         *============================================================================*/
233        
234        %let SYSLAST = %nrquote(work.W5I1BJCZ);
235        
236        %let transformID = %quote(A5SFKZBN.BS000U96);
237        
238        %let trans_rc = 0;
239        
240        /* Source table(s)/view(s)  */
241        %let _INPUT0 = work.W5I1BJCZ;
242        
243        /* Target table/view(s)  */
244        %let _OUTPUT = work.W5HIQJ9G;
245        %let _OUTPUT0 = work.W5HIQJ9G;
246        
247        /* Options  */
248        
249        /* List of target columns to keep  */
250        %let keep = ;
251        
252        %global gdtPRunBeg gcBUPDta maxbatchno HashStat;
253        /*Declare default status of Hash Count Status*/
254        %let HashStat=0;
255        /*macro declaration*/
256        
257        /* macro chkAdminTables
258         * Purpose: Checks admin tables
259         * IMPORTANT: Checking of admin_table_log is used for creating the admin table log
260         * Used in every job*/
261        %macro chkAdminTables;
262        /*check admin.admin_table_log*/
263        	%if %sysfunc(exist(ADMIN.ADMIN_TABLE_LOG))=0 %then %do;
264        
265        		proc sql;
266        			create table ADMIN.ADMIN_TABLE_LOG( label='Admin_Table_Log')
267        			  (
268        			   product char(100) label='Product (gcPProd)',
269        			   proc_date num format=DATETIME16. label='Datetime of Data Being Processed (gdPDate)',
270        			   proc_intrvl char(32) label='Date Range of Data Being Processed (gcPIntrvl)',
271        			   rundate_start num format=DATETIME16. label='Job Start Time (gdtPRunBeg)',
272        			   rundate_end num format=DATETIME16. label='Job End Time',
273        			   duration num format=TIME. label='Job Process Duration',
274        			   etl_user char(32) label='User ID',
275        			   jobName char(100) label='Job Name',
276        			   jobstat char(1) label='Job Status',
277        			   job_rc num label='Job Return Code',
278        			   remarks char(1000) label='Comments',
279        			   Batch_No num format=8. label='Batch Number'
280        
281        			  	/* contraint specifications */
282        /*		       constraint pkey_Admin_Table_Log primary key(product, rundate_start)  */
283        			  );
284        		quit;
285        
286        	%end;
8                                                          The SAS System                                19:16 Friday, April 4, 2008

287        /*check admin.table_loader_log*/
288        
289        	%if %sysfunc(exist(ADMIN.TABLE_LOADER_LOG))=0 %then %do;
290        
291        		proc sql;
292        			create table ADMIN.TABLE_LOADER_LOG( label='Table_Loader_Log')
293        			(
294        			   product char(50) label='Product',
295        			   rundate_start num format=DATETIME16. label='Job Start Time',
296        			   etl_lib char(32) label='Library',
297        			   etl_table char(32) label='Table Name',
298        			   recBefore num label='No. Records Before',
299        			   recAfter num label='No. Records After',
300        			   table_rc num label='Loader Table Job Return Code'
301        
302        				/* contraint specifications */
303        /*			   constraint pkey_TABLE_LOADER_LOG primary key(product, rundate_start)  */
304        			);
305        		quit;
306        
307        	%end;
308        /*check admin.dependency*/
309        	%if %sysfunc(exist(ADMIN.DEPENDENCY))=0 %then %do;
310        
311        		proc sql;
312        		create table ADMIN.DEPENDENCY( label='Dependency')
313        		  (
314        			   product char(50) label='Product',
315        			   dependency char(50) label='Parent Process'
316        		  );
317        		quit;
318        
319        	%end;
320        %mend chkAdminTables;
321        
322        
323        /*LOG JOB*/
324        
325        %macro LogAdminJob(setType=0, setProd=&gcPProd,  setStart=, setstop= , sysmsg= );
326        /*create new log					: setType = 0*/
327        /*update log					: setType = 1 */
328        /*close log						: setType = 2 */
329        /*create new log for facts			: setType = 3 */
330        
331        proc sql noprint;
332        	select max(batch_no) into: maxbatchno
333        	from admin.admin_table_log
334        ;
335        quit;
336        
337        	%if &setType = 0 %then %do;
338        /*create log*/
339        		%put log_check inserting row to admin_table_log;
340        		proc sql undo_policy=none;
341        			insert into admin.admin_table_log
342        				set Product = "&setProd",
343        				   	proc_date = &gdPDate,
344        				   	proc_intrvl = "&gcPIntrvl",
9                                                          The SAS System                                19:16 Friday, April 4, 2008

345        				   	rundate_start = &setStart,
346        				   	etl_user = "&sysuserid",
347        				   	jobName = "&etls_jobName",
348        				   	jobstat = 'U',
349        				   	job_rc = -1,
350        					remarks="Unsuccessful",
351        					Batch_No = 0
352        			;
353        		quit;	
354        	%end;
355        
356        	%else %if &setType = 1 %then %do;
357        
358        		%put log_check updating admin_table_log;
359        			proc sql undo_policy=none;
360        				update admin.admin_table_log
361        					set remarks = catx( ": ", remarks, "&sysmsg")
362        					where Product = "&setProd" and
363        		   			rundate_start = &setStart
364        				;
365        			quit;	
366        	%end;
367        
368        	%else	%if &setType = 3 %then %do;
369        /*create log*/
370        		%put log_check inserting row to admin_table_log;
371        		proc sql undo_policy=none;
372        			insert into admin.admin_table_log
373        				set Product = "&setProd",
374        				   	proc_date = &gdPDate,
375        				   	proc_intrvl = "&gcPIntrvl",
376        				   	rundate_start = &setStart,
377        				   	etl_user = "&sysuserid",
378        				   	jobName = "&etls_jobName",
379        				   	jobstat = 'U',
380        				   	job_rc = -1,
381        						Batch_No = sum(&maxbatchno,1)
382        
383        			;
384        		quit;	
385        	%end;
386        	%else %do;
387        		/*
388        		proc sql undo_policy=none;
389        			update admin.admin_table_log
390        				set rundate_end = &setstop,
391        	   			duration = INPUT(CATX(":",intck('HOUR',rundate_start, &setstop),MOD(intck('MINUTE',rundate_start,
391      ! &setstop),60),MOD(intck('SECOND',rundate_start, &setstop),60)),TIME.),
392        					jobstat = case when (&job_rc > 4) | &HashStat. ne 0 then 'U'
393        						else 'S' end,
394        					remarks = case when (&job_rc = 0) & &HashStat. = 0 then 'Successful'
395        									   when &HashStat. ne 0 & (&job_rc eq 0) then 'Hash Count do not Match'
396        						else  catx( ": ", remarks, "&sysmsg") end,
397        			   	job_rc = &job_rc
398        			   	
399        				where Product = "&setProd" and
400        					rundate_start = &setStart
401        			;
10                                                         The SAS System                                19:16 Friday, April 4, 2008

402        		quit;	
403        		*/
404        		data ADMIN.ADMIN_TABLE_LOG;
405        			modify ADMIN.ADMIN_TABLE_LOG;
406        			if PRODUCT = "&setProd." & RUNDATE_START=&setStart then do;
407        				rundate_end = &setstop;
408        				duration = RUNDATE_END - RUNDATE_START;
409        /*				duration = INPUT(CATX(":",intck('HOUR',rundate_start, &setstop),MOD(intck('MINUTE',rundate_start,
409      ! &setstop),60),MOD(intck('SECOND',rundate_start, &setstop),60)),TIME.);*/
410        				job_rc = &job_rc.;
411        				if &job_rc. > 4 | &HashStat. ne 0 then jobstat = 'U';
412        				else jobstat = 'S';
413        				if &job_rc. in(4, 0) & &HashStat. = 0 then remarks="Successful";
414        				else if &HashStat. ne 0 & &job_rc. in(4, 0) then remarks='Hash Count do not Match';				
415        				else remarks= "An Error occured check the log for details";
416        				/*Vince Remove Me Codes*/
417        				put rundate_end= rundate_start=;
418        				replace;
419        			end;
420        
421        
422        		run;
423        
424        	%end;
425        
426        %mend LogAdminJob;
427        
428        /* macro LogTableLoaded
429         * */
430        %macro LogTableLoaded;
431        	%put job_check etl_lib = &etls_lib,
432        			   	etl_table = &etls_table,
433        			   	recBefore = &etls_recordsBefore,
434        			   	recAfter = &etls_recordsAfter,
435        			   	table_rc = &job_rc;
436        	proc sql;
437        		insert into admin.table_loader_log
438        			set Product = "&gcPProd",
439        			   	rundate_start = &gdtPRunBeg,
440        			   	etl_lib = "&etls_lib",
441        			   	etl_table = "&etls_table",
442        			   	recBefore = &etls_recordsBefore,
443        			   	recAfter = &etls_recordsAfter,
444        			   	table_rc = &job_rc
445        		;
446        	quit;
447        
448        %mend LogTableLoaded;
449        
450        
451        /* macro createBUP*/
452        /* * Purpose: backup and restore procedure*/
453        /* * IMPORTANT: MARKED FOR DELETION*/
454        /*%macro createBup(LibDta);*/
455        /*	*/
456        /*	%if &libdta ne %then %do;	*/
457        /*		%put Start Backup Procedure;*/
458        		
11                                                         The SAS System                                19:16 Friday, April 4, 2008

459        	/*delete all existing backup in work*/
460        /*		proc sql noprint;*/
461        /*			select compress(put(count(*),8.)," ") into: bupcnt */
462        /*			from dictionary.tables*/
463        /*			where ((libname = 'WORK') and ((memname contains '_0BUP0_' ) or (memname contains '_1BUP1_' )))*/
464        /*			;*/
465        /*		quit;*/
466        /*		*/
467        /*		%if &bupcnt > 0 %then %do;*/
468        /*			proc sql noprint;*/
469        /*				select memname into: delTbl separated by ", "*/
470        /*					from dictionary.tables */
471        /*					where ((libname = 'WORK') and ((memname contains '_0BUP0_' ) or (memname contains '_1BUP1_' )))*/
472        /*				;*/
473        /*				drop table &delTbl*/
474        /*				;	*/
475        /*			quit;*/
476        /*		%end;*/
477        	
478        	/*backup procedure*/
479        /*		%let LibDta = %sysfunc(strip(%sysfunc(compbl(&LibDta))));*/
480        /*		*/
481        /*		%do ctr01 = 1 %to %eval(%sysfunc(countc(&LibDta, " ")) + 1);*/
482        /*			*/
483        /*			%let LibDta_x = %sysfunc(scan(&LibDta, &ctr01,  " "));*/
484        /*	*/
485        /*			%if (%sysfunc(count(&LibDta_x, .)) = 0) %then %do;*/
486        /*				%let Lib = WORK;*/
487        /*				%let Dta = &LibDta_x;*/
488        /*	*/
489        /*			%end;*/
490        /*			%else %do;*/
491        /*	*/
492        /*				%let Lib = %sysfunc(scan(&LibDta_x, 1, .));*/
493        /*				%let Dta = %sysfunc(scan(&LibDta_x, 2, .));*/
494        /*	*/
495        /*			%end;*/
496        /*	*/
497        /*			%if (%sysfunc(exist(&Lib..&Dta))=1) %then %do;*/
498        /*		*/
499        /*				data work.&Lib._0BUP0_&Dta;*/
500        /*					set &Lib..&Dta;*/
501        /*				run;*/
502        /*	*/
503        /*				%put backup created;*/
504        /*	*/
505        /*			%end;*/
506        /*		*/
507        /*			%else %do;*/
508        /*		*/
509        /*				data work.&Lib._1BUP1_&Dta;*/
510        /*					x='table does not exist';*/
511        /*				run;*/
512        /*		*/
513        /*				%put backup created;*/
514        /*			%end;*/
515        /*	*/
516        /*		%end;*/
12                                                         The SAS System                                19:16 Friday, April 4, 2008

517        /*		%put End Backup Procedure;*/
518        /*	%end;*/
519        /**/
520        /*%mend createBup;*/
521        
522        /* macro restoreBUP
523         * IMPORTANT: MARKED FOR DELETION*/
524        /*%macro restoreBUP;*/
525        /**/
526        /*	%put Start Restore Backup Procedure;*/
527        /**/
528        /*	%let LibDta = %sysfunc(strip(%sysfunc(compbl(&gcBUPDta))));*/
529        /*	*/
530        /*	%do ctr01 = 1 %to %eval(%sysfunc(countc(&LibDta, " ")) + 1);*/
531        /*		*/
532        /*		%let LibDta_x = %sysfunc(scan(&LibDta, &ctr01,  " "));*/
533        /**/
534        /*		%if (%sysfunc(count(&LibDta_x, .)) = 0) %then %do;*/
535        /*			%let Lib = WORK;*/
536        /*			%let Dta = &LibDta_x;*/
537        /**/
538        /*		%end;*/
539        /*		%else %do;*/
540        /**/
541        /*			%let Lib = %sysfunc(scan(&LibDta_x, 1, .));*/
542        /*			%let Dta = %sysfunc(scan(&LibDta_x, 2, .));*/
543        /**/
544        /*		%end;*/
545        /*note backup restore still not working*/
546        
547        /*		%if (%sysfunc(exist(work.&Lib._0BUP0_&Dta))=1) %then %do;*/
548        /*			%put &Lib._0BUP0_&Dta backup found;*/
549        /**/
550        /*			data &Lib..&Dta (replace=yes);*/
551        /*				set work.&Lib._0BUP0_&Dta(obs=max);*/
552        /*			run;*/
553        /*				*/
554        /*			%put backup restored;*/
555        /*		%end;*/
556        /*	*/
557        /*		%if ((%sysfunc(exist(work.&Lib._1BUP1_&Dta))=1) and */
558        /*				(%sysfunc(exist(&Lib..&Dta))=1)) %then %do;*/
559        /*	*/
560        /*			proc sql;*/
561        /*				drop table &Lib..&Dta*/
562        /*				;*/
563        /*			quit;	*/
564        /*			%put backup restored;*/
565        /*		%end;*/
566        /**/
567        /*	%end;*/
568        /**/
569        /*	%put End Restore Backup Procedure;*/
570        /*	%endJob;*/
571        /*%mend restoreBUP;*/
572        
573        /* macro saveBUP
574         * IMPORTANT: MARKED FOR DELETION*/
13                                                         The SAS System                                19:16 Friday, April 4, 2008

575        
576        /*%macro saveBUP;*/
577        /**/
578        /*	%put Start Save Backup Procedure;*/
579        /*	proc sql noprint;*/
580        /*		select compress(put(count(*),8.)," ") into: bupcnt */
581        /*		from dictionary.tables*/
582        /*		where ((libname = 'WORK') and ((memname contains '_0BUP0_' ) or (memname contains '_1BUP1_' )))*/
583        /*		;*/
584        /*	quit;*/
585        /**/
586        /*	%if (&bupcnt > 0) %then %do;*/
587        /**/
588        /*		proc sql noprint;*/
589        /*			select memname into: bupTbl1 - :bupTbl&bupcnt*/
590        /*			from dictionary.tables */
591        /*			where ((libname = 'WORK') and ((memname contains '_0BUP0_' ) or (memname contains '_1BUP1_' )))*/
592        /*			;*/
593        /*		quit;*/
594        /**/
595        /*		%do i = 1 %to &bupcnt;*/
596        /*			%let mysuff = %sysfunc(compress(%sysfunc(cats(rd, */
597        /*					%sysfunc(putn(%sysfunc(datepart(&gdtPRunBeg)),mmddyyn8.)),  */
598        /*					%sysfunc(putn(%sysfunc(timepart(&gdtPRunBeg)),time8.)))),':'));*/
599        /*			%if %sysfunc(find(&&bupTbl&i, _0BUP0_,1)) > 0 %then %do;*/
600        /**/
601        /*				data %sysfunc(tranwrd(&&bupTbl&i, _0BUP0_, .))_&mysuff;*/
602        /*					set &&bupTbl&i;*/
603        /*				run;*/
604        /**/
605        /*				%put %sysfunc(tranwrd(&&bupTbl&i, _0BUP0_, .)) permanently saved as %sysfunc(tranwrd(&&bupTbl&i, _0BUP0_,
605      ! .))_&mysuff;*/
606        /**/
607        /*			%end;*/
608        /**/
609        /*			%else %do;*/
610        /**/
611        /*				proc sql;*/
612        /*					create table %sysfunc(tranwrd(&&bupTbl&i, _0BUP0_, .))_&mysuff*/
613        /*					like %sysfunc(tranwrd(&&bupTbl&i, _1BUP1_, .))*/
614        /*					;*/
615        /*				quit;*/
616        /**/
617        /*				%put %sysfunc(tranwrd(&&bupTbl&i, _1BUP1_, .)) permanently saved as %sysfunc(tranwrd(&&bupTbl&i, _1BUP1_,
617      ! .))_&mysuff;*/
618        /**/
619        /*			%end;*/
620        /**/
621        /*		%end;*/
622        /**/
623        /*	%end;*/
624        /**/
625        /*	%else %do;*/
626        /**/
627        /*		%put No tables to save;*/
628        /**/
629        /*	%end;*/
630        /**/
14                                                         The SAS System                                19:16 Friday, April 4, 2008

631        /*	%put End Save Backup Procedure;*/
632        /*%mend saveBUP;*/
633        
634        /*end of backup and restore procedure*/
635        
636        %macro errHandler;
637        /*restore backup files*/
638        	%restoreBUP;
639        /*halt loop processing	*/
640        	proc sql;
641        		delete * from work.paramtable
642        		;
643        	quit;
644        /*log end processing*/
645        	%let gdtPRunEnd = %sysfunc(datetime());
646        	%LogAdminJob(setType = 2, setprod=&gcPProd,setstart=&gdtPRunBeg, setstop =&gdtPRunEnd);
647        
648        /*quit processing*/
649        	%endjob;
650        %mend errHandler;
651        
652        %macro errDelRec(dset);
653        /* delete records appended to the Target Table */
654        	proc sql;
655        			delete from &dset
656        			where put(EXISTASOF,yymon7.) eq put(input("&gcPDate",yymmn6.),yymon7.);
657        	quit;
658        %mend errDelRec;
659        
660        /* macro wrnHandler
661         * Purpose: Macro for backing up???
662         * Applicable to Admin table macros
663         * IMPORTANT: not sure if this is being used, will have check further*/
664        %macro wrnHandler;
665        /*update log*/
666        	%LogAdminJob(setType = 1, setprod=&gcPProd,setstart=&gdtPRunBeg);
667        /*restore backup files*/
668        	%saveBUP;
669        %mend wrnHandler;
670        
671        
672        /* macro endJob
673         * Purpose: ???
674         * Applicable to Admin table macros
675         * IMPORTANT: not sure if this is being used, will have check further*/
676        %macro endJob;
677        	data _null_;
678        		%abort /*abend*/;
679        	run;
680        %mend endJob;
681        
682        /* macro CUSTSPLIT
683         * Purpose: Macro that retrieves the With RM and WithOut RM of a given source system
684         * Applicable to Copy to Staging jobs */
685        %macro CUSTSPLIT(SSCD=,CUSTLIB=,CUSTTABLE=);
686        	%put SSCD=&SSCD;
687        	%put CUSTLIB=&CUSTLIB;
688        	%put CUSTTABLE=&CUSTTABLE;
15                                                         The SAS System                                19:16 Friday, April 4, 2008

689           proc format;
690              picture pad4_ low-high="9999";
691           run;
692        	%if &CUSTTABLE=AMXUCF00 %then %let CUSTTABLE_=AMXUCF00(rename=(AMXUCF00_CF_CUST_NUM=CUST_NBR));
693        	%else %if &CUSTTABLE=CSACTM %then %let CUSTTABLE_=CSACTM(rename=(CS_CUST_NO=CUST_NBR));
694        	%else %if &CUSTTABLE=NAF %then %let CUSTTABLE_=NAF(rename=(NAF_KEY=CUST_NBR));
695        	%else %if &CUSTTABLE=CPBKUP %then %let CUSTTABLE_=CPBKUP(rename=(CR_ACCT_NBR=CUST_NBR) );
696        	%else %if &CUSTTABLE=IXQDWCST %then %let CUSTTABLE_=IXQDWCST(rename=(CUSTOMER_ID=CUST_NBR) );
697        	%else %if &CUSTTABLE=CUST %then %let CUSTTABLE_=CUST (rename=(CMNE=CUST_NBR) );
698        	%else %if &CUSTTABLE=BFB_APFCIMS %then %let CUSTTABLE_=BFB_APFCIMS(rename=(CIMS_CUST_NMBR=CUST_NBR));
699        	%else %if &CUSTTABLE=BPI_APFCIMS %then %let CUSTTABLE_=BPI_APFCIMS(rename=(CIMS_CUST_NMBR=CUST_NBR));
700        	data WORK.WRM WORK.WORM;
701        		set ADMIN.CUST_LOOKUP1;
702        		if SOURCE_SYSTEM_CD ne "RM" & VALID_TO_DTTM='31DEC9999:00:00:00'DT then do;
703        			output WORK.WORM;
704        		end;
705        		else if SOURCE_SYSTEM_CD eq "RM" & VALID_TO_DTTM='31DEC9999:00:00:00'DT then do;
706        			output WORK.WRM;
707        		end;
708        	run;
709        	data WORK.&CUSTTABLE._WRM (keep=REPL_ID RMID) WORK.&CUSTTABLE._WORM(drop=RMID);
710        		if _N_=1 then do;
711        			length RMID $30 REPL_ID $32
712        					 AMXUCF00_CF_CTL1 $2 AMXUCF00_CF_CTL2 $3 AMXUCF00_CF_CTL3 $3 AMXUCF00_CF_CTL4 $4
713            		    	 CS_CONTROL2 $3 CS_CONTROL3 $3 CS_BANK_NO $2 CR_ORG_NBR $2;					
714        			declare hash WRM(dataset:"WRM");
715        			WRM.defineKey("REPL_ID");
716        			WRM.defineData("RMID");
717        			WRM.defineDone();
718        			declare hash WORM(dataset:"WORM");
719        			WORM.defineKey("REPL_ID");
720        			WORM.defineDone();
721        		end;
722        		set &CUSTLIB..COPY_&CUSTTABLE_.;		
723        		%if &CUSTTABLE=AMXUCF00 %then %do;
724                 CUST_CTL1=put(input(AMXUCF00_CF_CTL1,8.),pad4_.);
725                 CUST_CTL2=put(input(AMXUCF00_CF_CTL2,8.),pad4_.);
726                 CUST_CTL3=put(input(AMXUCF00_CF_CTL3,8.),pad4_.);
727                 CUST_CTL4=put(input(AMXUCF00_CF_CTL4,8.),pad4_.);
728                 SOURCE_SYSTEM_CD="AC";
729              %end;
730              %else %if &CUSTTABLE=CSACTM %then %do;
731                 CUST_CTL1=put(input(CS_BANK_NO,8.),pad4_.);
732                 CUST_CTL2=put(input(CS_CONTROL2,8.),pad4_.);
733                 CUST_CTL3=put(input(CS_CONTROL3,8.),pad4_.);
734                 CUST_CTL4="0000";
735                 SOURCE_SYSTEM_CD="XS";
736              %end;
737              %else %if &CUSTTABLE=NAF %then %do;
738                 CUST_CTL1="0051";
739                 CUST_CTL2="0000";
740                 CUST_CTL3="0000";
741                 CUST_CTL4="0000";
742                 SOURCE_SYSTEM_CD="LS";
743              %end;
744              %else %if &CUSTTABLE=CPBKUP %then %do;
745                 CUST_CTL1="0040";
746                 CUST_CTL2=put(input(CR_ORG_NBR,8.),pad4_.);
16                                                         The SAS System                                19:16 Friday, April 4, 2008

747                 CUST_CTL3="0000";
748                 CUST_CTL4="0000";
749                 SOURCE_SYSTEM_CD="CP";
750              %end;
751              %else %if &CUSTTABLE=IXQDWCST %then %do;
752                 CUST_CTL1="0002";
753                 CUST_CTL2="0001";
754                 CUST_CTL3="0000";
755                 CUST_CTL4="0000";
756                 SOURCE_SYSTEM_CD="IX";
757              %end;
758              %else %if &CUSTTABLE=CUST %then %do;
759                 CUST_CTL1="0002";
760                 CUST_CTL2="0004";
761                 CUST_CTL3="0000";
762                 CUST_CTL4="0000";
763                 SOURCE_SYSTEM_CD="OP";
764              %end;
765              %else %if &CUSTTABLE=BFB_APFCIMS | &CUSTTABLE=BPI_APFCIMS %then %do;
766                 CUST_CTL1="0002";
767                 CUST_CTL2="0000";
768                 CUST_CTL3="0000";
769                 CUST_CTL4="0000";
770                 SOURCE_SYSTEM_CD="BP";
771              %end;
772        		/*drop AMXUCF00_CF_CTL1  AMXUCF00_CF_CTL2  AMXUCF00_CF_CTL3  AMXUCF00_CF_CTL4
773              	  CS_CONTROL2  CS_CONTROL3  CS_BANK_NO  CR_ORG_NBR ;*/
774        		REPL_ID=compress(CUST_NBR  || CUST_CTL1 || CUST_CTL2 || CUST_CTL3 || CUST_CTL4);
775        		if WORM.check()=0 & WRM.check() ne 0 then output WORK.&CUSTTABLE._WORM;
776        		else if WRM.find()=0 & WORM.check() ne 0 then output WORK.&CUSTTABLE._WRM;
777        	run;
778        	proc sql;
779        		drop table WORM, WRM;
780        	quit;
781        %mend;
782        
783        /* macro layout
784         * Purpose: Creates CAR Tabular Layout template, not sure
785         * CAR Tabular Layout */
786        %macro layout(out,src, F2);
787          DATA &out;
788            SET &src;
789            IF SUBSTR(&F2,1,1) = '(' and SUBSTR(&F2,2,1) in ( 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
789      ! 'n', 'o', 'p', 'q',        'r', 's', 't', 'u', 'v', 'w' ,'x', 'y', 'z') THEN
790                 F2 = '               ' || COMPBL(&F2);
791            ELSE IF SUBSTR(&F2,1,3) IN ( 'ii ', 'iv ', 'vi ', 'ix ') or SUBSTR(&F2,1,4) IN ( 'iii ', 'vii ') or SUBSTR(&F2,1,2) =
791      !  'i ' THEN
792                 F2 = '            ' || COMPBL(&F2);
793            ELSE IF SUBSTR(&F2,1,1) IN ( 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
793      ! 'r', 's', 't', 'u',        'v', 'w' ,'x', 'y', 'z')
794                   and SUBSTR(&F2,3,1) in ( '1', '2', '3', '4', '5', '6', '7', '8', '9') THEN
795                 F2 = '         ' || COMPBL(&F2);
796            ELSE IF SUBSTR(&F2,1,1) IN ( 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',
796      ! 'r', 's', 't', 'u',        'v', 'w' ,'x', 'y', 'z') THEN
797                 F2 = '      ' || COMPBL(&F2);
798            ELSE IF SUBSTR(&F2,1,1) IN ( '1' , '2' , '3' , '4' , '5',  '6',  '7',  '8',  '9')  THEN
799                 F2 = '   ' || COMPBL(&F2);
800            ELSE F2 = COMPBL(&F2);
17                                                         The SAS System                                19:16 Friday, April 4, 2008

801            WHERE F1 NE .;
802          RUN;
803        %mend;
804        
805        
806        /* update_dsname
807         * Update Car Template Valid To
808         * Expires VALID_TO_DTTM fields for a specified table*/
809        %macro update_dsname(name);
810        	%if %sysfunc(exist("&name"))=0 %then %do;
811        		data &name;
812        			modify &name;
813        			if VALID_TO eq . then VALID_TO = round(DATETIME(),1);
814        			if round(VALID_TO_DTTM,1) = 253717660800 then VALID_TO_DTTM = round(DATETIME(),1);
815        			replace;
816        		run;
817        	%end;	
818        	%else %put Intial load.;
819        %mend;
820        
821        /* macro createQSAMparam
822         * Purpose: Create QSAM Date Parameter
823         * IMPORTANT: MARKED FOR DELETION*/
824        /*%macro createQSAMparam;*/
825        /*	%global qsamparam;*/
826        /*	data _NULL_;*/
827        /*		infile '/sasdata/qsam_parameter.txt';*/
828        /*		input @1 dateparam $7.;*/
829        /*		call symput ('qsamparam',dateparam);*/
830        /*	run;*/
831        /*	data _NULL_;*/
832        /*		infile '/sasdata/gleomparam.txt';*/
833        /*		input @1 dateparam $5.;*/
834        /*		call symput ('gleomparam',dateparam);*/
835        /*	run;*/
836        /*	%put qsamparam=&qsamparam;*/
837        /*	%put gleomparam=&gleomparam;*/
838        /*%mend;*/
839        /*%createQSAMparam;*/
840        
841        /*macro CheckTableStatus
842         * Purpose: Macro that checks the status of the input table. It returns an error if (a) table doesn't exist (b) table
842      ! exists but has no observations
843         * (c) last run of the job was unsuccessful
844         * IMPORTANT: Verify if this is still needed. Check Table Status User Transform is already being used by almost all the
844      ! jobs*/
845        %macro CheckTableStatus_S(TABLE=);
846        	%local STATUS PROD LIBRARY trigger;
847        	%let PROD=%upcase(%scan(&TABLE., 2, .));
848        	%let LIBRARY=%scan(&TABLE., 1, .);
849        	%if &library = %str() %then %let library=WORK;
850        	/* Start Check Table Existence*/
851        	%if %sysfunc(exist(&LIBRARY..&PROD.)) %then %do;
852        		proc sql noprint;
853        			select max(PROC_DATE) into :MAXPROCDATE
854        			from ADMIN.ADMIN_TABLE_LOG
855        			where PRODUCT eq "&prod"
856        			;		
18                                                         The SAS System                                19:16 Friday, April 4, 2008

857        			create table maxrundate as
858        			select max(rundate_start) as maxrundate
859        			from ADMIN.ADMIN_TABLE_LOG
860        			where PRODUCT eq "&prod" & PROC_DATE eq &MAXPROCDATE
861        			;			
862        			select jobstat into :status
863        			from ADMIN.ADMIN_TABLE_LOG
864        			where PRODUCT eq "&prod" & PROC_DATE eq &MAXPROCDATE. &
865        					RUNDATE_START eq (select maxrundate from maxrundate)
866        			;
867        			%put sqlobs=&sqlobs;
868        			%put PROD=&PROD;
869        			%put maxprocdte=%sysfunc(putn(&MAXPROCDATE,date9.));
870        			%put status=&STATUS;
871        		quit;
872        		data _null_;
873        			set maxrundate;
874        			put maxrundate=;
875        			format maxrundate datetime.;
876        		run;
877        		proc datasets library=WORK nolist;
878        			delete maxrundate;
879        		quit;
880        		%if &sqlobs ne 0 %then %do; /*Check Table Registration in ATL*/
881        			%if &STATUS = S %then %do;
882        				%put Loading of &PROD. is successful;
883        				%put Job will proceed;
884        			%end;
885        			%else %do;
886        				data _null_;
887        					put "Loading of table &PROD. is Unsuccessful";
888        					put "Job will be aborted";		
889        					abort;
890        				run;
891        			%end;
892        		%end;/*End Check Table Registration in ATL*/
893        		%else %do;
894        			data _null_;
895        				put "&PROD. is not registered in ADMIN_TABLE_LOG";
896        				put "or";
897        				put "ERROR in ADMIN_TABLE_LOG_DATES";
898        				put "Job will be aborted";		
899        				abort;
900        			run;
901        		%end;
902        	%end;/*End Check Table Existence*/
903        	%else %do;
904        		data _null_;
905        			put "Dataset &LIBRARY..&PROD. does not exist";
906        			put "Job will be aborted";		
907        			abort;
908        		run;
909        	%end;
910        %mend;
911        
912        
913        /*call macros*/
914        %chkAdminTables;
19                                                         The SAS System                                19:16 Friday, April 4, 2008

915        /*%get_run_control_dates(runctrl=control.run_dates)*/
916        
917        /* macro GetSources
918         * Purpose: Macro to get the source table of a given job
919         * IMPORTANT: Check if it can be integrated in the macros below*/
920        %global TABLE;
921        %macro GetSources(a);
922           data _null_;
923        	   call symput('TABLE',strip(substr("&a",6)));
924           run;
925        %mend;
926        
927        /* macro GetDSN
928         * Purpose: Macro that will retrieve the DSN & hash count file for Mainframe based source systems. Also it will retrieve
928      ! the directory for external files.*/
929        %global LOAD_DTTM;
930        %macro GetDSN(source, target_table);
931        	%local dsnname hcname avlbl;
932        	%global finaldsn qsamnum finalhc;
933        	%let AVLBL = *BP*CP*AC*XS*LS*RM*GL*;
934        
935        	proc sql noprint;
936        	      	select FILENAME, HCFILENAME
937        	      	into :DSNNAME, :HCNAME
938        	      	from ADMIN.DSN_TABLE
939        	      	where SOURCE eq "&source" & TABLE_NAME eq "&target_table"
940        	 ;	
941        	quit;
942        
943        	data _null_;
944        	      	if "&LOAD_DTTM" eq ' ' then do;
945        			put 'WARNING: LOAD_DTTM unavailable and will be set to 31DEC9999:23:59:59'; 	
946        			call symput('LOAD_DTTM','31DEC9999:23:59:59');
947        		end;
948        	run;
949        	data _null_;
950        		c = "&LOAD_DTTM"dt;
951        		format c datetime.;
952        		b = compress(substr(put(c,datetime.),3,3) || substr(put(c,datetime.),1,2) || substr(put(c,datetime.),6,2)) ;
953        		call symput('QSAMNUM',b);		
954        	run;	
955        	%put NOTE: QSAMNUM resolves to &QSAMNUM;
956        
957        	%if %index(*&AVLBL*,&source)> 0 %then %do; /*checking for hash count*/
958        		data _null_;
959        /*		if  "&HCNAME" eq ' ' then do;*/
960        /*			put "ERROR: Hash Count filename does not exist using Source Code = &source and Target Table Name = &target_table";*/
961        /*			abort;*/
962        /*		end;*/
963        			a = "&HCNAME";
964        			num = rxmatch('mmmddyy',a);
965        			len = length(a);
966        			last = substr(a,num + 7,len - num + 7);			
967        			rx = rxparse("$'mmmddyy' to '&qsamnum'");
968        			call rxchange(rx,1,a);
969        			f = substr(a,1,num + 7 - 1);
970        			final = trim(f) || trim(last);
971        			call symput ('FINALHC',final);	
20                                                         The SAS System                                19:16 Friday, April 4, 2008

972        		run;
973        	%end;
974        
975        	data _null_; /*for dsn names*/
976        		tempdsn = "&DSNNAME";
977        		tempdsn = strip(tempdsn);
978        		if  tempdsn eq ' ' then do;
979        			put "ERROR: DSN filename does not exist using Source Code = &source and Target Table Name = &target_table";
980        			abort;
981        		end;
982        		if "&source" in('XLS','CXL','PC') then do;	
983        			call symputx('FINALDSN',tempdsn);
984        			return;
985        		end;
986        		else do;
987        			num = rxmatch('mmmddyy',tempdsn);
988        			len = length(tempdsn);
989        			last = substr(tempdsn,num + 7,len - num + 7);			
990        			rx = rxparse("$'mmmddyy' to '&qsamnum'");
991        			call rxchange(rx,1,tempdsn);
992        			f = substr(tempdsn,1,num + 7 - 1);
993        			final = trim(f) || trim(last);
994        			call symputx ('FINALDSN',final);
995        		end;
996        	run;
997        	%put NOTE: FINALDSN resolves to &FINALDSN;
998        %mend;
999        
1000       /* Macro createdset and fillup
1001        * Purpose: Creates datasets for TMPL jobs for CAR
1002        */
1003       %macro createdset(STAT);
1004       	%if &STAT eq IL %then %put NOTE: Initial Load.;
1005       	%else %put NOTE: Succeeding Load.;
1006       	data _null_;
1007       		a = substr("&CARPART",14);
1008       		if strip(a) eq 'CAR_P_III_1C_2' | strip(a) eq 'CAR_P_III_1C_1'
1009          			then call symput('PART','CAR_P_III_1C$');
1010       		else do;
1011       			b = compress(strip(a) || '$');
1012       			call symput('PART',b);
1013       		end;
1014       	run;
1015       	%if %substr(&CARPART,14) eq CAR_P_III_1C_2 %then %do;
1016       		data &_OUTPUT;
1017       			keep CAR_SEQ_NO NATURE_OF_ITEM VALID_FROM_DTTM VALID_TO_DTTM;
1018       			set tempext."&PART"n (firstobs = 6 keep = f15 f17);
1019       			CAR_SEQ_NO = f15;
1020       			NATURE_OF_ITEM = f17;
1021       			VALID_FROM_DTTM = round(datetime(),1);
1022       			VALID_TO_DTTM = "31DEC9999:00:00:00"dt;
1023       		run;
1024       	%end;
1025       	%else %if %substr(&CARPART,14) eq CAR_P_III_1C_1 %then %do;
1026       		data &_OUTPUT;
1027       			keep CAR_SEQ_NO NATURE_OF_ITEM VALID_FROM_DTTM VALID_TO_DTTM;
1028       			set tempext."&PART"n (firstobs = 6 keep = f1 f2);
1029       			CAR_SEQ_NO = f1;
21                                                         The SAS System                                19:16 Friday, April 4, 2008

1030       			NATURE_OF_ITEM = f2;
1031       			VALID_FROM_DTTM = round(datetime(),1);
1032       			VALID_TO_DTTM = "31DEC9999:00:00:00"dt;
1033       		run;
1034       	%end;
1035       	%else %do;
1036       		data &_OUTPUT;
1037       			keep CAR_SEQ_NO NATURE_OF_ITEM VALID_FROM_DTTM VALID_TO_DTTM;
1038       			set tempext."&PART"n (firstobs = 6);
1039       			CAR_SEQ_NO = f1;
1040       			NATURE_OF_ITEM = f2;
1041       			VALID_FROM_DTTM = round(datetime(),1);
1042       			VALID_TO_DTTM = "31DEC9999:00:00:00"dt;
1043       		run;	
1044       	%end;
1045       %mend;
1046       
1047       
1048       %macro fillup(CARPART);
1049       %local CARPART;
1050       	%if not %sysfunc(exist(&CARPART)) %then %do;
1051       	%createdset(IL);
1052       	%end;
1053       	%else %do;
1054       	%update_dsname(&CARPART);
1055       	%createdset(SL);
1056       	%end;
1057       %mend;
1058       
1059       
1060       
1061       
1062       
1063       %rcSet(&syserr);
1064       %rcSet(&sysrc);
1065       %rcSet(&sqlrc);
1066       
1067       /*============================================================================*
1068        * Step:          Create Parameter Table                    A5SFKZBN.BS000U99 *
1069        * Transform:     Create Parameter Table                                      *
1070        * Description:                                                               *
1071        *                                                                            *
1072        * Source Table:  Declare Macros - work.W5HIQJ9G            A5SFKZBN.BQ000RYE *
1073        * Target Table:  Create Parameter Table - work.W5HIQJ7F    A5SFKZBN.BQ000RYC *
1074        *============================================================================*/
1075       
1076       %let SYSLAST = %nrquote(work.W5HIQJ9G);
1077       
1078       %let transformID = %quote(A5SFKZBN.BS000U99);
1079       
1080       %let trans_rc = 0;
1081       
1082       /* Source table(s)/view(s)  */
1083       %let _INPUT0 = work.W5HIQJ9G;
1084       
1085       /* Target table/view(s)  */
1086       %let _OUTPUT = work.W5HIQJ7F;
1087       %let _OUTPUT0 = work.W5HIQJ7F;
22                                                         The SAS System                                19:16 Friday, April 4, 2008

1088       
1089       /* Options  */
1090       %let cPDate = %nrquote(#dd#mon#yyyy);
1091       %let cPPath = ;
1092       %let gcPProd = %nrquote(STG_INDIVIDUAL_CUSTOMER_ALS);
1093       %let gcPDateBeg = %nrquote(&createdatetime);
1094       %let gcPDateEnd = %nrquote(1);
1095       
1096       /* List of target columns to keep  */
1097       %let keep = ;
1098       
1099       /***********************************************************************
1100        Program Name: Create Parameter Table
1101            Function: creates work.paramtable used to supply job paramters.
1102               Usage:
1103          Parameter1: gcPProd - specifies the product processed
1104          Parameter2: gcPDateBeg - specifies the start date of processing
1105          Parameter3: gcPDateEnd - specifies the end date of processing
1106          Parameter4: gcPIntrvl - specifies the mode/interval per processing
1107          Parameter5: gcPDate - character date used to naming files/datatesets
1108          Parameter6: gcPPath - specifies the path/dataset used by the program
1109             Authors: Marco Sarmiento
1110                Date: 09MAY06:11:00:00
1111                 SAS:
1112           Called-by:
1113               Calls:
1114       Datasets used: Admin.Admin_Table_log, Admin.Dependency
1115       					optional (inputproperties.csv)
1116          Revised By: sphmgo
1117       Revision Date: 21JUN2006
1118       Revision Desc: handling if gcpdateBeg="REINITIALIZE"
1119       ***********************************************************************/
1120       
1121       options mprint symbolgen mlogic;
1122       %let gcPIntrvl = %nrquote(HOUR);
1123       /*libname admin "/sasdata/admin";*/
1124       
1125       %global gcPProd gdPDate gcPIntrvl gcPDate gcPPath gcPJobStat gnPDepStat;
1126       %macro createParamTable;
1127       /*define paramtable*/
1128       	proc sql;
1129       		create table work.ParamTable
1130       		(
1131       			Product char(32),
1132       			ProcDate num format=date9.,
1133       			ProcIntrvl char(32),
1134       			CharDate char(32),
1135       			ProcPath char(255),
1136       			JobStat char(1),
1137       			Dep_Stat num
1138       		);
1139       	quit;
1140       
1141       /*check parameters*/
1142       	%if ("&gcpdatebeg" = "REINITIALIZE") %then %do;
1143       
1144       		%let nPProcDate =.;
1145       		%let ProcIntrvl =;
23                                                         The SAS System                                19:16 Friday, April 4, 2008

1146       		%let lnIterCnt=1;
1147       	%end;/*if dcpdatebeg=Reinitialize*/
1148       	%else %do;
1149       
1150       		%if "&gcpdatebeg"="INCREMENT LAST SUCCESSFUL LOAD" %then %do;
1151       
1152       			proc sql noprint;
1153       				select max(proc_date) into: maxdate
1154       				from admin.admin_table_log
1155       				where jobstat = "S"
1156       					and upcase(product) = upcase("&gcpProd")
1157       				;
1158       			quit;
1159       			
1160       			%if &sqlobs = 0 %then %do;
1161       				%put 'No date to increment';
1162       /*				%abort;*/
1163       			%end;/*if sqlobs=0*/
1164       
1165       			%let gdpdatebeg = %sysfunc(intnx(&gcPIntrvl,&maxdate,1));
1166       
1167       		%end;/*if gcpdatebeg=Increment...*/
1168       
1169       		%else %do;
1170       			%let gdpdatebeg=%sysfunc(putn("&gcpdatebeg"d,8.));
1171       		%end;/* else do*/
1172       
1173       
1174       		%if (%sysfunc(findc(&gcpdateend, 'abcdefghijklmnopqrstuvwxyz',i,1)) = 0) %then %do;
1175       			%let gdpdateend = %sysfunc(intnx(&gcPIntrvl,&gdpdatebeg,%eval(&gcpdateend -1),e));
1176       			%put &gdpdateend;
1177       		%end;
1178       		%else %do;
1179       			%let gdpdateend=%sysfunc(putn("&gcpdateend"d,8.));
1180       		%end;
1181       
1182       		%let lnIterCnt = %sysfunc(intck(&gcPIntrvl,&gdpdatebeg,&gdpdateend));	
1183       
1184       	%end;/* else do*/
1185       
1186       	%if (("&cpPath"="from Input Properties text file") and ("&gcpdatebeg" ne "REINITIALIZE")) %then %do;
1187       
1188       		data inputproperties;
1189       			infile "/sas9/sasdata/inputproperties.txt";
1190       			input @1 Product $16. @17 Procdate date9. @33 ProcIntrvl $16. @49 CharDate $16. @65 ProcPath: $255.;
1191       				
1192       				product = strip(upcase(product));
1193       				ProcIntrvl = strip(upcase(ProcIntrvl));
1194       				ProcPath = strip(upcase(ProcPath));
1195       				CharDate = strip(lowcase(CharDate));
1196       				
1197       				if product = gcPProd then do;
1198       					output;
1199       					stop;
1200       				end;
1201       		run;
1202       
1203       		proc sql noprint;
24                                                         The SAS System                                19:16 Friday, April 4, 2008

1204       			insert into work.Paramtable
1205       			select *, "" as jobstat from inputproperties
1206       			;
1207       		quit;
1208       
1209       	%end;
1210       /* if Input properties and not reinitialize*/
1211       
1212       	%else %do;
1213       		
1214       		%do Cnt = 0 %to &lnIterCnt;
1215       			%let loopctr = %eval(&cnt + 1);
1216       			%put loopctr = &loopctr;
1217       
1218       			%if ("&gcpdatebeg" ne "REINITIALIZE") %then %do;
1219       				%let d = %sysfunc(day(%sysfunc(intnx(&gcPIntrvl,&gdpdatebeg,&Cnt))));
1220       				%let m = %sysfunc(month(%sysfunc(intnx(&gcPIntrvl,&gdpdatebeg,&Cnt))));
1221       				%let yyyy= %sysfunc(year(%sysfunc(intnx(&gcPIntrvl,&gdpdatebeg,&Cnt))));
1222       				%let nPProcDate = %sysfunc(mdy(&m,&d,&yyyy));
1223       				%let cPProcDate = %sysfunc(putn(&nPProcDate, date9.));
1224       	
1225       				%let dd = %substr(&cPProcDate, 1, 2);
1226       				%let mm = %substr(%sysfunc(putn(&nPProcDate, mmddyy8.)), 1, 2);
1227       				%let mon = %sysfunc(lowcase(%sysfunc(putn(&nPProcDate, monname3.))));
1228       				%let month = %sysfunc(strip(%sysfunc(lowcase(%sysfunc(putn(&nPProcDate, monname.))))));
1229       				%let yy = %substr(%sysfunc(putn(&nPProcDate, mmddyy8.)), 7, 2);
1230       				
1231       				%put  yr = &yyyy &yy month = &month &mon &mm &m date = &dd &d;	
1232       			%end; /* if gcpdatebeg ne reintialize*/
1233       			
1234       			%let gcPDate = %sysfunc(tranwrd(&cPDate, #, %NRQUOTE(&)));	
1235       			%let gcPPath = %sysfunc(tranwrd(%sysfunc(compress(&cPPath,"'")), #, %NRQUOTE(&)));
1236       
1237       /*			%symdel NOWARN yyyy yy month mon mm m dd d loopctr;*/
1238       	
1239       			proc sql;
1240       				insert into work.ParamTable
1241       				set Product = "&gcPProd",
1242       					ProcDate = &nPProcDate,
1243       					ProcIntrvl = "&gcPIntrvl",
1244       					CharDate = "&gcPDate",
1245       					ProcPath = compress("&gcPPath")
1246       				;
1247       			quit;
1248       		
1249       		%end;/*do*/
1250       		
1251       	%end; /*else do*/
1252       /*check job dependency. When all prerequisite jobs are successfully processed implies dep_stat = 1 else dep_stat = 0*/
1253       	proc sql;
1254       		update work.Paramtable
1255       			set Dep_Stat = 1
1256       		;
1257       		create table tmp_a as
1258       			select a.product,a.dependency, b.procdate
1259       			from admin.dependency a left join work.Paramtable b
1260       				on a.product = b.product
1261       		;
25                                                         The SAS System                                19:16 Friday, April 4, 2008

1262       	quit;
1263       
1264       	%if &sqlobs > 0 %then %do;/*product has dependency*/
1265       
1266       		%if ("&gcpdatebeg" = "REINITIALIZE") %then %do;
1267       			proc sql;
1268       				create table tmp_b as
1269       					select a.Dependency, max(ProcDate) as maxdate
1270       					from tmp_a a left join admin.admin_table_log b
1271       						on a.dependency = b.product
1272       					group by a.dependency
1273       				;
1274       				select distinct maxdate
1275       				from tmp_b
1276       				;
1277        			quit;
1278       			%if &sqlobs ne 1 %then %do;
1279       				%put Prerequisite jobs failed or were unsuccessful. Records will be removed from Parameter list;
1280       				proc sql;
1281       					delete * from work.Parameter
1282       					;
1283       				quit;
1284       			%end;
1285       		%end;
1286       
1287       		data param;
1288       			set work.paramtable;
1289       		run;
1290       
1291       		proc sql;
1292       			update work.Paramtable
1293       				set Dep_Stat = 0
1294       				where ProcDate in (select distinct a.procdate from tmp_a a , admin.admin_table_log b, work.param c
1295       					where a.dependency = b.product and b.product=c.product and a.procdate = b.proc_date and ((b.jobstat ne "S") or
1295     ! (b.jobstat is missing)))
1296       			;
1297       			drop table tmp_a
1298       			;
1299       		quit;
1300       		
1301       	%end;
1302       
1303       /*check previous job processing*/
1304       
1305       	proc sql;
1306       		update work.Paramtable
1307       			set Jobstat = "U"
1308       			where ProcDate in (select distinct proc_date from admin.admin_table_log where jobstat = "U"
1309       				and product = "&gcPProd")
1310       		;
1311       		update work.Paramtable
1312       			set Jobstat = "S"
1313       			where ProcDate in (select distinct proc_date from admin.admin_table_log where jobstat = "S"
1314       				and product = "&gcPProd")
1315       		;
1316       	quit;
1317       
1318       /*delete records with jobstat = "S" (already processed) and Dep_stat = 0 (with unsuccessful dependencies)*/
26                                                         The SAS System                                19:16 Friday, April 4, 2008

1319       /*initialize lcstat*/
1320       	%let lcstat = ;
1321       	proc sql noprint;
1322       		select catx(" - ", strip(product), put(procdate, date9.))  as lcStat  into :lcStat separated by ", " from
1322     ! work.Paramtable
1323       			where (Jobstat = "S")
1324       		;
1325       	quit;
1326       
1327       	%if &sqlobs > 0 %then %do;
1328       		%put &lcStat were already successfully proccessed. Records will be removed from Parameter list;
1329       	%end;
1330       
1331       	proc sql noprint;
1332       		select catx(" - ", strip(product), put(procdate, date9.)) as lcStat into :lcStat separated by ", " from work.Paramtable
1333       			where (dep_stat = 0)
1334       		;
1335       	quit;
1336       
1337       	%if &sqlobs > 0 %then %do;
1338       		%put Prerequisite jobs for &lcStat failed or were unsuccessful. Records will be removed from Parameter list;
1339       	%end;
1340       
1341       	%if ("&gcpdatebeg" ne "REINITIALIZE") %then %do;
1342       	proc sql;
1343       		delete * from work.Paramtable
1344       			where ((Jobstat = "S") or (dep_stat = 0))
1345       		;
1346       	quit;
1347       	%end;
1348       
1349       	proc sql noprint;
1350       		select * from work.Paramtable
1351       		;
1352       	quit;
1353       
1354          %if &sqlobs = 0 and ("&gcpdatebeg" ne "REINITIALIZE") %then %do;
1355       		%put 'No ProcDate parameter to process';
1356       /*		%abort*/
1357       	%end;
1358       
1359       /*initialize global parameter variables*/
1360       
1361       proc sql noprint;
1362       	select product, procdate, procintrvl, chardate, procpath, jobstat, dep_stat
1363       		into :gcPProd, :gdPDate, :gcPIntrvl, :gcPDate, :gcPPath, :gcPJobStat, :gnPDepStat
1364       		from work.Paramtable (obs=1)
1365       	;
1366       quit;
1367       %let gdPDate="&createdatetime"dt;
1368       /*%let gdPDate=%sysfunc(inputn(&gdPDate,date9.));
1369       %let gnPDepStat=%sysfunc(strip(&gnPDepStat));*/
1370       
1371       
1372       %mend createParamTable;
1373       %createParamTable;
MLOGIC(CREATEPARAMTABLE):  Beginning execution.
MPRINT(CREATEPARAMTABLE):   proc sql;
27                                                         The SAS System                                19:16 Friday, April 4, 2008

MPRINT(CREATEPARAMTABLE):   create table work.ParamTable ( Product char(32), ProcDate num format=date9., ProcIntrvl char(32), 
CharDate char(32), ProcPath char(255), JobStat char(1), Dep_Stat num );
NOTE: Table WORK.PARAMTABLE created, with 0 rows and 7 columns.
MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition ("&gcpdatebeg" = "REINITIALIZE") is FALSE
SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition "&gcpdatebeg"="INCREMENT LAST SUCCESSFUL LOAD" is FALSE
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is GDPDATEBEG)
SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable GCPDATEEND resolves to 1
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition (%sysfunc(findc(&gcpdateend, 'abcdefghijklmnopqrstuvwxyz',i,1)) = 0) is TRUE
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is GDPDATEEND)
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable GDPDATEBEG resolves to 17626
SYMBOLGEN:  Macro variable GCPDATEEND resolves to 1
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %PUT &gdpdateend
SYMBOLGEN:  Macro variable GDPDATEEND resolves to 17999
17999
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is LNITERCNT)
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable GDPDATEBEG resolves to 17626
SYMBOLGEN:  Macro variable GDPDATEEND resolves to 17999
SYMBOLGEN:  Macro variable CPPATH resolves to 
SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition (("&cpPath"="from Input Properties text file") and ("&gcpdatebeg" ne "REINITIALIZE")) is 
      FALSE
SYMBOLGEN:  Macro variable LNITERCNT resolves to 0
MLOGIC(CREATEPARAMTABLE):  %DO loop beginning; index variable CNT; start value is 0; stop value is 0; by value is 1.  
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is LOOPCTR)
SYMBOLGEN:  Macro variable CNT resolves to 0
MLOGIC(CREATEPARAMTABLE):  %PUT loopctr = &loopctr
SYMBOLGEN:  Macro variable LOOPCTR resolves to 1
loopctr = 1
SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition ("&gcpdatebeg" ne "REINITIALIZE") is TRUE
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is D)
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable GDPDATEBEG resolves to 17626
SYMBOLGEN:  Macro variable CNT resolves to 0
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is M)
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
28                                                         The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable GDPDATEBEG resolves to 17626
SYMBOLGEN:  Macro variable CNT resolves to 0
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is YYYY)
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable GDPDATEBEG resolves to 17626
SYMBOLGEN:  Macro variable CNT resolves to 0
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is NPPROCDATE)
SYMBOLGEN:  Macro variable M resolves to 6
SYMBOLGEN:  Macro variable D resolves to 5
SYMBOLGEN:  Macro variable YYYY resolves to 1999
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is CPPROCDATE)
SYMBOLGEN:  Macro variable NPPROCDATE resolves to 14400
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is DD)
SYMBOLGEN:  Macro variable CPPROCDATE resolves to 05JUN1999
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is MM)
SYMBOLGEN:  Macro variable NPPROCDATE resolves to 14400
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is MON)
SYMBOLGEN:  Macro variable NPPROCDATE resolves to 14400
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is MONTH)
SYMBOLGEN:  Macro variable NPPROCDATE resolves to 14400
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is YY)
SYMBOLGEN:  Macro variable NPPROCDATE resolves to 14400
MLOGIC(CREATEPARAMTABLE):  %PUT yr = &yyyy &yy month = &month &mon &mm &m date = &dd &d
SYMBOLGEN:  Macro variable YYYY resolves to 1999
SYMBOLGEN:  Macro variable YY resolves to 99
SYMBOLGEN:  Macro variable MONTH resolves to june
SYMBOLGEN:  Macro variable MON resolves to jun
SYMBOLGEN:  Macro variable MM resolves to 06
SYMBOLGEN:  Macro variable M resolves to 6
SYMBOLGEN:  Macro variable DD resolves to 05
SYMBOLGEN:  Macro variable D resolves to 5
yr = 1999 99 month = june jun 06 6 date = 05 5
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is GCPDATE)
SYMBOLGEN:  Macro variable CPDATE resolves to #dd#mon#yyyy
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable DD resolves to 05
SYMBOLGEN:  Macro variable MON resolves to jun
SYMBOLGEN:  Macro variable YYYY resolves to 1999
MLOGIC(CREATEPARAMTABLE):  %LET (variable name is GCPPATH)
SYMBOLGEN:  Macro variable CPPATH resolves to 
MPRINT(CREATEPARAMTABLE):   proc sql;
SYMBOLGEN:  Macro variable GCPPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable NPPROCDATE resolves to 14400
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable GCPDATE resolves to 05jun1999
SYMBOLGEN:  Macro variable GCPPATH resolves to 
MPRINT(CREATEPARAMTABLE):   insert into work.ParamTable set Product = "STG_INDIVIDUAL_CUSTOMER_ALS", ProcDate = 14400, ProcIntrvl = 
"HOUR", CharDate = "05jun1999", ProcPath = compress("") ;
NOTE: 1 row was inserted into WORK.PARAMTABLE.

MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
29                                                         The SAS System                                19:16 Friday, April 4, 2008


MLOGIC(CREATEPARAMTABLE):  %DO loop index variable CNT is now 1; loop will not iterate again.
MPRINT(CREATEPARAMTABLE):   proc sql;
MPRINT(CREATEPARAMTABLE):   update work.Paramtable set Dep_Stat = 1 ;
NOTE: 1 row was updated in WORK.PARAMTABLE.

MPRINT(CREATEPARAMTABLE):   create table tmp_a as select a.product,a.dependency, b.procdate from admin.dependency a left join 
work.Paramtable b on a.product = b.product ;
NOTE: Table WORK.TMP_A created, with 0 rows and 3 columns.

MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 0
MLOGIC(CREATEPARAMTABLE):  %IF condition &sqlobs > 0 is FALSE
MPRINT(CREATEPARAMTABLE):   proc sql;
SYMBOLGEN:  Macro variable GCPPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CREATEPARAMTABLE):   update work.Paramtable set Jobstat = "U" where ProcDate in (select distinct proc_date from 
admin.admin_table_log where jobstat = "U" and product = "STG_INDIVIDUAL_CUSTOMER_ALS") ;
NOTE: No rows were updated in WORK.PARAMTABLE.

SYMBOLGEN:  Macro variable GCPPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(CREATEPARAMTABLE):   update work.Paramtable set Jobstat = "S" where ProcDate in (select distinct proc_date from 
admin.admin_table_log where jobstat = "S" and product = "STG_INDIVIDUAL_CUSTOMER_ALS") ;
NOTE: No rows were updated in WORK.PARAMTABLE.

MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.01 seconds
      

MLOGIC(CREATEPARAMTABLE):  %LET (variable name is LCSTAT)
MPRINT(CREATEPARAMTABLE):   proc sql noprint;
MPRINT(CREATEPARAMTABLE):   select catx(" - ", strip(product), put(procdate, date9.)) as lcStat into :lcStat separated by ", " from 
work.Paramtable where (Jobstat = "S") ;
NOTE: No rows were selected.
MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 0
MLOGIC(CREATEPARAMTABLE):  %IF condition &sqlobs > 0 is FALSE
MPRINT(CREATEPARAMTABLE):   proc sql noprint;
MPRINT(CREATEPARAMTABLE):   select catx(" - ", strip(product), put(procdate, date9.)) as lcStat into :lcStat separated by ", " from 
work.Paramtable where (dep_stat = 0) ;
NOTE: No rows were selected.
MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
30                                                         The SAS System                                19:16 Friday, April 4, 2008

      

SYMBOLGEN:  Macro variable SQLOBS resolves to 0
MLOGIC(CREATEPARAMTABLE):  %IF condition &sqlobs > 0 is FALSE
SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition ("&gcpdatebeg" ne "REINITIALIZE") is TRUE
MPRINT(CREATEPARAMTABLE):   proc sql;
MPRINT(CREATEPARAMTABLE):   delete * from work.Paramtable where ((Jobstat = "S") or (dep_stat = 0)) ;
NOTE: No rows were deleted from WORK.PARAMTABLE.

MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CREATEPARAMTABLE):   proc sql noprint;
MPRINT(CREATEPARAMTABLE):   select * from work.Paramtable ;
MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 1
SYMBOLGEN:  Macro variable GCPDATEBEG resolves to 04APR08:19:16:57
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(CREATEPARAMTABLE):  %IF condition &sqlobs = 0 and ("&gcpdatebeg" ne "REINITIALIZE") is FALSE
MPRINT(CREATEPARAMTABLE):   proc sql noprint;
MPRINT(CREATEPARAMTABLE):   select product, procdate, procintrvl, chardate, procpath, jobstat, dep_stat into :gcPProd, :gdPDate, 
:gcPIntrvl, :gcPDate, :gcPPath, :gcPJobStat, :gnPDepStat from work.Paramtable (obs=1) ;
MPRINT(CREATEPARAMTABLE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(CREATEPARAMTABLE):  %LET (variable name is GDPDATE)
SYMBOLGEN:  Macro variable CREATEDATETIME resolves to 04APR08:19:16:57
MLOGIC(CREATEPARAMTABLE):  Ending execution.
1374       
1375       
1376       
1377       
1378       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1379       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
31                                                         The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1380       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1381       
1382       /*============================================================================*
1383        * Step:          Log Start Time / Create Backup            A5SFKZBN.BS000U95 *
1384        * Transform:     Log Start Time                                              *
1385        * Description:                                                               *
1386        *                                                                            *
1387        * Source Table:  Create Parameter Table - work.W5HIQJ7F    A5SFKZBN.BQ000RYC *
1388        * Target Table:  COPY_AMXUCF00 - COPY.COPY_AMXUCF00        A5SFKZBN.BK00035M *
1389        *============================================================================*/
1390       
1391       /* Access the data for COPY  */
1392       LIBNAME COPY BASE "/sasdata/COPY" ;
NOTE: Libref COPY was successfully assigned as follows: 
      Engine:        BASE 
      Physical Name: /sasdata/COPY
1393       %rcSet(&syslibrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSLIBRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1394       
1395       /* Get number of records in table  */
1396       %let etls_recordsBefore = 0;
1397       %macro etls_recordCheck;
1398          %let etls_recCheckExist = %eval(%sysfunc(exist(COPY.COPY_AMXUCF00, DATA)) or
1399                %sysfunc(exist(COPY.COPY_AMXUCF00, VIEW)));
1400       
1401          %if (&etls_recCheckExist) %then
1402          %do;
1403             proc contents data = COPY.COPY_AMXUCF00 out = work.etls_contents(keep = nobs) noprint;
1404             run;
1405       
32                                                         The SAS System                                19:16 Friday, April 4, 2008

1406             data _null_;
1407                set work.etls_contents (obs = 1);
1408                call symput("etls_recordsBefore", left(put(nobs,32.)));
1409             run;
1410       
1411             proc datasets lib = work nolist nowarn memtype = (data view);
1412                delete etls_contents;
1413             quit;
1414       
1415          %end;
1416       %mend etls_recordCheck;
1417       %etls_recordCheck;
MLOGIC(ETLS_RECORDCHECK):  Beginning execution.
MLOGIC(ETLS_RECORDCHECK):  %LET (variable name is ETLS_RECCHECKEXIST)
SYMBOLGEN:  Macro variable ETLS_RECCHECKEXIST resolves to 1
MLOGIC(ETLS_RECORDCHECK):  %IF condition (&etls_recCheckExist) is TRUE
MPRINT(ETLS_RECORDCHECK):   proc contents data = COPY.COPY_AMXUCF00 out = work.etls_contents(keep = nobs) noprint;
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: The data set WORK.ETLS_CONTENTS has 49 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   data _null_;
MPRINT(ETLS_RECORDCHECK):   set work.etls_contents (obs = 1);
MPRINT(ETLS_RECORDCHECK):   call symput("etls_recordsBefore", left(put(nobs,32.)));
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: There were 1 observations read from the data set WORK.ETLS_CONTENTS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_RECORDCHECK):   delete etls_contents;
MPRINT(ETLS_RECORDCHECK):   quit;

NOTE: Deleting WORK.ETLS_CONTENTS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(ETLS_RECORDCHECK):  Ending execution.
1418       
1419       %let etls_table = %nrquote(COPY_AMXUCF00);
1420       %let etls_lib   = %nrquote(COPY);
1421       
1422       %let SYSLAST = %nrquote(work.W5HIQJ7F);
1423       
1424       %let transformID = %quote(A5SFKZBN.BS000U95);
1425       
1426       %let trans_rc = 0;
1427       
1428       /* Source table(s)/view(s)  */
33                                                         The SAS System                                19:16 Friday, April 4, 2008

1429       %let _INPUT0 = work.W5HIQJ7F;
1430       
1431       /* Target table/view(s)  */
1432       %let _OUTPUT = COPY.COPY_AMXUCF00;
1433       %let _OUTPUT0 = COPY.COPY_AMXUCF00;
1434       
1435       /* Options  */
1436       %let gcBUPDta = ;
1437       
1438       /* List of target columns to keep  */
1439       %let keep = AMXUCF00_CF_CTL1 AMXUCF00_CF_CTL2 AMXUCF00_CF_CTL3 AMXUCF00_CF_CTL4
1440               AMXUCF00_CF_CUST_NUM AMXUCF00_CF_PRIM_BR AMXUCF00_CF_DATE_ESTBL
1441               AMXUCF00_CF_PRIM_OFFICER AMXUCF00_CF_CR_SCORE AMXUCF00_CF_OFFICER_EMP_CD
1442               AMXUCF00_CF_BIRTH_DATE AMXUCF00_CF_SEX AMXUCF00_CF_RACE
1443               AMXUCF00_CF_MARIT_STAT AMXUCF00_CF_TAX_ID_PRFX AMXUCF00_CF_TAX_ID_NUM
1444               AMXUCF00_CF_TAX_ID_SUFX AMXUCF00_CF_TAX_ID_VALID AMXUCF00_CF_TAX_ID_NAME
1445               AMXUCF00_CF_TAX_ID_NAME_CTL AMXUCF00_CF_SHORT_NAME
1446               X001AMXUCF00_CF_LINE_TYPE X001AMXUCF00_CF_LINE_SEQ X001AMXUCF00_CF_DATA
1447               X002AMXUCF00_CF_LINE_TYPE X002AMXUCF00_CF_LINE_SEQ X002AMXUCF00_CF_DATA
1448               X003AMXUCF00_CF_LINE_TYPE X003AMXUCF00_CF_LINE_SEQ X003AMXUCF00_CF_DATA
1449               X004AMXUCF00_CF_LINE_TYPE X004AMXUCF00_CF_LINE_SEQ X004AMXUCF00_CF_DATA
1450               X005AMXUCF00_CF_LINE_TYPE X005AMXUCF00_CF_LINE_SEQ X005AMXUCF00_CF_DATA
1451               X006AMXUCF00_CF_LINE_TYPE X006AMXUCF00_CF_LINE_SEQ X006AMXUCF00_CF_DATA
1452               AMXUCF00_CF_CNTRY AMXUCF00_CF_PRIM_AREA_CD AMXUCF00_CF_BUS_AREA_CD
1453               AMXUCF00_CF_PERS_CMCL_CD AMXUCF00_CF_HOMEOWNR_IND AMXUCF00_CF_CITY
1454               AMXUCF00_CF_STATE AMXUCF00_CF_ZIP AMXUCF00_CF_BIRTH_DATE_SAS
1455               AMXUCF00_CF_DATE_ESTBL_SAS;
1456       
1457       
1458       %let gdtPRunBeg = %sysfunc(datetime());
1459       %LogAdminJob(setType = 0, setprod=&gcPProd,setstart=&gdtPRunBeg);
MLOGIC(LOGADMINJOB):  Beginning execution.
SYMBOLGEN:  Macro variable GCPPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS     
SYMBOLGEN:  Macro variable GDTPRUNBEG resolves to 1522955817.64654
MLOGIC(LOGADMINJOB):  Parameter SETTYPE has value 0
MLOGIC(LOGADMINJOB):  Parameter SETPROD has value STG_INDIVIDUAL_CUSTOMER_ALS
MLOGIC(LOGADMINJOB):  Parameter SETSTART has value 1522955817.64654
MLOGIC(LOGADMINJOB):  Parameter SETSTOP has value 
MLOGIC(LOGADMINJOB):  Parameter SYSMSG has value 
MPRINT(LOGADMINJOB):   proc sql noprint;
MPRINT(LOGADMINJOB):   select max(batch_no) into: maxbatchno from admin.admin_table_log ;
MPRINT(LOGADMINJOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable SETTYPE resolves to 0
MLOGIC(LOGADMINJOB):  %IF condition &setType = 0 is TRUE
MLOGIC(LOGADMINJOB):  %PUT log_check inserting row to admin_table_log
log_check inserting row to admin_table_log
MPRINT(LOGADMINJOB):   proc sql undo_policy=none;
SYMBOLGEN:  Macro variable SETPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS
SYMBOLGEN:  Macro variable GDPDATE resolves to "04APR08:19:16:57"dt
SYMBOLGEN:  Macro variable GCPINTRVL resolves to HOUR                            
SYMBOLGEN:  Macro variable SETSTART resolves to 1522955817.64654
SYMBOLGEN:  Macro variable SYSUSERID resolves to root
SYMBOLGEN:  Macro variable ETLS_JOBNAME resolves to POPULATE_INDIVIDUAL_CUSTOMER_FOR_ALS_INITIAL_LOAD
34                                                         The SAS System                                19:16 Friday, April 4, 2008

MPRINT(LOGADMINJOB):   insert into admin.admin_table_log set Product = "STG_INDIVIDUAL_CUSTOMER_ALS", proc_date = 
"04APR08:19:16:57"dt, proc_intrvl = "HOUR                            ", rundate_start = 1522955817.64654, etl_user = "root", 
jobName = "POPULATE_INDIVIDUAL_CUSTOMER_FOR_ALS_INITIAL_LOAD", jobstat = 'U', job_rc = -1, remarks="Unsuccessful", Batch_No = 0 ;
WARNING: The SQL option UNDO_POLICY=REQUIRED is not in effect. If an error is detected when processing this INSERT statement, that 
         error will not cause the entire statement to fail.
NOTE: 1 row was inserted into ADMIN.ADMIN_TABLE_LOG.

MPRINT(LOGADMINJOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(LOGADMINJOB):  Ending execution.
1460       
1461       /*back up data*/
1462       /*%createBup(LibDta=&gcBUPDta);*/
1463       
1464       
1465       
1466       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 4
MLOGIC(RCSET):  Parameter ERROR has value 4
SYMBOLGEN:  Macro variable ERROR resolves to 4
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is TRUE
MLOGIC(RCSET):  %LET (variable name is TRANS_RC)
SYMBOLGEN:  Macro variable ERROR resolves to 4
SYMBOLGEN:  Macro variable ERROR resolves to 4
SYMBOLGEN:  Macro variable JOB_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is TRUE
MLOGIC(RCSET):  %LET (variable name is JOB_RC)
SYMBOLGEN:  Macro variable ERROR resolves to 4
MLOGIC(RCSET):  Ending execution.
1467       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1468       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 4
MLOGIC(RCSET):  Parameter ERROR has value 4
SYMBOLGEN:  Macro variable ERROR resolves to 4
SYMBOLGEN:  Macro variable TRANS_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 4
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1469       
35                                                         The SAS System                                19:16 Friday, April 4, 2008

1470       /* Get number of records in table  */
1471       %let etls_recordsAfter = 0;
1472       %macro etls_recordCheck;
1473          %let etls_recCheckExist = %eval(%sysfunc(exist(COPY.COPY_AMXUCF00, DATA)) or
1474                %sysfunc(exist(COPY.COPY_AMXUCF00, VIEW)));
1475       
1476          %if (&etls_recCheckExist) %then
1477          %do;
1478             proc contents data = COPY.COPY_AMXUCF00 out = work.etls_contents(keep = nobs) noprint;
1479             run;
1480       
1481             data _null_;
1482                set work.etls_contents (obs = 1);
1483                call symput("etls_recordsAfter", left(put(nobs,32.)));
1484             run;
1485       
1486             proc datasets lib = work nolist nowarn memtype = (data view);
1487                delete etls_contents;
1488             quit;
1489       
1490          %end;
1491       %mend etls_recordCheck;
1492       %etls_recordCheck;
MLOGIC(ETLS_RECORDCHECK):  Beginning execution.
MLOGIC(ETLS_RECORDCHECK):  %LET (variable name is ETLS_RECCHECKEXIST)
SYMBOLGEN:  Macro variable ETLS_RECCHECKEXIST resolves to 1
MLOGIC(ETLS_RECORDCHECK):  %IF condition (&etls_recCheckExist) is TRUE
MPRINT(ETLS_RECORDCHECK):   proc contents data = COPY.COPY_AMXUCF00 out = work.etls_contents(keep = nobs) noprint;
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: The data set WORK.ETLS_CONTENTS has 49 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   data _null_;
MPRINT(ETLS_RECORDCHECK):   set work.etls_contents (obs = 1);
MPRINT(ETLS_RECORDCHECK):   call symput("etls_recordsAfter", left(put(nobs,32.)));
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: There were 1 observations read from the data set WORK.ETLS_CONTENTS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_RECORDCHECK):   delete etls_contents;
MPRINT(ETLS_RECORDCHECK):   quit;

NOTE: Deleting WORK.ETLS_CONTENTS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_RECORDCHECK):  Ending execution.
36                                                         The SAS System                                19:16 Friday, April 4, 2008

1493       
1494       /*============================================================================*
1495        * Step:          Split AMXUCF00                            A5SFKZBN.BS000U92 *
1496        * Transform:     User Written Code                                           *
1497        * Description:                                                               *
1498        *                                                                            *
1499        * Source Table:  COPY_AMXUCF00 - COPY.COPY_AMXUCF00        A5SFKZBN.BK00035M *
1500        * Target Table:  User Written Code Target - work.W5GGM4F2  A5SFKZBN.BQ000RY3 *
1501        *                                                                            *
1502        * User Written:  Split AMXUCF00                            A5SFKZBN.AF0029Z0 *
1503        *============================================================================*/
1504       
1505       %let SYSLAST = %nrquote(COPY.COPY_AMXUCF00);
1506       
1507       %let transformID = %quote(A5SFKZBN.BS000U92);
1508       
1509       %let trans_rc = 0;
1510       
1511       %let _OUTPUT = %nrquote(work.W5GGM4F2);
1512       
1513       /*---- Start of User Written Code  ----*/
1514       
1515       %CUSTSPLIT(SSCD=AC,CUSTLIB=COPY,CUSTTABLE=AMXUCF00);
MLOGIC(CUSTSPLIT):  Beginning execution.
MLOGIC(CUSTSPLIT):  Parameter SSCD has value AC
MLOGIC(CUSTSPLIT):  Parameter CUSTLIB has value COPY
MLOGIC(CUSTSPLIT):  Parameter CUSTTABLE has value AMXUCF00
MLOGIC(CUSTSPLIT):  %PUT SSCD=&SSCD
SYMBOLGEN:  Macro variable SSCD resolves to AC
SSCD=AC
MLOGIC(CUSTSPLIT):  %PUT CUSTLIB=&CUSTLIB
SYMBOLGEN:  Macro variable CUSTLIB resolves to COPY
CUSTLIB=COPY
MLOGIC(CUSTSPLIT):  %PUT CUSTTABLE=&CUSTTABLE
SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
CUSTTABLE=AMXUCF00
MPRINT(CUSTSPLIT):   proc format;
MPRINT(CUSTSPLIT):   picture pad4_ low-high="9999";
NOTE: Format PAD4_ has been output.
MPRINT(CUSTSPLIT):   run;

NOTE: PROCEDURE FORMAT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
MLOGIC(CUSTSPLIT):  %IF condition &CUSTTABLE=AMXUCF00 is TRUE
MLOGIC(CUSTSPLIT):  %LET (variable name is CUSTTABLE_)
MPRINT(CUSTSPLIT):   data WORK.WRM WORK.WORM;
MPRINT(CUSTSPLIT):   set ADMIN.CUST_LOOKUP1;
MPRINT(CUSTSPLIT):   if SOURCE_SYSTEM_CD ne "RM" & VALID_TO_DTTM='31DEC9999:00:00:00'DT then do;
MPRINT(CUSTSPLIT):   output WORK.WORM;
MPRINT(CUSTSPLIT):   end;
MPRINT(CUSTSPLIT):   else if SOURCE_SYSTEM_CD eq "RM" & VALID_TO_DTTM='31DEC9999:00:00:00'DT then do;
MPRINT(CUSTSPLIT):   output WORK.WRM;
MPRINT(CUSTSPLIT):   end;
MPRINT(CUSTSPLIT):   run;
37                                                         The SAS System                                19:16 Friday, April 4, 2008


NOTE: There were 232567 observations read from the data set ADMIN.CUST_LOOKUP1.
NOTE: The data set WORK.WRM has 9666 observations and 6 variables.
NOTE: The data set WORK.WORM has 222901 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.54 seconds
      cpu time            0.28 seconds
      

SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
MPRINT(CUSTSPLIT):   data WORK.AMXUCF00_WRM (keep=REPL_ID RMID) WORK.AMXUCF00_WORM(drop=RMID);
MPRINT(CUSTSPLIT):   if _N_=1 then do;
MPRINT(CUSTSPLIT):   length RMID $30 REPL_ID $32 AMXUCF00_CF_CTL1 $2 AMXUCF00_CF_CTL2 $3 AMXUCF00_CF_CTL3 $3 AMXUCF00_CF_CTL4 $4 
CS_CONTROL2 $3 CS_CONTROL3 $3 CS_BANK_NO $2 CR_ORG_NBR $2;
MPRINT(CUSTSPLIT):   declare hash WRM(dataset:"WRM");
MPRINT(CUSTSPLIT):   WRM.defineKey("REPL_ID");
MPRINT(CUSTSPLIT):   WRM.defineData("RMID");
MPRINT(CUSTSPLIT):   WRM.defineDone();
MPRINT(CUSTSPLIT):   declare hash WORM(dataset:"WORM");
MPRINT(CUSTSPLIT):   WORM.defineKey("REPL_ID");
MPRINT(CUSTSPLIT):   WORM.defineDone();
MPRINT(CUSTSPLIT):   end;
SYMBOLGEN:  Macro variable CUSTLIB resolves to COPY
SYMBOLGEN:  Macro variable CUSTTABLE_ resolves to AMXUCF00(rename=(AMXUCF00_CF_CUST_NUM=CUST_NBR))
MPRINT(CUSTSPLIT):   set COPY.COPY_AMXUCF00(rename=(AMXUCF00_CF_CUST_NUM=CUST_NBR));
SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
MLOGIC(CUSTSPLIT):  %IF condition &CUSTTABLE=AMXUCF00 is TRUE
MPRINT(CUSTSPLIT):   CUST_CTL1=put(input(AMXUCF00_CF_CTL1,8.),pad4_.);
MPRINT(CUSTSPLIT):   CUST_CTL2=put(input(AMXUCF00_CF_CTL2,8.),pad4_.);
MPRINT(CUSTSPLIT):   CUST_CTL3=put(input(AMXUCF00_CF_CTL3,8.),pad4_.);
MPRINT(CUSTSPLIT):   CUST_CTL4=put(input(AMXUCF00_CF_CTL4,8.),pad4_.);
MPRINT(CUSTSPLIT):   SOURCE_SYSTEM_CD="AC";
MPRINT(CUSTSPLIT):   REPL_ID=compress(CUST_NBR || CUST_CTL1 || CUST_CTL2 || CUST_CTL3 || CUST_CTL4);
SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
MPRINT(CUSTSPLIT):   if WORM.check()=0 & WRM.check() ne 0 then output WORK.AMXUCF00_WORM;
SYMBOLGEN:  Macro variable CUSTTABLE resolves to AMXUCF00
MPRINT(CUSTSPLIT):   else if WRM.find()=0 & WORM.check() ne 0 then output WORK.AMXUCF00_WRM;
MPRINT(CUSTSPLIT):   run;

NOTE: Variable RMID is uninitialized.
NOTE: Variable CS_CONTROL2 is uninitialized.
NOTE: Variable CS_CONTROL3 is uninitialized.
NOTE: Variable CS_BANK_NO is uninitialized.
NOTE: Variable CR_ORG_NBR is uninitialized.
NOTE: There were 9666 observations read from the data set WORK.WRM.
NOTE: There were 222901 observations read from the data set WORK.WORM.
NOTE: There were 142617 observations read from the data set COPY.COPY_AMXUCF00.
NOTE: The data set WORK.AMXUCF00_WRM has 17 observations and 2 variables.
NOTE: The data set WORK.AMXUCF00_WORM has 142600 observations and 59 variables.
NOTE: DATA statement used (Total process time):
      real time           1.70 seconds
      cpu time            1.52 seconds
      

MPRINT(CUSTSPLIT):   proc sql;
MPRINT(CUSTSPLIT):   drop table WORM, WRM;
NOTE: Table WORK.WORM has been dropped.
38                                                         The SAS System                                19:16 Friday, April 4, 2008

NOTE: Table WORK.WRM has been dropped.
MPRINT(CUSTSPLIT):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MLOGIC(CUSTSPLIT):  Ending execution.
1516       %let WORK=%sysfunc(pathname(WORK));
1517       %put WORK=&WORK;
SYMBOLGEN:  Macro variable WORK resolves to /saswork/SAS_work5E110007D094_baslstsp
WORK=/saswork/SAS_work5E110007D094_baslstsp
1518       /*---- End of User Written Code  ----*/
1519       
1520       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1521       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1522       
1523       /*============================================================================*
1524        * Step:          WORM SQL Join                             A5SFKZBN.BS000U9B *
1525        * Transform:     SQL Join (Version 2)                                        *
1526        * Description:                                                               *
1527        *                                                                            *
1528        * Source Tables: Splitter Target 1 - work.AMXUCF00_WORM    A5SFKZBN.BQ000RY4 *
1529        *                COPY_AMXUCE - COPY.COPY_AMXUCE            A5SFKZBN.BK0006Y4 *
1530        *                COPY_AMXURT00 - COPY.COPY_AMXURT00        A5SFKZBN.BK0002BF *
1531        * Target Table:  SQL Target - work.W5GGMGQY                A5SFKZBN.BQ000RYJ *
1532        *============================================================================*/
1533       
1534       %let transformID = %quote(A5SFKZBN.BS000U9B);
1535       
1536       %let trans_rc = 0;
1537       
1538       proc datasets lib = work nolist nowarn memtype = (data view);
1539          delete W5GGMGQY;
1540       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
39                                                         The SAS System                                19:16 Friday, April 4, 2008

      cpu time            0.01 seconds
      

1541       
1542       data _null_;
1543          put "NOTE: The following column(s) do not have a column mapping, so the"
1544               " value(s) will be set to missing: FIRST_NM";
1545       run;

NOTE: The following column(s) do not have a column mapping, so the value(s) will be set to missing: FIRST_NM
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1546       
1547       proc sql;
1548          create table work.W5GGMGQY as
1549             select
1550                "BLG" as ADDRESS_TYPE_CD length = 3
1551                                         label = 'Address Type Code',
1552                AMXUCF00_WORM.AMXUCF00_CF_CNTRY as COUNTRY_CD_TEMP length = 5,
1553                AMXUCF00_WORM.AMXUCF00_CF_CTL3 as AMXUCF00_CF_CTL3 length = 3,
1554                substr(AMXUCF00_WORM.X006AMXUCF00_CF_DATA,1,28) as CITY_NM length = 100
1555                                                                           label = 'City Name',
1556                put(put(AMXUCF00_WORM.REPL_ID,$CUST_LOOKUP2_.),$26.) as COUNTERPARTY_ID length = 26
1557                                                                                        label = 'Counterparty Key',
1558                strip(B.AMXURT00_CF_OFFICER_EMP_CD ) as COUNTERPARTY_RLN_TYPE_CD_TEMP length = 3
1559                                                                                      label = 'Counterparty Relationship Type
1559     ! Code',
1560                case when COPY_AMXUCE.AMXUCF03_CF_USER_CD1 in ('42','60','70','80')
1561                then compress(COPY_AMXUCE.AMXUCF03_CF_USER_CD1  || B.AMXURT00_CF_SMSA_CD)
1562                else COPY_AMXUCE.AMXUCF03_CF_USER_CD1 end as COUNTERPARTY_TYPE_CD_TEMP length = 3
1563                                                                                       label = 'Counterparty Type Code',
1564                "IND" as CUSTOMER_TYPE_CD length = 3
1565                                          label = 'Customer Type Code',
1566                substr(COPY_AMXUCE.AMXUCF03_CF_NAICS_CD ,1,5) as ECONOMIC_SECTOR_CD_TEMP length = 6
1567                                                                                         label = 'Economic Sector Code',
1568                AMXUCF00_WORM.AMXUCF00_CF_PRIM_OFFICER as EMPLOYEE_ID length = 32
1569                                                                      label = 'Employee Key',
1570                "" as FIRST_NM length = 40
1571                               label = 'First Name',
1572                'IND' as IND_CORP_TYPE length = 3,
1573                "01" as IND_EXTENRAL_CUST_TYPE length = 2,
1574                AMXUCF00_WORM.X001AMXUCF00_CF_DATA as LAST_NM length = 40
1575                                                              label = 'Last Name',
1576                AMXUCF00_WORM.X001AMXUCF00_CF_DATA as MIDDLE_INITIALS length = 20
1577                                                                      label = 'Middle Initials',
1578                AMXUCF00_WORM.X001AMXUCF00_CF_DATA as MIDDLE_NM length = 40
1579                                                                label = 'Middle Name',
1580                compress(strip(substr(AMXUCF00_WORM.X006AMXUCF00_CF_DATA,31,10))) as POSTAL_CD_TEMP length = 11
1581                                                                                                    label = 'Postal Code',
1582                datetime() as PROCESSED_DTTM length = 8
1583                                             format = NLDATM21.
1584                                             informat = NLDATM21.
1585                                             label = 'Processed Datetime',
1586       
1587                case when COPY_AMXUCE.AMXUCF03_CF_USER_CD1 in('42','60','70','80')
40                                                         The SAS System                                19:16 Friday, April 4, 2008

1588                then compress(strip(COPY_AMXUCE.AMXUCF03_CF_USER_CD1) || strip(B.AMXURT00_CF_SMSA_CD))
1589                else strip(COPY_AMXUCE.AMXUCF03_CF_USER_CD1) end
1590                 as REGLTRY_COUNTERPARTY_TYPE_CD_TEM length = 11
1591                                                     label = 'Basel Portfolio Code',
1592                AMXUCF00_WORM.REPL_ID as REPL_ID length = 32,
1593                "AC" as SOURCE_SYSTEM_CD length = 3,
1594                compress(strip(substr(AMXUCF00_WORM.X006AMXUCF00_CF_DATA,29,2))) as STATE_REGION_CD_TEMP length = 4
1595                                                                                                         label = 'State Region
1595     ! Code',
1596                put(AMXUCF00_WORM.AMXUCF00_CF_TAX_ID_NAME,$32.) as TAX_ID length = 32
1597                                                                          label = 'Tax Id',
1598                "TIN" as TAX_ID_TYPE_CD length = 3
1599                                        label = 'Tax Id Type Code',
1600                "TIN" as TAX_STATUS_CD length = 3
1601                                       label = 'Tax Status Code',
1602       
1603                case when compress(B.AMXURT00_CF_SMSA_CD) ="1000" then 3000000
1604                when compress(B.AMXURT00_CF_SMSA_CD) ="2000" then 15000000
1605                when compress(B.AMXURT00_CF_SMSA_CD) ="3000" then 100000000
1606                when compress(B.AMXURT00_CF_SMSA_CD) ="4000" then 101000000 else 0 end
1607                 as TOTAL_ASSET_AMT length = 8
1608                                    format = NLNUM18.5
1609                                    informat = NLNUM18.5
1610                                    label = 'Total Asset Amount',
1611                AMXUCF00_WORM.X001AMXUCF00_CF_LINE_TYPE as X001AMXUCF00_CF_LINE_TYPE length = 1,
1612                AMXUCF00_WORM.X002AMXUCF00_CF_LINE_TYPE as X002AMXUCF00_CF_LINE_TYPE length = 1,
1613                AMXUCF00_WORM.X003AMXUCF00_CF_LINE_TYPE as X003AMXUCF00_CF_LINE_TYPE length = 1,
1614                AMXUCF00_WORM.X004AMXUCF00_CF_LINE_TYPE as X004AMXUCF00_CF_LINE_TYPE length = 1,
1615                AMXUCF00_WORM.X005AMXUCF00_CF_LINE_TYPE as X005AMXUCF00_CF_LINE_TYPE length = 1,
1616                AMXUCF00_WORM.X006AMXUCF00_CF_LINE_TYPE as X006AMXUCF00_CF_LINE_TYPE length = 1,
1617                AMXUCF00_WORM.X001AMXUCF00_CF_DATA as X001AMXUCF00_CF_DATA length = 40,
1618                AMXUCF00_WORM.X002AMXUCF00_CF_DATA as X002AMXUCF00_CF_DATA length = 40,
1619                AMXUCF00_WORM.X003AMXUCF00_CF_DATA as X003AMXUCF00_CF_DATA length = 40,
1620                AMXUCF00_WORM.X004AMXUCF00_CF_DATA as X004AMXUCF00_CF_DATA length = 40,
1621                AMXUCF00_WORM.X005AMXUCF00_CF_DATA as X005AMXUCF00_CF_DATA length = 40,
1622                AMXUCF00_WORM.X006AMXUCF00_CF_DATA as X006AMXUCF00_CF_DATA length = 40
1623             from
1624                work.AMXUCF00_WORM left join
1625                COPY.COPY_AMXURT00 as B
1626                   on
1627                   (
1628                      AMXUCF00_WORM.AMXUCF00_CF_CTL1 eq B.AMXURT00_CF_CTL1
1629                      and AMXUCF00_WORM.AMXUCF00_CF_CTL2 eq B.AMXURT00_CF_CTL2
1630                      and AMXUCF00_WORM.AMXUCF00_CF_CTL3 eq B.AMXURT00_CF_CTL3
1631                      and AMXUCF00_WORM.AMXUCF00_CF_CTL4 eq B.AMXURT00_CF_CTL4
1632                      and AMXUCF00_WORM.CUST_NBR eq B.AMXURT00_CF_CUST_NUM
1633                   ) left join
1634                COPY.COPY_AMXUCE
1635                   on
1636                   (
1637                      AMXUCF00_WORM.AMXUCF00_CF_CTL1 eq COPY_AMXUCE.AMXUCF03_CF_CTL1
1638                      and AMXUCF00_WORM.AMXUCF00_CF_CTL2 eq COPY_AMXUCE.AMXUCF03_CF_CTL2
1639                      and AMXUCF00_WORM.AMXUCF00_CF_CTL3 eq COPY_AMXUCE.AMXUCF03_CF_CTL3
1640                      and AMXUCF00_WORM.AMXUCF00_CF_CTL4 eq COPY_AMXUCE.AMXUCF03_CF_CTL4
1641                      and AMXUCF00_WORM.CUST_NBR eq COPY_AMXUCE.AMXUCF03_CF_CUST_NUM
1642                   )
1643             where
1644                AMXUCF00_WORM.X001AMXUCF00_CF_LINE_TYPE eq "1"
41                                                         The SAS System                                19:16 Friday, April 4, 2008

1645                or AMXUCF00_WORM.X002AMXUCF00_CF_LINE_TYPE eq "2"
1646                and AMXUCF00_WORM.AMXUCF00_CF_PERS_CMCL_CD in ("P"," ")
1647             ;
NOTE: Table WORK.W5GGMGQY created, with 142509 rows and 38 columns.

1648       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           3.94 seconds
      cpu time            3.36 seconds
      

1649       
1650       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1651       
1652       %macro etls_completeTarget();
1653          /*---- Create the integrity constraints for a table  ----*/
1654          %put %str(NOTE: Creating integrity constraints ...);
1655          proc datasets library=work nolist;
1656             modify W5GGMGQY;
1657                ic create not null (PROCESSED_DTTM);
1658          quit;
1659       
1660          %rcSet(&syserr);
1661       
1662       %mend etls_completeTarget;
1663       %etls_completeTarget;
MLOGIC(ETLS_COMPLETETARGET):  Beginning execution.
MLOGIC(ETLS_COMPLETETARGET):  %PUT NOTE: Creating integrity constraints ...
NOTE: Creating integrity constraints ...
MPRINT(ETLS_COMPLETETARGET):   proc datasets library=work nolist;
MPRINT(ETLS_COMPLETETARGET):   modify W5GGMGQY;
MPRINT(ETLS_COMPLETETARGET):   ic create not null (PROCESSED_DTTM);
NOTE: Integrity constraint _NM0001_ defined.
MPRINT(ETLS_COMPLETETARGET):   quit;

NOTE: MODIFY was successful for WORK.W5GGMGQY.DATA.
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.09 seconds
      cpu time            0.08 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
42                                                         The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_COMPLETETARGET):  ;
MLOGIC(ETLS_COMPLETETARGET):  Ending execution.
1664       
1665       /*============================================================================*
1666        * Step:          WORM User Written Code                    A5SFKZBN.BS000U9O *
1667        * Transform:     User Written Code                                           *
1668        * Description:                                                               *
1669        *                                                                            *
1670        * Source Table:  SQL Target - work.W5GGMGQY                A5SFKZBN.BQ000RYJ *
1671        * Target Table:  User Written Code Target - work.W5JBKAKP  A5SFKZBN.BQ000RYQ *
1672        *                                                                            *
1673        * User Written:  WORM User Written                         A5SFKZBN.AF002A25 *
1674        *============================================================================*/
1675       
1676       %let SYSLAST = %nrquote(work.W5GGMGQY);
1677       
1678       %let transformID = %quote(A5SFKZBN.BS000U9O);
1679       
1680       %let trans_rc = 0;
1681       
1682       %let _OUTPUT = %nrquote(work.W5JBKAKP);
1683       
1684       /*---- Start of User Written Code  ----*/
1685       
SYMBOLGEN:  Macro variable _OUTPUT resolves to work.W5JBKAKP
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
1686       data &_OUTPUT;
1687       	
SYMBOLGEN:  Macro variable SYSLAST resolves to WORK.W5GGMGQY                        
1687     !  set &SYSLAST;
1688       	length TAG1 $8. TAG2 $8. TAG3 $8. TAG4 $8. ADDRESS_LINE_1_TXT $100.
1689       		ADDRESS_LINE_2_TXT $100. ADDRESS_LINE_3_TXT $100. ADDRESS_LINE_4_TXT $100.;
1690       
1691       	/*TAG1*/
1692       	if X001AMXUCF00_CF_LINE_TYPE eq '2' then TAG1 = 'x1';
1693       	else if X002AMXUCF00_CF_LINE_TYPE eq '2' then TAG1 = 'x2';
1694       		 else if X003AMXUCF00_CF_LINE_TYPE eq '2' then TAG1 = 'x3';
1695       		 	  else if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG1 = 'x4';
1696       			  	   else if X005AMXUCF00_CF_LINE_TYPE eq '2' then  TAG1 = 'x5';
1697       						else if X006AMXUCF00_CF_LINE_TYPE eq '2' then  TAG1 = 'x6';
1698       							 else TAG1 = ' ';
1699       	/*TAG2*/
1700       	if TAG1 eq 'x1' then
1701       	do;
1702       	if X002AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x2';
1703       	else if X003AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x3';
1704       		 else if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x4';
1705       			  else if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x5';
1706       				   else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x6';
1707       						else TAG2 = ' ';
1708       	end;
1709       	else if TAG1 eq 'x2' then
1710       	do;
1711       	if L3 eq '2' then TAG2 = 'x3';
1712       	else if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x4';
43                                                         The SAS System                                19:16 Friday, April 4, 2008

1713       		 else if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x5';
1714       			  else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x6';
1715       				   else TAG2 = ' ';	
1716       	end;
1717       	else if TAG1 eq 'x3' then
1718       	do;
1719       	if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x4';
1720       	else if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x5';
1721       		 else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x6';
1722       			  else TAG2 = ' ';	
1723       	end;
1724       	else if TAG1 eq 'x4' then
1725       	do;
1726       	if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x5';
1727       	else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x6';
1728       		 else TAG2 = ' ';	
1729       	end;
1730       	else if TAG1 eq 'x5' then
1731       	do;
1732       	if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG2 = 'x6';
1733       		 else TAG2 = ' ';	
1734       	end;
1735       	else if TAG1 eq 'x6' then TAG2 = ' ';
1736       	else TAG2 = ' ';
1737       
1738       	/*TAG3*/
1739       	if TAG2 eq 'x2' then
1740       	do;
1741       	if X003AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x3';
1742       	else if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x4';
1743       		 else if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x5';
1744       			  else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1745       				   else TAG3 = ' ';	
1746       	end;
1747       	else if TAG2 eq 'x3' then
1748       	do;
1749       	if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x4';
1750       	else if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x5';
1751       		 else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1752       			  else TAG3 = ' ';	
1753       	end;
1754       	else if TAG2 eq 'x4' then
1755       	do;
1756       	if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x5';
1757       	else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1758       		 else TAG3 = ' ';	
1759       	end;
1760       	else if TAG2 eq 'x5' then
1761       	do;
1762       	if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1763       		 else TAG3 = ' ';
1764       	end;
1765       	else if TAG2 eq 'x6' then TAG3 = ' ';
1766       	else TAG3 = ' ';
1767       
1768       	/*TAG4*/
1769       	if TAG3 eq 'x3' then
1770       	do;
44                                                         The SAS System                                19:16 Friday, April 4, 2008

1771       	if X004AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x4';
1772       	else if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x5';
1773       		 else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1774       			  else TAG3 = ' ';	
1775       	end;
1776       	else if TAG3 eq 'x4' then
1777       	do;
1778       	if X005AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x5';
1779       	else if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1780       		 else TAG3 = ' ';	
1781       	end;
1782       	else if TAG3 eq 'x5' then
1783       	do;
1784       	if X006AMXUCF00_CF_LINE_TYPE eq '2' then TAG3 = 'x6';
1785       		 else TAG3 = ' ';	
1786       	end;
1787       	else if TAG3 eq 'x6' then TAG3 = ' ';
1788       	else TAG3 = ' ';
1789       
1790       
1791       	/*ADDRESS_LINE_1_TXT*/
1792       	if TAG1 eq 'x1' then ADDRESS_LINE_1_TXT = X001AMXUCF00_CF_DATA;
1793       	else if TAG1 eq 'x2' then ADDRESS_LINE_1_TXT = X002AMXUCF00_CF_DATA;
1794       		 else if TAG1 eq 'x3' then ADDRESS_LINE_1_TXT = X003AMXUCF00_CF_DATA;
1795       		      else if TAG1 eq 'x4' then ADDRESS_LINE_1_TXT = X004AMXUCF00_CF_DATA;
1796       			       else if TAG1 eq 'x5' then ADDRESS_LINE_1_TXT = X005AMXUCF00_CF_DATA;
1797       				        else if TAG1 eq 'x6' then ADDRESS_LINE1_TXT = X006AMXUCF00_CF_DATA;
1798       							 else ADDRESS_LINE_1_TXT = ' ';
1799       
1800       	/*ADDRESS_LINE_2_TXT*/
1801       	if TAG2 eq 'x2' then ADDRESS_LINE_2_TXT = X002AMXUCF00_CF_DATA;
1802       	else if TAG2 eq 'x3' then ADDRESS_LINE_2_TXT = X003AMXUCF00_CF_DATA;
1803       		 else if TAG2 eq 'x4' then ADDRESS_LINE_2_TXT = X004AMXUCF00_CF_DATA;
1804       			  else if TAG2 eq 'x5' then ADDRESS_LINE_2_TXT = X005AMXUCF00_CF_DATA;
1805       			  	   else if TAG2 eq 'x6' then ADDRESS_LINE_2_TXT = X006AMXUCF00_CF_DATA;
1806       				   		else ADDRESS_LINE_2_TXT = ' ';
1807       
1808       	/*ADDRESS_LINE_3_TXT*/
1809       	if TAG3 eq 'x3' then ADDRESS_LINE_3_TXT = X003AMXUCF00_CF_DATA;
1810       	else if TAG3 eq 'x4' then ADDRESS_LINE_3_TXT = X004AMXUCF00_CF_DATA;
1811       		  else if TAG3 eq 'x5' then ADDRESS_LINE_3_TXT = X005AMXUCF00_CF_DATA;
1812       		  	   else if TAG3 eq 'x6' then ADDRESS_LINE_3_TXT = X006AMXUCF00_CF_DATA;
1813       	          		else ADDRESS_LINE_3_TXT = ' ';
1814       
1815       	/*ADDRESS_LINE_4_TXT*/
1816       	if TAG4 eq 'x4' then ADDRESS_LINE_4_TXT = X004AMXUCF00_CF_DATA;
1817       		else if TAG4 eq 'x5' then ADDRESS_LINE_4_TXT = X005AMXUCF00_CF_DATA;
1818       			 else if TAG4 eq 'x6' then ADDRESS_LINE_4_TXT = X006AMXUCF00_CF_DATA;
1819       			  	  else ADDRESS_LINE_4_TXT = ' ';
1820       
1821       	/*FIRST_NM*/
1822       	if X001AMXUCF00_CF_LINE_TYPE eq '1' then FIRST_NM = X001AMXUCF00_CF_DATA;
1823       	else if X002AMXUCF00_CF_LINE_TYPE eq '1' then FIRST_NM = X002AMXUCF00_CF_DATA;
1824       		  else if X003AMXUCF00_CF_LINE_TYPE eq '1' then FIRST_NM = X003AMXUCF00_CF_DATA;
1825       				 else if X004AMXUCF00_CF_LINE_TYPE eq '1' then FIRST_NM = X004AMXUCF00_CF_DATA;
1826       						else if X005AMXUCF00_CF_LINE_TYPE eq '1' then FIRST_NM = X005AMXUCF00_CF_DATA;
1827       							  else if X006AMXUCF00_CF_LINE_TYPE eq '1' then FIRST_NM = X006AMXUCF00_CF_DATA;
1828       									 else FIRST_NM = ' ';
45                                                         The SAS System                                19:16 Friday, April 4, 2008

1829       
1830       
1831       run;

NOTE: Variable TAG4 is uninitialized.
NOTE: Variable L3 is uninitialized.
NOTE: There were 142509 observations read from the data set WORK.W5GGMGQY.
NOTE: The data set WORK.W5JBKAKP has 142509 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           1.29 seconds
      cpu time            1.01 seconds
      

1832       /*---- End of User Written Code  ----*/
1833       
1834       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1835       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1836       
1837       /*============================================================================*
1838        * Step:          WORM Lookup                               A5SFKZBN.BS000U9C *
1839        * Transform:     Lookup                                                      *
1840        * Description:                                                               *
1841        *                                                                            *
1842        * Source Tables: STG_REF_COUNTERPARTY_TYPE_CD -            A5SFKZBN.BK0007QH *
1843        *                 STAGING.STG_REF_COUNTERPARTY_TYPE_CD                       *
1844        *                STG_REF_COUNTRY_CD -                      A5SFKZBN.BK00071C *
1845        *                 STAGING.STG_REF_COUNTRY_CD                                 *
1846        *                STG_REF_CURRENCY_CD -                     A5SFKZBN.BK00071G *
1847        *                 STAGING.STG_REF_CURRENCY_CD                                *
1848        *                STG_REF_DOSRI_CD -                        A5SFKZBN.BK00071I *
1849        *                 STAGING.STG_REF_DOSRI_CD                                   *
1850        *                STG_REF_REGULATORY_CNTRPRTY_CD -          A5SFKZBN.BK00071V *
1851        *                 STAGING.STG_REF_REGULATORY_CNTRPRTY_CD                     *
1852        *                STG_REF_STATE_CD -                        A5SFKZBN.BK00071T *
1853        *                 STAGING.STG_REF_STATE_CD                                   *
1854        *                STG_REF_POSTAL_CD -                       A5SFKZBN.BK0007QG *
1855        *                 STAGING.STG_REF_POSTAL_CD                                  *
1856        *                STG_REF_INDUSTRY_TYPE_CD -                A5SFKZBN.BK00071J *
46                                                         The SAS System                                19:16 Friday, April 4, 2008

1857        *                 STAGING.STG_REF_INDUSTRY_TYPE_CD                           *
1858        *                User Written Code Target - work.W5JBKAKP  A5SFKZBN.BQ000RYQ *
1859        * Target Table:  Lookup Target - work.W5GWOI7C             A5SFKZBN.BQ000RYH *
1860        *============================================================================*/
1861       
1862       /* Access the data for STAGING  */
1863       LIBNAME STAGING BASE "/sasdata/STAGING" ;
NOTE: Libref STAGING was successfully assigned as follows: 
      Engine:        BASE 
      Physical Name: /sasdata/STAGING
1864       %rcSet(&syslibrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSLIBRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
1865       
1866       %let transformID = %quote(A5SFKZBN.BS000U9C);
1867       
1868       %let trans_rc = 0;
1869       
1870       /* make the runTime macro variable to store the run time of the job  */
1871       %let runTime = %sysfunc(datetime(), );
1872       
1873       proc datasets lib = work nolist nowarn memtype = (data view);
1874          delete W5GWOI7C;
1875       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1876       
1877       proc datasets lib = work nolist nowarn memtype = (data view);
1878          delete etls_temp_lookupview0;
1879       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1880       
1881       proc sql;
1881     !           create view etls_temp_lookupview0 as
1882          select * from STAGING.STG_REF_REGULATORY_CNTRPRTY_CD
1883          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW0 has been defined.
1884       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
47                                                         The SAS System                                19:16 Friday, April 4, 2008

      

1885       /* Creating view to eliminate column name collisions for lookup table  */
1886       /*  STAGING.STG_REF_CURRENCY_CD                                        */
1887       proc datasets lib = work nolist nowarn memtype = (data view);
1888          delete etls_temp_lookupview1;
1889       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1890       
1891       proc sql;
1891     !           create view etls_temp_lookupview1 as
1892          select
1893             STANDARD_CODE as ETLS_W5JCO6J4,
1894             STANDARD_CODE as ETLS_W5JCO6JE,
1895             SOURCE,
1896             SOURCE_CODE
1897          from STAGING.STG_REF_CURRENCY_CD
1898          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW1 has been defined.
1899       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1900       /* Creating view to eliminate column name collisions for lookup table  */
1901       /*  STAGING.STG_REF_DOSRI_CD                                           */
1902       proc datasets lib = work nolist nowarn memtype = (data view);
1903          delete etls_temp_lookupview2;
1904       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1905       
1906       proc sql;
1906     !           create view etls_temp_lookupview2 as
1907          select
1908             STANDARD_CODE as ETLS_W5JCO6O4,
1909             SOURCE,
1910             SOURCE_CODE
1911          from STAGING.STG_REF_DOSRI_CD
1912          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW2 has been defined.
1913       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1914       /* Creating view to eliminate column name collisions for lookup table  */
48                                                         The SAS System                                19:16 Friday, April 4, 2008

1915       /*  STAGING.STG_REF_COUNTERPARTY_TYPE_CD                               */
1916       proc datasets lib = work nolist nowarn memtype = (data view);
1917          delete etls_temp_lookupview3;
1918       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1919       
1920       proc sql;
1920     !           create view etls_temp_lookupview3 as
1921          select
1922             STANDARD_CODE as ETLS_W5JCO6QC,
1923             SOURCE,
1924             SOURCE_CODE
1925          from STAGING.STG_REF_COUNTERPARTY_TYPE_CD
1926          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW3 has been defined.
1927       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

1928       /* Creating view to eliminate column name collisions for lookup table  */
1929       /*  STAGING.STG_REF_INDUSTRY_TYPE_CD                                   */
1930       proc datasets lib = work nolist nowarn memtype = (data view);
1931          delete etls_temp_lookupview4;
1932       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1933       
1934       proc sql;
1934     !           create view etls_temp_lookupview4 as
1935          select
1936             STANDARD_CODE as ETLS_W5JCO6SA,
1937             SOURCE,
1938             SOURCE_CODE
1939          from STAGING.STG_REF_INDUSTRY_TYPE_CD
1940          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW4 has been defined.
1941       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1942       /* Creating view to eliminate column name collisions for lookup table  */
1943       /*  STAGING.STG_REF_POSTAL_CD                                          */
1944       proc datasets lib = work nolist nowarn memtype = (data view);
1945          delete etls_temp_lookupview5;
1946       quit;
49                                                         The SAS System                                19:16 Friday, April 4, 2008


NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1947       
1948       proc sql;
1948     !           create view etls_temp_lookupview5 as
1949          select
1950             STANDARD_CODE as ETLS_W5JCO6TY,
1951             SOURCE,
1952             SOURCE_CODE
1953          from STAGING.STG_REF_POSTAL_CD
1954          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW5 has been defined.
1955       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1956       /* Creating view to eliminate column name collisions for lookup table  */
1957       /*  STAGING.STG_REF_STATE_CD                                           */
1958       proc datasets lib = work nolist nowarn memtype = (data view);
1959          delete etls_temp_lookupview6;
1960       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1961       
1962       proc sql;
1962     !           create view etls_temp_lookupview6 as
1963          select
1964             STANDARD_CODE as ETLS_W5JCO6VC,
1965             SOURCE,
1966             SOURCE_CODE
1967          from STAGING.STG_REF_STATE_CD
1968          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW6 has been defined.
1969       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1970       /* Creating view to eliminate column name collisions for lookup table  */
1971       /*  STAGING.STG_REF_COUNTRY_CD                                         */
1972       proc datasets lib = work nolist nowarn memtype = (data view);
1973          delete etls_temp_lookupview7;
1974       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
50                                                         The SAS System                                19:16 Friday, April 4, 2008

      

1975       
1976       proc sql;
1976     !           create view etls_temp_lookupview7 as
1977          select
1978             STANDARD_CODE as ETLS_W5JCO6WG,
1979             STANDARD_CODE as ETLS_W5JCO6WQ,
1980             STANDARD_CODE as ETLS_W5JCO6X0,
1981             SOURCE,
1982             SOURCE_CODE
1983          from STAGING.STG_REF_COUNTRY_CD
1984          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW7 has been defined.
1985       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1986       /*---- Begin DATA step to perform lookups  ----*/
1987       DATA  work.W5GWOI7C
1988                (keep = ADDRESS_LINE_1_TXT ADDRESS_LINE_2_TXT ADDRESS_LINE_3_TXT
1989                        ADDRESS_LINE_4_TXT ADDRESS_TYPE_CD ASSOCIATE_COUNTERPARTY_ID
1990                        CITY_NM COUNTERPARTY_ID COUNTERPARTY_RLN_TYPE_CD
1991                        COUNTERPARTY_TYPE_CD COUNTRY_CD COUNTRY_CD_TEMP
1992                        COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP
1993                        REGLTRY_COUNTERPARTY_TYPE_CD_TEM COUNTRY_OF_RESIDENCY_CD
1994                        COUNTRY_OF_RESIDENCY_CD_TEMP CURRENCY_CD CUSTOMER_TYPE_CD
1995                        DOMESTIC_CURRENCY_CD ECONOMIC_SECTOR_CD ECONOMIC_SECTOR_CD_TEMP
1996                        EMPLOYEE_ID FIRST_NM IND_CORP_TYPE IND_EXTENRAL_CUST_TYPE
1997                        LAST_NM MIDDLE_INITIALS MIDDLE_NM POSTAL_CD POSTAL_CD_TEMP
1998                        PROCESSED_DTTM REGLTRY_COUNTERPARTY_TYPE_CD REPL_ID
1999                        SOURCE_SYSTEM_CD STATE_REGION_CD STATE_REGION_CD_TEMP TAX_ID
2000                        TAX_ID_TYPE_CD TAX_STATUS_CD TOTAL_ASSET_AMT)
2001             ;
2002       
2003          attrib ADDRESS_LINE_1_TXT length=$100 label="Address Line 1 Text"
2004                 ADDRESS_LINE_2_TXT length=$100 label="Address Line 2 Text"
2005                 ADDRESS_LINE_3_TXT length=$100 label="Address Line 3 Text"
2006                 ADDRESS_LINE_4_TXT length=$100 label="Address Line 4 Text"
2007                 ADDRESS_TYPE_CD length=$3 label="Address Type Code"
2008                 ASSOCIATE_COUNTERPARTY_ID length=$32
2009                 CITY_NM length=$100 label="City Name"
2010                 COUNTERPARTY_ID length=$26 label="Counterparty Key"
2011                 COUNTERPARTY_RLN_TYPE_CD length=$3 label="Counterparty Relationship Type Code"
2012                 COUNTERPARTY_TYPE_CD length=$3 label="Counterparty Type Code"
2013                 COUNTRY_CD length=$3 label="Country Code"
2014                 COUNTRY_CD_TEMP length=$5
2015                 COUNTERPARTY_RLN_TYPE_CD_TEMP length=$3 label="Counterparty Relationship Type Code"
2016                 COUNTERPARTY_TYPE_CD_TEMP length=$3 label="Counterparty Type Code"
2017                 REGLTRY_COUNTERPARTY_TYPE_CD_TEM length=$11 label="Basel Portfolio Code"
2018                 COUNTRY_OF_RESIDENCY_CD length=$3 label="Country Of Residency Code"
2019                 COUNTRY_OF_RESIDENCY_CD_TEMP length=$5
2020                 CURRENCY_CD length=$3 label="Currency Code"
2021                 CUSTOMER_TYPE_CD length=$3 label="Customer Type Code"
2022                 DOMESTIC_CURRENCY_CD length=$3 label="Currency Code"
2023                 ECONOMIC_SECTOR_CD length=$3 label="Economic Sector Code"
51                                                         The SAS System                                19:16 Friday, April 4, 2008

2024                 ECONOMIC_SECTOR_CD_TEMP length=$6 label="Economic Sector Code"
2025                 EMPLOYEE_ID length=$32 label="Employee Key"
2026                 FIRST_NM length=$40 label="First Name"
2027                 IND_CORP_TYPE length=$3
2028                 IND_EXTENRAL_CUST_TYPE length=$2
2029                 LAST_NM length=$40 label="Last Name"
2030                 MIDDLE_INITIALS length=$20 label="Middle Initials"
2031                 MIDDLE_NM length=$40 label="Middle Name"
2032                 POSTAL_CD length=$20 label="Postal Code"
2033                 POSTAL_CD_TEMP length=$11 label="Postal Code"
2034                 PROCESSED_DTTM length=8 format=NLDATM21. label="Processed Datetime"
2035                 REGLTRY_COUNTERPARTY_TYPE_CD length=$3 label="Basel Portfolio Code"
2036                 REPL_ID length=$32
2037                 SOURCE_SYSTEM_CD length=$3
2038                 STATE_REGION_CD length=$4 label="State Region Code"
2039                 STATE_REGION_CD_TEMP length=$4 label="State Region Code"
2040                 TAX_ID length=$32 label="Tax Id"
2041                 TAX_ID_TYPE_CD length=$3 label="Tax Id Type Code"
2042                 TAX_STATUS_CD length=$3 label="Tax Status Code"
2043                 TOTAL_ASSET_AMT length=8 format=NLNUM18.5 label="Total Asset Amount"
2044                 STANDARD_CODE length= $3
2045                 SOURCE length= $3
2046                 SOURCE_CODE length= $11
2047                 ETLS_W5JCO6J4 length= $3
2048                 ETLS_W5JCO6JE length= $3
2049                 ETLS_W5JCO6O4 length= $3
2050                 ETLS_W5JCO6QC length= $3
2051                 ETLS_W5JCO6SA length= $3
2052                 ETLS_W5JCO6TY length= $3
2053                 ETLS_W5JCO6VC length= $3
2054                 ETLS_W5JCO6WG length= $3
2055                 ETLS_W5JCO6WQ length= $3
2056                 ETLS_W5JCO6X0 length= $3
2057                 ;
2058       
2059          retain missing0-missing7 0;
2060       
2061          /* Build hash objects from lookup tables before reading first source row  */
2062          if (_n_ = 1) then
2063          do;
2064             /* Build hash h0 from lookup table etls_temp_lookupview0 */
2065             nlobs = .;
2066             dsid = open("etls_temp_lookupview0");
2067             if (dsid > 0) then
2068             do;
2069                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2070                   nlobs = attrn(dsid, 'NLOBS');
2071                else
2072                   nlobs = -1;
2073       
2074                dsid = close(dsid);
2075                if (nlobs ^= 0) then
2076                do;
2077                   if (nlobs > 0) then
2078                      exponent = ceil(log2(nlobs));
2079                   else
2080                      exponent = 8;
2081                   declare hash h0(dataset: "etls_temp_lookupview0", hashexp: exponent);
52                                                         The SAS System                                19:16 Friday, April 4, 2008

2082                   h0.defineKey( "SOURCE",
2083                                  "SOURCE_CODE");
2084                   h0.defineData( "STANDARD_CODE");
2085                   h0.defineDone();
2086                   if (nlobs = -1) then
2087                   do;
2088                      if (h0.Num_Items < 1) then
2089                      do;
2090                         put "NOTE: Lookup table is empty: etls_temp_lookupview0";
2091                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2092                              " etls_temp_lookupview0";
2093       
2094                         abort 3;
2095                      end;
2096                   end;
2097                end;
2098                else
2099                do;
2100                   put "NOTE: Lookup table is empty: etls_temp_lookupview0";
2101                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2102                        " etls_temp_lookupview0";
2103       
2104                   abort 3;
2105                end;
2106             end;
2107             else
2108             do;
2109                put "NOTE: Lookup table does not exist or cannot be opened:"
2110                     " etls_temp_lookupview0";
2111       
2112                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2113                     " etls_temp_lookupview0";
2114       
2115                abort 3;
2116             end;
2117       
2118             /* Build hash h1 from lookup table etls_temp_lookupview1 */
2119             nlobs = .;
2120             dsid = open("etls_temp_lookupview1");
2121             if (dsid > 0) then
2122             do;
2123                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2124                   nlobs = attrn(dsid, 'NLOBS');
2125                else
2126                   nlobs = -1;
2127       
2128                dsid = close(dsid);
2129                if (nlobs ^= 0) then
2130                do;
2131                   if (nlobs > 0) then
2132                      exponent = ceil(log2(nlobs));
2133                   else
2134                      exponent = 8;
2135                   declare hash h1(dataset: "etls_temp_lookupview1", hashexp: exponent);
2136                   h1.defineKey( "SOURCE",
2137                                  "SOURCE_CODE");
2138                   h1.defineData( "ETLS_W5JCO6J4",
2139                                  "ETLS_W5JCO6JE");
53                                                         The SAS System                                19:16 Friday, April 4, 2008

2140                   h1.defineDone();
2141                   if (nlobs = -1) then
2142                   do;
2143                      if (h1.Num_Items < 1) then
2144                      do;
2145                         put "NOTE: Lookup table is empty: etls_temp_lookupview1";
2146                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2147                              " etls_temp_lookupview1";
2148       
2149                         abort 3;
2150                      end;
2151                   end;
2152                end;
2153                else
2154                do;
2155                   put "NOTE: Lookup table is empty: etls_temp_lookupview1";
2156                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2157                        " etls_temp_lookupview1";
2158       
2159                   abort 3;
2160                end;
2161             end;
2162             else
2163             do;
2164                put "NOTE: Lookup table does not exist or cannot be opened:"
2165                     " etls_temp_lookupview1";
2166       
2167                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2168                     " etls_temp_lookupview1";
2169       
2170                abort 3;
2171             end;
2172       
2173             /* Build hash h2 from lookup table etls_temp_lookupview2 */
2174             nlobs = .;
2175             dsid = open("etls_temp_lookupview2");
2176             if (dsid > 0) then
2177             do;
2178                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2179                   nlobs = attrn(dsid, 'NLOBS');
2180                else
2181                   nlobs = -1;
2182       
2183                dsid = close(dsid);
2184                if (nlobs ^= 0) then
2185                do;
2186                   if (nlobs > 0) then
2187                      exponent = ceil(log2(nlobs));
2188                   else
2189                      exponent = 8;
2190                   declare hash h2(dataset: "etls_temp_lookupview2", hashexp: exponent);
2191                   h2.defineKey( "SOURCE",
2192                                  "SOURCE_CODE");
2193                   h2.defineData( "ETLS_W5JCO6O4");
2194                   h2.defineDone();
2195                   if (nlobs = -1) then
2196                   do;
2197                      if (h2.Num_Items < 1) then
54                                                         The SAS System                                19:16 Friday, April 4, 2008

2198                      do;
2199                         put "NOTE: Lookup table is empty: etls_temp_lookupview2";
2200                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2201                              " etls_temp_lookupview2";
2202       
2203                         abort 3;
2204                      end;
2205                   end;
2206                end;
2207                else
2208                do;
2209                   put "NOTE: Lookup table is empty: etls_temp_lookupview2";
2210                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2211                        " etls_temp_lookupview2";
2212       
2213                   abort 3;
2214                end;
2215             end;
2216             else
2217             do;
2218                put "NOTE: Lookup table does not exist or cannot be opened:"
2219                     " etls_temp_lookupview2";
2220       
2221                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2222                     " etls_temp_lookupview2";
2223       
2224                abort 3;
2225             end;
2226       
2227             /* Build hash h3 from lookup table etls_temp_lookupview3 */
2228             nlobs = .;
2229             dsid = open("etls_temp_lookupview3");
2230             if (dsid > 0) then
2231             do;
2232                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2233                   nlobs = attrn(dsid, 'NLOBS');
2234                else
2235                   nlobs = -1;
2236       
2237                dsid = close(dsid);
2238                if (nlobs ^= 0) then
2239                do;
2240                   if (nlobs > 0) then
2241                      exponent = ceil(log2(nlobs));
2242                   else
2243                      exponent = 8;
2244                   declare hash h3(dataset: "etls_temp_lookupview3", hashexp: exponent);
2245                   h3.defineKey( "SOURCE",
2246                                  "SOURCE_CODE");
2247                   h3.defineData( "ETLS_W5JCO6QC");
2248                   h3.defineDone();
2249                   if (nlobs = -1) then
2250                   do;
2251                      if (h3.Num_Items < 1) then
2252                      do;
2253                         put "NOTE: Lookup table is empty: etls_temp_lookupview3";
2254                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2255                              " etls_temp_lookupview3";
55                                                         The SAS System                                19:16 Friday, April 4, 2008

2256       
2257                         abort 3;
2258                      end;
2259                   end;
2260                end;
2261                else
2262                do;
2263                   put "NOTE: Lookup table is empty: etls_temp_lookupview3";
2264                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2265                        " etls_temp_lookupview3";
2266       
2267                   abort 3;
2268                end;
2269             end;
2270             else
2271             do;
2272                put "NOTE: Lookup table does not exist or cannot be opened:"
2273                     " etls_temp_lookupview3";
2274       
2275                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2276                     " etls_temp_lookupview3";
2277       
2278                abort 3;
2279             end;
2280       
2281             /* Build hash h4 from lookup table etls_temp_lookupview4 */
2282             nlobs = .;
2283             dsid = open("etls_temp_lookupview4");
2284             if (dsid > 0) then
2285             do;
2286                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2287                   nlobs = attrn(dsid, 'NLOBS');
2288                else
2289                   nlobs = -1;
2290       
2291                dsid = close(dsid);
2292                if (nlobs ^= 0) then
2293                do;
2294                   if (nlobs > 0) then
2295                      exponent = ceil(log2(nlobs));
2296                   else
2297                      exponent = 8;
2298                   declare hash h4(dataset: "etls_temp_lookupview4", hashexp: exponent);
2299                   h4.defineKey( "SOURCE",
2300                                  "SOURCE_CODE");
2301                   h4.defineData( "ETLS_W5JCO6SA");
2302                   h4.defineDone();
2303                   if (nlobs = -1) then
2304                   do;
2305                      if (h4.Num_Items < 1) then
2306                      do;
2307                         put "NOTE: Lookup table is empty: etls_temp_lookupview4";
2308                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2309                              " etls_temp_lookupview4";
2310       
2311                         abort 3;
2312                      end;
2313                   end;
56                                                         The SAS System                                19:16 Friday, April 4, 2008

2314                end;
2315                else
2316                do;
2317                   put "NOTE: Lookup table is empty: etls_temp_lookupview4";
2318                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2319                        " etls_temp_lookupview4";
2320       
2321                   abort 3;
2322                end;
2323             end;
2324             else
2325             do;
2326                put "NOTE: Lookup table does not exist or cannot be opened:"
2327                     " etls_temp_lookupview4";
2328       
2329                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2330                     " etls_temp_lookupview4";
2331       
2332                abort 3;
2333             end;
2334       
2335             /* Build hash h5 from lookup table etls_temp_lookupview5 */
2336             nlobs = .;
2337             dsid = open("etls_temp_lookupview5");
2338             if (dsid > 0) then
2339             do;
2340                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2341                   nlobs = attrn(dsid, 'NLOBS');
2342                else
2343                   nlobs = -1;
2344       
2345                dsid = close(dsid);
2346                if (nlobs ^= 0) then
2347                do;
2348                   if (nlobs > 0) then
2349                      exponent = ceil(log2(nlobs));
2350                   else
2351                      exponent = 8;
2352                   declare hash h5(dataset: "etls_temp_lookupview5", hashexp: exponent);
2353                   h5.defineKey( "SOURCE",
2354                                  "SOURCE_CODE");
2355                   h5.defineData( "ETLS_W5JCO6TY");
2356                   h5.defineDone();
2357                   if (nlobs = -1) then
2358                   do;
2359                      if (h5.Num_Items < 1) then
2360                      do;
2361                         put "NOTE: Lookup table is empty: etls_temp_lookupview5";
2362                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2363                              " etls_temp_lookupview5";
2364       
2365                         abort 3;
2366                      end;
2367                   end;
2368                end;
2369                else
2370                do;
2371                   put "NOTE: Lookup table is empty: etls_temp_lookupview5";
57                                                         The SAS System                                19:16 Friday, April 4, 2008

2372                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2373                        " etls_temp_lookupview5";
2374       
2375                   abort 3;
2376                end;
2377             end;
2378             else
2379             do;
2380                put "NOTE: Lookup table does not exist or cannot be opened:"
2381                     " etls_temp_lookupview5";
2382       
2383                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2384                     " etls_temp_lookupview5";
2385       
2386                abort 3;
2387             end;
2388       
2389             /* Build hash h6 from lookup table etls_temp_lookupview6 */
2390             nlobs = .;
2391             dsid = open("etls_temp_lookupview6");
2392             if (dsid > 0) then
2393             do;
2394                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2395                   nlobs = attrn(dsid, 'NLOBS');
2396                else
2397                   nlobs = -1;
2398       
2399                dsid = close(dsid);
2400                if (nlobs ^= 0) then
2401                do;
2402                   if (nlobs > 0) then
2403                      exponent = ceil(log2(nlobs));
2404                   else
2405                      exponent = 8;
2406                   declare hash h6(dataset: "etls_temp_lookupview6", hashexp: exponent);
2407                   h6.defineKey( "SOURCE",
2408                                  "SOURCE_CODE");
2409                   h6.defineData( "ETLS_W5JCO6VC");
2410                   h6.defineDone();
2411                   if (nlobs = -1) then
2412                   do;
2413                      if (h6.Num_Items < 1) then
2414                      do;
2415                         put "NOTE: Lookup table is empty: etls_temp_lookupview6";
2416                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2417                              " etls_temp_lookupview6";
2418       
2419                         abort 3;
2420                      end;
2421                   end;
2422                end;
2423                else
2424                do;
2425                   put "NOTE: Lookup table is empty: etls_temp_lookupview6";
2426                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2427                        " etls_temp_lookupview6";
2428       
2429                   abort 3;
58                                                         The SAS System                                19:16 Friday, April 4, 2008

2430                end;
2431             end;
2432             else
2433             do;
2434                put "NOTE: Lookup table does not exist or cannot be opened:"
2435                     " etls_temp_lookupview6";
2436       
2437                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2438                     " etls_temp_lookupview6";
2439       
2440                abort 3;
2441             end;
2442       
2443             /* Build hash h7 from lookup table etls_temp_lookupview7 */
2444             nlobs = .;
2445             dsid = open("etls_temp_lookupview7");
2446             if (dsid > 0) then
2447             do;
2448                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
2449                   nlobs = attrn(dsid, 'NLOBS');
2450                else
2451                   nlobs = -1;
2452       
2453                dsid = close(dsid);
2454                if (nlobs ^= 0) then
2455                do;
2456                   if (nlobs > 0) then
2457                      exponent = ceil(log2(nlobs));
2458                   else
2459                      exponent = 8;
2460                   declare hash h7(dataset: "etls_temp_lookupview7", hashexp: exponent);
2461                   h7.defineKey( "SOURCE",
2462                                  "SOURCE_CODE");
2463                   h7.defineData( "ETLS_W5JCO6WG",
2464                                  "ETLS_W5JCO6WQ",
2465                                  "ETLS_W5JCO6X0");
2466                   h7.defineDone();
2467                   if (nlobs = -1) then
2468                   do;
2469                      if (h7.Num_Items < 1) then
2470                      do;
2471                         put "NOTE: Lookup table is empty: etls_temp_lookupview7";
2472                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2473                              " etls_temp_lookupview7";
2474       
2475                         abort 3;
2476                      end;
2477                   end;
2478                end;
2479                else
2480                do;
2481                   put "NOTE: Lookup table is empty: etls_temp_lookupview7";
2482                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
2483                        " etls_temp_lookupview7";
2484       
2485                   abort 3;
2486                end;
2487             end;
59                                                         The SAS System                                19:16 Friday, April 4, 2008

2488             else
2489             do;
2490                put "NOTE: Lookup table does not exist or cannot be opened:"
2491                     " etls_temp_lookupview7";
2492       
2493                put "NOTE: Abort action indicated, condition= Lookup table missing:"
2494                     " etls_temp_lookupview7";
2495       
2496                abort 3;
2497             end;
2498       
2499             call missing (SOURCE, SOURCE_CODE, STANDARD_CODE, ETLS_W5JCO6J4,
2500                           ETLS_W5JCO6JE, ETLS_W5JCO6O4, ETLS_W5JCO6QC, ETLS_W5JCO6SA,
2501                           ETLS_W5JCO6TY, ETLS_W5JCO6VC, ETLS_W5JCO6WG, ETLS_W5JCO6WQ,
2502                           ETLS_W5JCO6X0);
2503       
2504          end; /* All hash objects have been defined */
2505       
2506          /* Read a row from the source table  */
2507          set work.W5JBKAKP end = eof;
2508       
2509          /* Assignment statements required by Source to Target mapping tab  */
2510          COUNTRY_OF_RESIDENCY_CD_TEMP = COUNTRY_CD_TEMP;
2511       
2512          /* Is the current key value stored in hash h0?  */
2513          SOURCE = SOURCE_SYSTEM_CD;
2514          SOURCE_CODE = REGLTRY_COUNTERPARTY_TYPE_CD_TEM;
2515          rc0 = h0.find();
2516          REGLTRY_COUNTERPARTY_TYPE_CD = STANDARD_CODE;
2517       
2518          /* Is the current key value stored in hash h1?  */
2519          SOURCE = SOURCE_SYSTEM_CD;
2520          SOURCE_CODE = AMXUCF00_CF_CTL3;
2521          rc1 = h1.find();
2522          CURRENCY_CD = ETLS_W5JCO6J4;
2523          DOMESTIC_CURRENCY_CD = ETLS_W5JCO6JE;
2524       
2525          /* Is the current key value stored in hash h2?  */
2526          SOURCE = SOURCE_SYSTEM_CD;
2527          SOURCE_CODE = COUNTERPARTY_RLN_TYPE_CD_TEMP;
2528          rc2 = h2.find();
2529          COUNTERPARTY_RLN_TYPE_CD = ETLS_W5JCO6O4;
2530       
2531          /* Is the current key value stored in hash h3?  */
2532          SOURCE = SOURCE_SYSTEM_CD;
2533          SOURCE_CODE = COUNTERPARTY_TYPE_CD_TEMP;
2534          rc3 = h3.find();
2535          COUNTERPARTY_TYPE_CD = ETLS_W5JCO6QC;
2536       
2537          /* Is the current key value stored in hash h4?  */
2538          SOURCE = SOURCE_SYSTEM_CD;
2539          SOURCE_CODE = ECONOMIC_SECTOR_CD_TEMP;
2540          rc4 = h4.find();
2541          ECONOMIC_SECTOR_CD = ETLS_W5JCO6SA;
2542       
2543          /* Is the current key value stored in hash h5?  */
2544          SOURCE = SOURCE_SYSTEM_CD;
2545          SOURCE_CODE = POSTAL_CD_TEMP;
60                                                         The SAS System                                19:16 Friday, April 4, 2008

2546          rc5 = h5.find();
2547          POSTAL_CD = ETLS_W5JCO6TY;
2548       
2549          /* Is the current key value stored in hash h6?  */
2550          SOURCE = SOURCE_SYSTEM_CD;
2551          SOURCE_CODE = STATE_REGION_CD_TEMP;
2552          rc6 = h6.find();
2553          STATE_REGION_CD = ETLS_W5JCO6VC;
2554       
2555          /* Is the current key value stored in hash h7?  */
2556          SOURCE = SOURCE_SYSTEM_CD;
2557          SOURCE_CODE = COUNTRY_CD_TEMP;
2558          rc7 = h7.find();
2559          ASSOCIATE_COUNTERPARTY_ID = ETLS_W5JCO6WG;
2560          COUNTRY_CD = ETLS_W5JCO6WQ;
2561          COUNTRY_OF_RESIDENCY_CD = ETLS_W5JCO6X0;
2562       
2563          /* Examine success of lookups  */
2564          if ( rc0=0 and rc1=0 and rc2=0 and rc3=0 and rc4=0 and rc5=0 and rc6=0 and
2565               rc7=0 ) then
2566          do;
2567             /* Write row to target  */
2568             output work.W5GWOI7C;
2569             return;
2570          end;
2571          else
2572          do;
2573             error_total + 1;
2574       
2575             if (rc0 ^= 0) then
2576             do;
2577                exception_total + 1;
2578                /* Check: Lookup value not found-Set target columns to value  */
2579                REGLTRY_COUNTERPARTY_TYPE_CD="040";
2580                request_write_target = 1;
2581             end;
2582       
2583             if (rc1 ^= 0) then
2584             do;
2585                exception_total + 1;
2586                /* Check: Lookup value not found-Set target columns to value  */
2587                CURRENCY_CD="PHP";
2588                DOMESTIC_CURRENCY_CD="PHP";
2589                request_write_target = 1;
2590             end;
2591       
2592             if (rc2 ^= 0) then
2593             do;
2594                exception_total + 1;
2595                /* Check: Lookup value not found-Set target columns to value  */
2596                COUNTERPARTY_RLN_TYPE_CD="NON";
2597                request_write_target = 1;
2598             end;
2599       
2600             if (rc3 ^= 0) then
2601             do;
2602                exception_total + 1;
2603                /* Check: Lookup value not found-Set target columns to value  */
61                                                         The SAS System                                19:16 Friday, April 4, 2008

2604                COUNTERPARTY_TYPE_CD="040";
2605                request_write_target = 1;
2606             end;
2607       
2608             if (rc4 ^= 0) then
2609             do;
2610                exception_total + 1;
2611                /* Check: Lookup value not found-Set target columns to value  */
2612                ECONOMIC_SECTOR_CD="OTH";
2613                request_write_target = 1;
2614             end;
2615       
2616             if (rc5 ^= 0) then
2617             do;
2618                exception_total + 1;
2619                /* Check: Lookup value not found-Set target columns to value  */
2620                POSTAL_CD="OTH";
2621                request_write_target = 1;
2622             end;
2623       
2624             if (rc6 ^= 0) then
2625             do;
2626                exception_total + 1;
2627                /* Check: Lookup value not found-Set target columns to value  */
2628                STATE_REGION_CD='OTH';
2629                request_write_target = 1;
2630             end;
2631       
2632             if (rc7 ^= 0) then
2633             do;
2634                exception_total + 1;
2635                /* Check: Lookup value not found-Set target columns to value  */
2636                COUNTRY_CD="OTH";
2637                COUNTRY_OF_RESIDENCY_CD="OTH";
2638                ASSOCIATE_COUNTERPARTY_ID ="PHL";
2639                request_write_target = 1;
2640             end;
2641       
2642             /* Set target columns to value/missing requested?  */
2643             if (request_write_target eq 1) then
2644                /* Write row to target  */
2645                output work.W5GWOI7C;
2646       
2647          end; /* One or more lookups failed */
2648       
2649          if (eof = 1) then
2650          do;
2651             put "Source records with errors: " error_total ;
2652             put "Total lookup exceptions: " exception_total ;
2653          end;
2654       
2655       run;

NOTE: There were 177 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW0.
NOTE: There were 360 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW1.
NOTE: There were 30 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW2.
NOTE: There were 154 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW3.
NOTE: There were 7246 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW4.
62                                                         The SAS System                                19:16 Friday, April 4, 2008

NOTE: There were 13446 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW5.
NOTE: There were 87 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW6.
NOTE: There were 733 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW7.
Source records with errors: 142509
Total lookup exceptions: 750907
NOTE: There were 142509 observations read from the data set WORK.W5JBKAKP.
NOTE: The data set WORK.W5GWOI7C has 142509 observations and 41 variables.
NOTE: DATA statement used (Total process time):
      real time           2.08 seconds
      cpu time            1.66 seconds
      

2656       
2657       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
2658       
2659       /*---- Map the columns  ----*/
2660       proc datasets lib = work nolist nowarn memtype = (data view);
2661          delete mapped;
2662       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2663       
2664       %put %str(NOTE: Mapping columns ...);
NOTE: Mapping columns ...
2665       proc sql;
2666          create view work.mapped as
2667             select ADDRESS_LINE_1_TXT length = 100,
2668                    ADDRESS_LINE_2_TXT length = 100,
2669                    ADDRESS_LINE_3_TXT length = 100,
2670                    ADDRESS_LINE_4_TXT length = 100,
2671                    ADDRESS_TYPE_CD length = 3,
2672                    (put(put(ASSOCIATE_COUNTERPARTY_ID ,$CUST_LOOKUP2_.),$32.)) as ASSOCIATE_COUNTERPARTY_ID length = 32,
2673                    CITY_NM length = 100,
2674                    COUNTERPARTY_ID length = 26,
2675                    COUNTERPARTY_RLN_TYPE_CD,
2676                    COUNTERPARTY_TYPE_CD,
2677                    COUNTRY_CD,
2678                    COUNTRY_CD_TEMP length = 5,
2679                    COUNTERPARTY_RLN_TYPE_CD_TEMP length = 3,
2680                    COUNTERPARTY_TYPE_CD_TEMP length = 3,
2681                    REGLTRY_COUNTERPARTY_TYPE_CD_TEM length = 11,
2682                    COUNTRY_OF_RESIDENCY_CD,
2683                    COUNTRY_CD_TEMP as COUNTRY_OF_RESIDENCY_CD_TEMP length = 5,
2684                    CURRENCY_CD,
63                                                         The SAS System                                19:16 Friday, April 4, 2008

2685                    CUSTOMER_TYPE_CD length = 3,
2686                    DOMESTIC_CURRENCY_CD,
2687                    ECONOMIC_SECTOR_CD,
2688                    ECONOMIC_SECTOR_CD_TEMP length = 6,
2689                    EMPLOYEE_ID length = 32,
2690                    FIRST_NM length = 40,
2691                    IND_CORP_TYPE length = 3,
2692                    IND_EXTENRAL_CUST_TYPE length = 2,
2693                    LAST_NM length = 40,
2694                    MIDDLE_INITIALS length = 20,
2695                    MIDDLE_NM length = 40,
2696                    POSTAL_CD,
2697                    POSTAL_CD_TEMP length = 11,
2698                    PROCESSED_DTTM length = 8,
2699                    REGLTRY_COUNTERPARTY_TYPE_CD,
2700                    REPL_ID length = 32,
2701                    SOURCE_SYSTEM_CD length = 3,
2702                    STATE_REGION_CD,
2703                    STATE_REGION_CD_TEMP length = 4,
2704                    TAX_ID length = 32,
2705                    TAX_ID_TYPE_CD length = 3,
2706                    TAX_STATUS_CD length = 3,
2707                    TOTAL_ASSET_AMT length = 8
2708                from work.W5GWOI7C;
NOTE: SQL view WORK.MAPPED has been defined.
2709       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2710       
2711       %let SYSLAST = work.mapped;
2712       
2713       data work.W5GWOI7C;
2714          set work.mapped;
2715       run;

NOTE: There were 142509 observations read from the data set WORK.W5GWOI7C.
NOTE: There were 142509 observations read from the data set WORK.MAPPED.
NOTE: The data set WORK.W5GWOI7C has 142509 observations and 41 variables.
NOTE: DATA statement used (Total process time):
      real time           1.97 seconds
      cpu time            1.56 seconds
      

2716       
2717       proc datasets lib=work nolist nowarn memtype = VIEW;
2718          delete mapped;
2719       quit;

NOTE: Deleting WORK.MAPPED (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.91 seconds
      cpu time            0.01 seconds
      

2720       
64                                                         The SAS System                                19:16 Friday, April 4, 2008

2721       /*============================================================================*
2722        * Step:          Handle Invalid Values                     A5SFKZBN.BS000U9A *
2723        * Transform:     Handle Invalid Values                                       *
2724        * Description:                                                               *
2725        *                                                                            *
2726        * Source Table:  Splitter Target 1 - work.W5GWOI7C         A5SFKZBN.BQ000RYI *
2727        * Target Table:  as - work.W5H9K8AE                        A5SFKZBN.BQ000RY9 *
2728        *============================================================================*/
2729       
2730       %let SYSLAST = %nrquote(work.W5GWOI7C);
2731       
2732       %let transformID = %quote(A5SFKZBN.BS000U9A);
2733       
2734       %let trans_rc = 0;
2735       
2736       /* Source table(s)/view(s)  */
2737       %let _INPUT0 = work.W5GWOI7C;
2738       
2739       /* Target table/view(s)  */
2740       %let _OUTPUT = work.W5H9K8AE;
2741       %let _OUTPUT0 = work.W5H9K8AE;
2742       
2743       /* Options  */
2744       %let columns = ;
2745       %let DWC = ;
2746       %let DWOC = ;
2747       %let SOURCECOL = SOURCE_SYSTEM_CD;
2748       %let key = REPL_ID;
2749       %let SRCOTH = COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP
2750               POSTAL_CD_TEMP STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP
2751               COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM;
2752       %let OTH = COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD
2753               STATE_REGION_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD
2754               REGLTRY_COUNTERPARTY_TYPE_CD;
2755       %let OTHSRCTABLE = %nrquote(ALS);
2756       
2757       /* List of target columns to keep  */
2758       %let keep = SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC KEY PROCESSED_DTTM;
2759       
2760       %macro invalid_values;
2761       	%let key=%sysfunc(compbl(&key));/*Key column/s of invalid rows*/
2762       	%if &SOURCECOL eq %str( ) %then %let SOURCECOL="&OTHSRCTABLE.";
2763       	%if &OTH ne %str( ) %then %do;/*Invalid formats*/
2764       		%let OTH=%sysfunc(compbl(&OTH));
2765       		%let numOTH= %sysfunc(sum(%sysfunc(countc(&OTH, %str( ))),1));
2766       		%put numOTH=&numOTH;
2767       	%end;
2768       	%if &SRCOTH ne %str( ) %then %do;/*Source column/s of invalid formats*/
2769       		%let SRCOTH=%sysfunc(compbl(&SRCOTH));
2770       		%let numSRCOTH= %sysfunc(sum(%sysfunc(countc(&SRCOTH, %str( ))),1));
2771       		%put numSRCOTH=&numSRCOTH;
2772       	%end;
2773       	%if &DWC ne %str( ) %then %do;/*Invalid Date with Cutoff*/
2774       		%let DWC=%sysfunc(compbl(&DWC));
2775       		%let numDWC= %sysfunc(sum(%sysfunc(countc(&DWC, %str( ))),1));
2776       		%put numDWC=&numDWC;
2777       	%end;
2778       	%if &DWOC ne %str( ) %then %do;/*Invalid Date without cutoff*/
65                                                         The SAS System                                19:16 Friday, April 4, 2008

2779       		%let DWOC=%sysfunc(compbl(&DWOC));
2780       		%let numDWOC= %sysfunc(sum(%sysfunc(countc(&DWOC, %str( ))),1));
2781       		%put numDWOC=&numDWOC;
2782       	%end;
2783       	%if &columns ne %str( ) %then %do;/*Invalid Numeric columns*/
2784       		%let columns=%sysfunc(compbl(&columns));
2785       		%let numcol= %sysfunc(sum(%sysfunc(countc(&columns, %str( ))),1));
2786       		%put numcol=&numcol;
2787       	%end;	
2788       	%let _key=%sysfunc(tranwrd(&key,%str( ),%str(, )));
2789       	%macro insert_exception;
2790       		data EXCEPTION (keep=SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC KEY PROCESSED_DTTM);
2791       			length SOURCE_TABLE $100 EXCEPTION_CD $32 EXCEPTION_DESC $100 KEY $32 PROCESSED_DTTM 8;
2792       			set &_INPUT0;
2793       			%if &columns ne %str( ) %then %do;
2794       				%do i=1 %to &numcol.;
2795       					%let colname=%scan(&columns.,&i.);
2796       					if %scan(&columns.,&i.)=. then do;
2797       						SOURCE_TABLE=scan("&_INPUT0.",2,'_');
2798       						EXCEPTION_CD="0003";
2799       						EXCEPTION_DESC="Invalid Numeric Values" || " (&colname)";
2800       						KEY=catt(&_key.);
2801       						PROCESSED_DTTM=datetime();
2802       						output;
2803       					end;
2804       				%end;
2805       			%end;
2806       			%if &DWC ne %str( ) %then %do;
2807       				%do j=1 %to &numDWC.;
2808       					%let colname=%scan(&DWC.,&j.);
2809       					if %scan(&DWC.,&j.)=. |  %scan(&DWC.,&j.) ge today() then do;
2810       						SOURCE_TABLE=scan("&_INPUT0.",2,'_');
2811       						EXCEPTION_CD="0004";
2812       						EXCEPTION_DESC="Invalid Date Values" || " (&colname)";
2813       						KEY=catt(&_key.);
2814       						PROCESSED_DTTM=datetime();
2815       						output;
2816       					end;
2817       				%end;
2818       			%end;
2819       			%if &DWOC ne %str( ) %then %do;
2820       				%do k=1 %to &numDWOC.;
2821       					%let colname=%scan(&DWOC.,&k.);
2822       					if %scan(&DWOC.,&k.)=. then do;
2823       						SOURCE_TABLE=scan("&_INPUT0.",2,'_');
2824       						EXCEPTION_CD="0004";
2825       						EXCEPTION_DESC="Invalid Date Values" || " (&colname)";
2826       						KEY=catt(&_key.);
2827       						PROCESSED_DTTM=datetime();
2828       						output;
2829       					end;
2830       				%end;
2831       			%end;
2832       			%if &OTH ne %str( ) %then %do;
2833       				%do l=1 %to &numOTH.;
2834       					%let colname=%scan(&OTH.,&l.);
2835       					%let colsource=%scan(&SRCOTH.,&l.);
2836       					if %scan(&OTH.,&l.)="OTH" |  compress(%scan(&OTH.,&l.)) eq '' then do;
66                                                         The SAS System                                19:16 Friday, April 4, 2008

2837       						SOURCE_TABLE=&SOURCECOL.;
2838       						EXCEPTION_CD="0005";
2839       						EXCEPTION_DESC=compbl("Invalid Source Code" || " (&colname), source value (" || &colsource. || ")");
2840       						KEY=catt(&_key.);
2841       						PROCESSED_DTTM=datetime();
2842       						output;
2843       					end;
2844       				%end;
2845       			%end;
2846       		run;
2847       		proc sql noprint;
2848       			delete *
2849       			from EXCEPTION
2850       			where  SOURCE_TABLE is null & EXCEPTION_CD is null & EXCEPTION_DESC is null &
2851       					 KEY is null
2852       			;
2853       			select count(*) into :nobs
2854       			from EXCEPTION
2855       			;
2856       		quit;
2857       		%if &nobs ne 0 %then %do;
2858       			proc sql;
2859       				insert into &_OUTPUT0.
2860       				select *
2861       				from EXCEPTION
2862       				;
2863       				drop table EXCEPTION;
2864       			quit;
2865       		%end;
2866       		%else %do;
2867       			%put No Invalid data.;
2868       		%end;
2869       	%mend;
2870       	%if %sysfunc(exist(&_OUTPUT0.)) = 0 %then %do;
2871       		proc sql;
2872       			create table &_OUTPUT0.
2873       			(
2874       				SOURCE_TABLE char(100),
2875       				EXCEPTION_CD char(32),
2876       				EXCEPTION_DESC char(100),
2877       				KEY char(32),
2878       				PROCESSED_DTTM num format=date9.
2879       			);
2880       		quit;
2881       		%insert_exception
2882       	%end;
2883       	%else %do;
2884       		%insert_exception
2885       	%end;
2886       %mend;
2887       %invalid_values;
MLOGIC(INVALID_VALUES):  Beginning execution.
MLOGIC(INVALID_VALUES):  %LET (variable name is KEY)
SYMBOLGEN:  Macro variable KEY resolves to REPL_ID
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MLOGIC(INVALID_VALUES):  %IF condition &SOURCECOL eq   is FALSE
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD          STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD          REGLTRY_COUNTERPARTY_TYPE_CD
67                                                         The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(INVALID_VALUES):  %IF condition &OTH ne   is TRUE
MLOGIC(INVALID_VALUES):  %LET (variable name is OTH)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD          STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD          REGLTRY_COUNTERPARTY_TYPE_CD
MLOGIC(INVALID_VALUES):  %LET (variable name is NUMOTH)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
MLOGIC(INVALID_VALUES):  %PUT numOTH=&numOTH
SYMBOLGEN:  Macro variable NUMOTH resolves to 8
numOTH=8
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP          
            POSTAL_CD_TEMP STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP          COUNTERPARTY_TYPE_CD_TEMP 
            REGLTRY_COUNTERPARTY_TYPE_CD_TEM
MLOGIC(INVALID_VALUES):  %IF condition &SRCOTH ne   is TRUE
MLOGIC(INVALID_VALUES):  %LET (variable name is SRCOTH)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP          
            POSTAL_CD_TEMP STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP          COUNTERPARTY_TYPE_CD_TEMP 
            REGLTRY_COUNTERPARTY_TYPE_CD_TEM
MLOGIC(INVALID_VALUES):  %LET (variable name is NUMSRCOTH)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
MLOGIC(INVALID_VALUES):  %PUT numSRCOTH=&numSRCOTH
SYMBOLGEN:  Macro variable NUMSRCOTH resolves to 8
numSRCOTH=8
SYMBOLGEN:  Macro variable DWC resolves to 
MLOGIC(INVALID_VALUES):  %IF condition &DWC ne   is FALSE
SYMBOLGEN:  Macro variable DWOC resolves to 
MLOGIC(INVALID_VALUES):  %IF condition &DWOC ne   is FALSE
SYMBOLGEN:  Macro variable COLUMNS resolves to 
MLOGIC(INVALID_VALUES):  %IF condition &columns ne   is FALSE
MLOGIC(INVALID_VALUES):  %LET (variable name is _KEY)
SYMBOLGEN:  Macro variable KEY resolves to REPL_ID
SYMBOLGEN:  Macro variable _OUTPUT0 resolves to work.W5H9K8AE
MLOGIC(INVALID_VALUES):  %IF condition %sysfunc(exist(&_OUTPUT0.)) = 0 is TRUE
MPRINT(INVALID_VALUES):   proc sql;
SYMBOLGEN:  Macro variable _OUTPUT0 resolves to work.W5H9K8AE
MPRINT(INVALID_VALUES):   create table work.W5H9K8AE ( SOURCE_TABLE char(100), EXCEPTION_CD char(32), EXCEPTION_DESC char(100), KEY 
char(32), PROCESSED_DTTM num format=date9. );
NOTE: Table WORK.W5H9K8AE created, with 0 rows and 5 columns.
MPRINT(INVALID_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(INSERT_EXCEPTION):  Beginning execution.
MPRINT(INSERT_EXCEPTION):   data EXCEPTION (keep=SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC KEY PROCESSED_DTTM);
MPRINT(INSERT_EXCEPTION):   length SOURCE_TABLE $100 EXCEPTION_CD $32 EXCEPTION_DESC $100 KEY $32 PROCESSED_DTTM 8;
SYMBOLGEN:  Macro variable _INPUT0 resolves to work.W5GWOI7C
MPRINT(INSERT_EXCEPTION):   set work.W5GWOI7C;
SYMBOLGEN:  Macro variable COLUMNS resolves to 
MLOGIC(INSERT_EXCEPTION):  %IF condition &columns ne   is FALSE
SYMBOLGEN:  Macro variable DWC resolves to 
MLOGIC(INSERT_EXCEPTION):  %IF condition &DWC ne   is FALSE
SYMBOLGEN:  Macro variable DWOC resolves to 
MLOGIC(INSERT_EXCEPTION):  %IF condition &DWOC ne   is FALSE
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
68                                                         The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(INSERT_EXCEPTION):  %IF condition &OTH ne   is TRUE
SYMBOLGEN:  Macro variable NUMOTH resolves to 8
MLOGIC(INSERT_EXCEPTION):  %DO loop beginning; index variable L; start value is 1; stop value is 8; by value is 1.  
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 1
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 1
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 1
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 1
MPRINT(INSERT_EXCEPTION):   if COUNTRY_CD="OTH" | compress(COUNTRY_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTRY_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to COUNTRY_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTRY_CD), source value (" || COUNTRY_CD_TEMP || 
")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 2; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 2
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 2
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 2
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 2
MPRINT(INSERT_EXCEPTION):   if COUNTRY_OF_RESIDENCY_CD="OTH" | compress(COUNTRY_OF_RESIDENCY_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTRY_OF_RESIDENCY_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to COUNTRY_OF_RESIDENCY_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTRY_OF_RESIDENCY_CD), source value (" || 
COUNTRY_OF_RESIDENCY_CD_TEMP || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
69                                                         The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 3; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 3
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 3
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 3
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 3
MPRINT(INSERT_EXCEPTION):   if ECONOMIC_SECTOR_CD="OTH" | compress(ECONOMIC_SECTOR_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to ECONOMIC_SECTOR_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (ECONOMIC_SECTOR_CD), source value (" || 
ECONOMIC_SECTOR_CD_TEMP || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 4; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 4
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 4
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 4
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 4
MPRINT(INSERT_EXCEPTION):   if POSTAL_CD="OTH" | compress(POSTAL_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to POSTAL_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to POSTAL_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (POSTAL_CD), source value (" || POSTAL_CD_TEMP || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 5; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
70                                                         The SAS System                                19:16 Friday, April 4, 2008

            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 5
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 5
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 5
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 5
MPRINT(INSERT_EXCEPTION):   if STATE_REGION_CD="OTH" | compress(STATE_REGION_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to STATE_REGION_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to STATE_REGION_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (STATE_REGION_CD), source value (" || 
STATE_REGION_CD_TEMP || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 6; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 6
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 6
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 6
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 6
MPRINT(INSERT_EXCEPTION):   if COUNTERPARTY_RLN_TYPE_CD="OTH" | compress(COUNTERPARTY_RLN_TYPE_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTERPARTY_RLN_TYPE_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to COUNTERPARTY_RLN_TYPE_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTERPARTY_RLN_TYPE_CD), source value (" || 
COUNTERPARTY_RLN_TYPE_CD_TEMP || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 7; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 7
71                                                         The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 7
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 7
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 7
MPRINT(INSERT_EXCEPTION):   if COUNTERPARTY_TYPE_CD="OTH" | compress(COUNTERPARTY_TYPE_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to COUNTERPARTY_TYPE_CD_TEMP
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTERPARTY_TYPE_CD), source value (" || 
COUNTERPARTY_TYPE_CD_TEMP || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 8; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 8
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD_TEMP ECONOMIC_SECTOR_CD_TEMP POSTAL_CD_TEMP 
            STATE_REGION_CD_TEMP COUNTERPARTY_RLN_TYPE_CD_TEMP COUNTERPARTY_TYPE_CD_TEMP REGLTRY_COUNTERPARTY_TYPE_CD_TEM
SYMBOLGEN:  Macro variable L resolves to 8
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 8
SYMBOLGEN:  Macro variable OTH resolves to COUNTRY_CD COUNTRY_OF_RESIDENCY_CD ECONOMIC_SECTOR_CD POSTAL_CD STATE_REGION_CD 
            COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable L resolves to 8
MPRINT(INSERT_EXCEPTION):   if REGLTRY_COUNTERPARTY_TYPE_CD="OTH" | compress(REGLTRY_COUNTERPARTY_TYPE_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to REGLTRY_COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to REGLTRY_COUNTERPARTY_TYPE_CD_TEM
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (REGLTRY_COUNTERPARTY_TYPE_CD), source value (" || 
REGLTRY_COUNTERPARTY_TYPE_CD_TEM || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 9; loop will not iterate again.
MPRINT(INSERT_EXCEPTION):   run;

NOTE: There were 142509 observations read from the data set WORK.W5GWOI7C.
NOTE: The data set WORK.EXCEPTION has 181273 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           1.39 seconds
72                                                         The SAS System                                19:16 Friday, April 4, 2008

      cpu time            0.83 seconds
      

MPRINT(INSERT_EXCEPTION):   proc sql noprint;
MPRINT(INSERT_EXCEPTION):   delete * from EXCEPTION where SOURCE_TABLE is null & EXCEPTION_CD is null & EXCEPTION_DESC is null & 
KEY is null ;
NOTE: No rows were deleted from WORK.EXCEPTION.

MPRINT(INSERT_EXCEPTION):   select count(*) into :nobs from EXCEPTION ;
MPRINT(INSERT_EXCEPTION):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.52 seconds
      cpu time            0.19 seconds
      

SYMBOLGEN:  Macro variable NOBS resolves to   181273
MLOGIC(INSERT_EXCEPTION):  %IF condition &nobs ne 0 is TRUE
MPRINT(INSERT_EXCEPTION):   proc sql;
SYMBOLGEN:  Macro variable _OUTPUT0 resolves to work.W5H9K8AE
MPRINT(INSERT_EXCEPTION):   insert into work.W5H9K8AE select * from EXCEPTION ;
NOTE: 181273 rows were inserted into WORK.W5H9K8AE.

MPRINT(INSERT_EXCEPTION):   drop table EXCEPTION;
NOTE: Table WORK.EXCEPTION has been dropped.
MPRINT(INSERT_EXCEPTION):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           1.09 seconds
      cpu time            0.81 seconds
      

MLOGIC(INSERT_EXCEPTION):  Ending execution.
MLOGIC(INVALID_VALUES):  Ending execution.
2888       
2889       
2890       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
2891       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
2892       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
73                                                         The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
2893       
2894       /*============================================================================*
2895        * Step:          WRM SQL Join                              A5SFKZBN.BS000U9E *
2896        * Transform:     SQL Join (Version 2)                                        *
2897        * Description:                                                               *
2898        *                                                                            *
2899        * Source Tables: Splitter Target 2 - work.AMXUCF00_WRM     A5SFKZBN.BQ000RY5 *
2900        *                COPY_RMEXTRACT - COPY.COPY_RMEXTRACT      A5SFKZBN.BK00071X *
2901        * Target Table:  SQL Target - work.W5GIMDWJ                A5SFKZBN.BQ000RYK *
2902        *============================================================================*/
2903       
2904       %let transformID = %quote(A5SFKZBN.BS000U9E);
2905       
2906       %let trans_rc = 0;
2907       
2908       proc datasets lib = work nolist nowarn memtype = (data view);
2909          delete W5GIMDWJ;
2910       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2911       
2912       data _null_;
2913          put "NOTE: The following column(s) do not have a column mapping, so the"
2914               " value(s) will be set to missing: ADDRESS_TYPE_CD, ANNUAL_INCOME_AMT,"
2915               " ASSOCIATE_COUNTERPARTY_ID, BANKRUPTCY_FILED_DT, BANKRUPTCY_STATUS_CD,"
2916               " CORE_MKT_PARTICIPANT_FLG, COUNTERPARTY_ASSOC_TYPE_CD,"
2917               " COUNTERPARTY_GROUP_PARENT_FLG, COUNTERPARTY_RLN_TYPE_CD,"
2918               " COUNTERPARTY_TYPE_CD, COUNTRY_CD, COUNTRY_OF_RESIDENCY_CD,"
2919               " CREDIT_BUREAU_SCORE, CREDIT_BUREAU_SCORE_DT, CREDIT_RATING_CD,"
2920               " CURRENCY_CD, DELINQUENT_FLG, DOMESTIC_CURRENCY_CD, DRIVER_LICENSE_ID,"
2921               " DRIVERS_LIC_EXPIRATION_DT, ECONOMIC_SECTOR_CD, EFFECTIVE_FROM_DTTM,"
2922               " EFFECTIVE_TO_DTTM, EMPLOYEE_ID, FINANCIAL_ASSOCIATE_RK,"
2923               " FORECLOSED_FLG, HIGH_RISK_CATEGORY_FLG, HOUSEHOLD_RK,"
2924               " INTERNAL_ORG_RK, LEGAL_JUDGEMENT_FLG, MODEL_RK,"
2925               " PASSPORT_EXPIRATION_DT, PENDING_LAWSUIT_FLG, POSTAL_CD,"
2926               " PRIM_BRANCH_FINANCIAL_UNIT_RK, REGLTRY_COUNTERPARTY_TYPE_CD,"
2927               " RISK_WEIGHT_PCT, SEC_BRANCH_FINANCIAL_UNIT_RK,"
2928               " SECNDRY_CITIZENSHIP_COUNTRY_CD, STATE_REGION_CD, TOTAL_LIABILITY_AMT,"
2929               " VALID_FROM_DTTM, VALID_TO_DTTM";
2930       run;

NOTE: The following column(s) do not have a column mapping, so the
 value(s) will be set to missing: ADDRESS_TYPE_CD, ANNUAL_INCOME_AMT,
 ASSOCIATE_COUNTERPARTY_ID, BANKRUPTCY_FILED_DT, BANKRUPTCY_STATUS_CD, CORE_MKT_PARTICIPANT_FLG, COUNTERPARTY_ASSOC_TYPE_CD,
 COUNTERPARTY_GROUP_PARENT_FLG, COUNTERPARTY_RLN_TYPE_CD, COUNTERPARTY_TYPE_CD, COUNTRY_CD, COUNTRY_OF_RESIDENCY_CD,
74                                                         The SAS System                                19:16 Friday, April 4, 2008

 CREDIT_BUREAU_SCORE, CREDIT_BUREAU_SCORE_DT, CREDIT_RATING_CD,
 CURRENCY_CD, DELINQUENT_FLG, DOMESTIC_CURRENCY_CD, DRIVER_LICENSE_ID,
 DRIVERS_LIC_EXPIRATION_DT, ECONOMIC_SECTOR_CD, EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM, EMPLOYEE_ID, FINANCIAL_ASSOCIATE_RK,
 FORECLOSED_FLG, HIGH_RISK_CATEGORY_FLG, HOUSEHOLD_RK, INTERNAL_ORG_RK, LEGAL_JUDGEMENT_FLG, MODEL_RK,
 PASSPORT_EXPIRATION_DT, PENDING_LAWSUIT_FLG, POSTAL_CD, PRIM_BRANCH_FINANCIAL_UNIT_RK, REGLTRY_COUNTERPARTY_TYPE_CD,
 RISK_WEIGHT_PCT, SEC_BRANCH_FINANCIAL_UNIT_RK, SECNDRY_CITIZENSHIP_COUNTRY_CD, STATE_REGION_CD, TOTAL_LIABILITY_AMT,
 VALID_FROM_DTTM, VALID_TO_DTTM
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

2931       
2932       proc sql;
2933          create view work.W5GIMDWJ as
2934             select
2935                COPY_RMEXTRACT.RM_ADDR_LINE_1 as ADDRESS_LINE_1_TXT length = 100
2936                                                                    label = 'Address Line 1 Text',
2937                COPY_RMEXTRACT.RM_ADDR_LINE_2 as ADDRESS_LINE_2_TXT length = 100
2938                                                                    label = 'Address Line 2 Text',
2939                COPY_RMEXTRACT.RM_ADDR_LINE_3 as ADDRESS_LINE_3_TXT length = 100
2940                                                                    label = 'Address Line 3 Text',
2941                COPY_RMEXTRACT.RM_ADDR_LINE_4 as ADDRESS_LINE_4_TXT length = 100
2942                                                                    label = 'Address Line 4 Text',
2943                "" as ADDRESS_TYPE_CD length = 3
2944                                      label = 'Address Type Code',
2945                . as ANNUAL_INCOME_AMT length = 8
2946                                       format = NLNUM18.5
2947                                       informat = NLNUM18.5
2948                                       label = 'Annual Income Amount',
2949                "" as ASSOCIATE_COUNTERPARTY_ID length = 32,
2950                . as BANKRUPTCY_FILED_DT length = 8
2951                                         format = DATE9.
2952                                         informat = DATE9.
2953                                         label = 'Bankruptcy Filed Date',
2954                "" as BANKRUPTCY_STATUS_CD length = 3
2955                                           label = 'Bankruptcy Status Code',
2956                COPY_RMEXTRACT.RM_ADDR_CITY as CITY_NM length = 100
2957                                                       label = 'City Name',
2958                "" as CORE_MKT_PARTICIPANT_FLG length = 1
2959                                               label = 'Core Mkt Participant Flag',
2960                "" as COUNTERPARTY_ASSOC_TYPE_CD length = 10
2961                                                 label = 'Equity Instrument Type Code',
2962                COPY_RMEXTRACT.RM_GROUP_CD as COUNTERPARTY_GROUP_ID length = 32
2963                                                                    label = 'Counterparty Group Id',
2964                "" as COUNTERPARTY_GROUP_PARENT_FLG length = 1
2965                                                    label = 'Counterparty Group Parent Flag',
2966                put(AMXUCF00_WRM.REPL_ID, $CUST_LOOKUP2_.) as COUNTERPARTY_ID length = 26
2967                                                                              label = 'Counterparty Key',
2968                "" as COUNTERPARTY_RLN_TYPE_CD length = 3
2969                                               label = 'Counterparty Relationship Type Code',
2970                "" as COUNTERPARTY_TYPE_CD length = 3
2971                                           label = 'Counterparty Type Code',
2972                "" as COUNTRY_CD length = 3
2973                                 label = 'Country Code',
2974                "" as COUNTRY_OF_RESIDENCY_CD length = 3
2975                                              label = 'Country Of Residency Code',
2976                . as CREDIT_BUREAU_SCORE length = 8
75                                                         The SAS System                                19:16 Friday, April 4, 2008

2977                                         format = NLNUM8.2
2978                                         informat = NLNUM8.2
2979                                         label = 'Credit Bureau Score',
2980                . as CREDIT_BUREAU_SCORE_DT length = 8
2981                                            format = DATE9.
2982                                            informat = DATE9.
2983                                            label = 'Credit Bureau Score Date',
2984                "" as CREDIT_RATING_CD length = 20
2985                                       label = 'Credit Rating Code',
2986                "" as CURRENCY_CD length = 3
2987                                  label = 'Currency Code',
2988                "IND" as CUSTOMER_TYPE_CD length = 3
2989                                          label = 'Customer Type Code',
2990                "" as DELINQUENT_FLG length = 1
2991                                     label = 'Delinquent Flag',
2992                COPY_RMEXTRACT.RM_ADDR_ST as DISTRICT_NM length = 40
2993                                                         label = 'District Name',
2994                "" as DOMESTIC_CURRENCY_CD length = 3
2995                                           label = 'Currency Code',
2996                "" as DRIVER_LICENSE_ID length = 32
2997                                        label = 'Driver License ID',
2998                . as DRIVERS_LIC_EXPIRATION_DT length = 8
2999                                               format = DATE9.
3000                                               informat = DATE9.
3001                                               label = 'Drivers License Expiration Date',
3002                "" as ECONOMIC_SECTOR_CD length = 3
3003                                         label = 'Economic Sector Code',
3004                . as EFFECTIVE_FROM_DTTM length = 8
3005                                         format = NLDATM21.
3006                                         informat = NLDATM21.
3007                                         label = 'Effective From Datetime',
3008                . as EFFECTIVE_TO_DTTM length = 8
3009                                       format = NLDATM21.
3010                                       informat = NLDATM21.
3011                                       label = 'Effective To Datetime',
3012                "" as EMPLOYEE_ID length = 32
3013                                  label = 'Employee Key',
3014                . as FINANCIAL_ASSOCIATE_RK length = 8
3015                                            format = 12.
3016                                            informat = 12.
3017                                            label = 'Financial Associate Key',
3018                COPY_RMEXTRACT.RM_1ST_NAME as FIRST_NM length = 40
3019                                                       label = 'First Name',
3020                "" as FORECLOSED_FLG length = 1
3021                                     label = 'Foreclosed Flag',
3022                "" as HIGH_RISK_CATEGORY_FLG length = 1
3023                                             label = 'High Risk Category Flag',
3024                . as HOUSEHOLD_RK length = 8
3025                                  format = 12.
3026                                  informat = 12.
3027                                  label = 'Household Key',
3028                "IND" as IND_CORP_TYPE length = 3,
3029                "01" as IND_EXTENRAL_CUST_TYPE length = 2,
3030                . as INTERNAL_ORG_RK length = 8
3031                                     format = 12.
3032                                     informat = 12.
3033                                     label = 'Internal Organization Key',
3034                COPY_RMEXTRACT.RM_LST_NAME as LAST_NM length = 40
76                                                         The SAS System                                19:16 Friday, April 4, 2008

3035                                                      label = 'Last Name',
3036                "" as LEGAL_JUDGEMENT_FLG length = 1
3037                                          label = 'Legal Judgement Flag',
3038                substr(COPY_RMEXTRACT.RM_MID_NAME,1,1) as MIDDLE_INITIALS length = 20
3039                                                                          label = 'Middle Initials',
3040                COPY_RMEXTRACT.RM_MID_NAME as MIDDLE_NM length = 40
3041                                                        label = 'Middle Name',
3042                . as MODEL_RK length = 8
3043                              format = 12.
3044                              informat = 12.
3045                              label = 'Model Key',
3046                COPY_RMEXTRACT.RM_NAME_SUFFIX as NM_SUFFIX_TXT length = 40
3047                                                               label = 'Name Suffix',
3048                . as PASSPORT_EXPIRATION_DT length = 8
3049                                            format = DATE9.
3050                                            informat = DATE9.
3051                                            label = 'Passport Expiration Date',
3052                COPY_RMEXTRACT.RM_PASSPORT_NO as PASSPORT_NO length = 32
3053                                                             label = 'Passport No',
3054                "" as PENDING_LAWSUIT_FLG length = 1
3055                                          label = 'Pending Lawsuit Flag',
3056                "" as POSTAL_CD length = 20
3057                                label = 'Postal Code',
3058                . as PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8
3059                                                   format = 12.
3060                                                   informat = 12.
3061                                                   label = 'Primary Branch Financial Unit Key',
3062                datetime() as PROCESSED_DTTM length = 8
3063                                             format = NLDATM21.
3064                                             informat = NLDATM21.
3065                                             label = 'Processed Datetime',
3066                "" as REGLTRY_COUNTERPARTY_TYPE_CD length = 3
3067                                                   label = 'Basel Portfolio Code',
3068                AMXUCF00_WRM.REPL_ID length = 32,
3069                . as RISK_WEIGHT_PCT length = 8
3070                                     format = NLNUM9.4
3071                                     informat = NLNUM9.4
3072                                     label = 'Risk Weight Percent',
3073                propcase(COPY_RMEXTRACT.RM_ADDR_CTRY) as RM_ADDR_CTRY length = 20,
3074                COPY_RMEXTRACT.RM_ADDR_TYPE_CD length = 3,
3075                COPY_RMEXTRACT.RM_ADDR_ZIPCD length = 10,
3076                COPY_RMEXTRACT.RM_BORROWER_CD length = 6,
3077                COPY_RMEXTRACT.RM_DOSRI_CD length = 1,
3078                COPY_RMEXTRACT.RM_INDUSTRY_CLASS length = 6,
3079                AMXUCF00_WRM.RMID length = 30,
3080                input(COPY_RMEXTRACT.RM_SALUTATION,$20.) as SALUTATION_NM length = 20
3081                                                                          label = 'Salutation Name',
3082                . as SEC_BRANCH_FINANCIAL_UNIT_RK length = 8
3083                                                  format = 12.
3084                                                  informat = 12.
3085                                                  label = 'Secondary Branch Financial Unit Key',
3086                "" as SECNDRY_CITIZENSHIP_COUNTRY_CD length = 3
3087                                                     label = 'Country Code',
3088                COPY_RMEXTRACT.RM_SSS_NO as SOCIAL_SECURITY_NO length = 20
3089                                                               label = 'Social Security No',
3090                "RM" as SOURCE_SYSTEM_CD length = 3
3091                                         label = 'Source System Code',
3092                "" as STATE_REGION_CD length = 4
77                                                         The SAS System                                19:16 Friday, April 4, 2008

3093                                      label = 'State Region Code',
3094                case when COPY_RMEXTRACT.RM_TIN is null then '888888888'
3095                else COPY_RMEXTRACT.RM_TIN  end as TAX_ID length = 32
3096                                                          label = 'Tax Id',
3097                "TIN" as TAX_ID_TYPE_CD length = 3
3098                                        label = 'Tax Id Type Code',
3099                "TIN" as TAX_STATUS_CD length = 3
3100                                       label = 'Tax Status Code',
3101                input(COPY_RMEXTRACT.RM_TITLE ,$20.) as TITLE_TXT length = 20
3102                                                                  label = 'Title Text',
3103       
3104                case when COPY_RMEXTRACT.RM_FIRM_SIZE eq 'L' then 101000000
3105                when COPY_RMEXTRACT.RM_FIRM_SIZE eq 'M' then 100000000
3106                when COPY_RMEXTRACT.RM_FIRM_SIZE eq 'N' then 3000000
3107                when COPY_RMEXTRACT.RM_FIRM_SIZE eq 'S' then 15000000 else 0 end
3108                 as TOTAL_ASSET_AMT length = 8
3109                                    format = NLNUM18.5
3110                                    informat = NLNUM18.5
3111                                    label = 'Total Asset Amount',
3112                . as TOTAL_LIABILITY_AMT length = 8
3113                                         format = NLNUM18.5
3114                                         informat = NLNUM18.5
3115                                         label = 'Total Liability Amount',
3116                . as VALID_FROM_DTTM length = 8
3117                                     format = NLDATM21.
3118                                     informat = NLDATM21.
3119                                     label = 'Valid From Datetime',
3120                . as VALID_TO_DTTM length = 8
3121                                   format = NLDATM21.
3122                                   informat = NLDATM21.
3123                                   label = 'Valid To Datetime'
3124             from
3125                work.AMXUCF00_WRM left join
3126                COPY.COPY_RMEXTRACT
3127                   on
3128                   (
3129                      AMXUCF00_WRM.RMID = compress(COPY_RMEXTRACT.RM_CTL_1  || COPY_RMEXTRACT.RM_CTL_2  ||
3129     ! COPY_RMEXTRACT.RM_CTL_3  || COPY_RMEXTRACT.RM_CTL_4  || COPY_RMEXTRACT.RM_NO )
3130                   )
3131             where
3132                COPY_RMEXTRACT.RM_CUST_TYPE = "P"
3133             ;
NOTE: SQL view WORK.W5GIMDWJ has been defined.
3134       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3135       
3136       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
78                                                         The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
3137       
3138       /*============================================================================*
3139        * Step:          WRM Lookup                                A5SFKZBN.BS000U9D *
3140        * Transform:     Lookup                                                      *
3141        * Description:                                                               *
3142        *                                                                            *
3143        * Source Tables: SQL Target - work.W5GIMDWJ                A5SFKZBN.BQ000RYK *
3144        *                STG_REF_ADDRESS_TYPE_CD -                 A5SFKZBN.BK000717 *
3145        *                 STAGING.STG_REF_ADDRESS_TYPE_CD                            *
3146        *                STG_REF_COUNTERPARTY_TYPE_CD -            A5SFKZBN.BK0007QH *
3147        *                 STAGING.STG_REF_COUNTERPARTY_TYPE_CD                       *
3148        *                STG_REF_COUNTRY_CD -                      A5SFKZBN.BK00071C *
3149        *                 STAGING.STG_REF_COUNTRY_CD                                 *
3150        *                STG_REF_DOSRI_CD -                        A5SFKZBN.BK00071I *
3151        *                 STAGING.STG_REF_DOSRI_CD                                   *
3152        *                STG_REF_REGULATORY_CNTRPRTY_CD -          A5SFKZBN.BK00071V *
3153        *                 STAGING.STG_REF_REGULATORY_CNTRPRTY_CD                     *
3154        *                STG_REF_POSTAL_CD -                       A5SFKZBN.BK0007QG *
3155        *                 STAGING.STG_REF_POSTAL_CD                                  *
3156        *                STG_REF_INDUSTRY_TYPE_CD -                A5SFKZBN.BK00071J *
3157        *                 STAGING.STG_REF_INDUSTRY_TYPE_CD                           *
3158        * Target Table:  Lookup Target - work.W5GWKEDS             A5SFKZBN.BQ000RY6 *
3159        *============================================================================*/
3160       
3161       %let transformID = %quote(A5SFKZBN.BS000U9D);
3162       
3163       %let trans_rc = 0;
3164       
3165       /* make the runTime macro variable to store the run time of the job  */
3166       %let runTime = %sysfunc(datetime(), );
3167       
3168       proc datasets lib = work nolist nowarn memtype = (data view);
3169          delete W5GWKEDS;
3170       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3171       
3172       proc datasets lib = work nolist nowarn memtype = (data view);
3173          delete etls_temp_lookupview0;
3174       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW0 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3175       
3176       proc sql;
3176     !           create view etls_temp_lookupview0 as
3177          select * from STAGING.STG_REF_ADDRESS_TYPE_CD
79                                                         The SAS System                                19:16 Friday, April 4, 2008

3178          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW0 has been defined.
3179       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3180       /* Creating view to eliminate column name collisions for lookup table  */
3181       /*  STAGING.STG_REF_COUNTRY_CD                                         */
3182       proc datasets lib = work nolist nowarn memtype = (data view);
3183          delete etls_temp_lookupview1;
3184       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW1 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3185       
3186       proc sql;
3186     !           create view etls_temp_lookupview1 as
3187          select
3188             STANDARD_CODE as ETLS_W5JCO6XA,
3189             STANDARD_CODE as ETLS_W5JCO6XK,
3190             STANDARD_CODE as ETLS_W5JCO6XU,
3191             CURRENCY_CD,
3192             CURRENCY_CD,
3193             SOURCE,
3194             CODE_DESCRIPTION
3195          from STAGING.STG_REF_COUNTRY_CD
3196       quit;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW1 has been defined.
3197       /* Creating view to eliminate column name collisions for lookup table  */
3198       /*  STAGING.STG_REF_DOSRI_CD                                           */
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3199       proc datasets lib = work nolist nowarn memtype = (data view);
3200          delete etls_temp_lookupview2;
3201       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW2 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3202       
3203       proc sql;
3203     !           create view etls_temp_lookupview2 as
3204          select
3205             STANDARD_CODE as ETLS_W5JCO72A,
3206             SOURCE,
3207             SOURCE_CODE
80                                                         The SAS System                                19:16 Friday, April 4, 2008

3208          from STAGING.STG_REF_DOSRI_CD
3209          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW2 has been defined.
3210       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3211       /* Creating view to eliminate column name collisions for lookup table  */
3212       /*  STAGING.STG_REF_COUNTERPARTY_TYPE_CD                               */
3213       proc datasets lib = work nolist nowarn memtype = (data view);
3214          delete etls_temp_lookupview3;
3215       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW3 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3216       
3217       proc sql;
3217     !           create view etls_temp_lookupview3 as
3218          select
3219             STANDARD_CODE as ETLS_W5JCO73O,
3220             SOURCE,
3221             SOURCE_CODE
3222          from STAGING.STG_REF_COUNTERPARTY_TYPE_CD
3223          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW3 has been defined.
3224       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3225       /* Creating view to eliminate column name collisions for lookup table  */
3226       /*  STAGING.STG_REF_POSTAL_CD                                          */
3227       proc datasets lib = work nolist nowarn memtype = (data view);
3228          delete etls_temp_lookupview4;
3229       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW4 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3230       
3231       proc sql;
3231     !           create view etls_temp_lookupview4 as
3232          select
3233             STANDARD_CODE as ETLS_W5JCO74S,
3234             SOURCE,
3235             SOURCE_CODE
3236          from STAGING.STG_REF_POSTAL_CD
3237          where VALID_TO eq .;
81                                                         The SAS System                                19:16 Friday, April 4, 2008

NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW4 has been defined.
3238       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3239       /* Creating view to eliminate column name collisions for lookup table  */
3240       /*  STAGING.STG_REF_INDUSTRY_TYPE_CD                                   */
3241       proc datasets lib = work nolist nowarn memtype = (data view);
3242          delete etls_temp_lookupview5;
3243       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW5 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3244       
3245       proc sql;
3245     !           create view etls_temp_lookupview5 as
3246          select
3247             STANDARD_CODE as ETLS_W5JCO75M,
3248             SOURCE,
3249             SOURCE_CODE
3250          from STAGING.STG_REF_INDUSTRY_TYPE_CD
3251          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW5 has been defined.
3252       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3253       /* Creating view to eliminate column name collisions for lookup table  */
3254       /*  STAGING.STG_REF_REGULATORY_CNTRPRTY_CD                             */
3255       proc datasets lib = work nolist nowarn memtype = (data view);
3256          delete etls_temp_lookupview6;
3257       quit;

NOTE: Deleting WORK.ETLS_TEMP_LOOKUPVIEW6 (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3258       
3259       proc sql;
3259     !           create view etls_temp_lookupview6 as
3260          select
3261             STANDARD_CODE as ETLS_W5JCO766,
3262             SOURCE,
3263             SOURCE_CODE
3264          from STAGING.STG_REF_REGULATORY_CNTRPRTY_CD
3265          where VALID_TO eq .;
NOTE: SQL view WORK.ETLS_TEMP_LOOKUPVIEW6 has been defined.
3266       quit;
82                                                         The SAS System                                19:16 Friday, April 4, 2008

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3267       /*---- Begin DATA step to perform lookups  ----*/
3268       DATA  work.W5GWKEDS
3269                (keep = ADDRESS_LINE_1_TXT ADDRESS_LINE_2_TXT ADDRESS_LINE_3_TXT
3270                        ADDRESS_LINE_4_TXT ADDRESS_TYPE_CD ANNUAL_INCOME_AMT
3271                        ASSOCIATE_COUNTERPARTY_ID BANKRUPTCY_FILED_DT
3272                        BANKRUPTCY_STATUS_CD CITY_NM CORE_MKT_PARTICIPANT_FLG
3273                        COUNTERPARTY_ASSOC_TYPE_CD COUNTERPARTY_GROUP_ID
3274                        COUNTERPARTY_GROUP_PARENT_FLG COUNTERPARTY_ID
3275                        COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD COUNTRY_CD
3276                        COUNTRY_OF_RESIDENCY_CD CREDIT_BUREAU_SCORE
3277                        CREDIT_BUREAU_SCORE_DT CREDIT_RATING_CD CURRENCY_CD
3278                        CUSTOMER_TYPE_CD DELINQUENT_FLG DISTRICT_NM
3279                        DOMESTIC_CURRENCY_CD DRIVER_LICENSE_ID
3280                        DRIVERS_LIC_EXPIRATION_DT ECONOMIC_SECTOR_CD
3281                        EFFECTIVE_FROM_DTTM EFFECTIVE_TO_DTTM EMPLOYEE_ID
3282                        FINANCIAL_ASSOCIATE_RK FIRST_NM FORECLOSED_FLG
3283                        HIGH_RISK_CATEGORY_FLG HOUSEHOLD_RK IND_CORP_TYPE
3284                        IND_EXTENRAL_CUST_TYPE INTERNAL_ORG_RK LAST_NM
3285                        LEGAL_JUDGEMENT_FLG MIDDLE_INITIALS MIDDLE_NM MODEL_RK
3286                        NM_SUFFIX_TXT PASSPORT_EXPIRATION_DT PASSPORT_NO
3287                        PENDING_LAWSUIT_FLG POSTAL_CD PRIM_BRANCH_FINANCIAL_UNIT_RK
3288                        PROCESSED_DTTM REGLTRY_COUNTERPARTY_TYPE_CD REPL_ID
3289                        RISK_WEIGHT_PCT RM_ADDR_CTRY RM_ADDR_TYPE_CD RM_ADDR_ZIPCD
3290                        RM_BORROWER_CD RM_DOSRI_CD RM_INDUSTRY_CLASS RMID SALUTATION_NM
3291                        SEC_BRANCH_FINANCIAL_UNIT_RK SECNDRY_CITIZENSHIP_COUNTRY_CD
3292                        SOCIAL_SECURITY_NO SOURCE_SYSTEM_CD STATE_REGION_CD TAX_ID
3293                        TAX_ID_TYPE_CD TAX_STATUS_CD TITLE_TXT TOTAL_ASSET_AMT
3294                        TOTAL_LIABILITY_AMT VALID_FROM_DTTM VALID_TO_DTTM)
3295             ;
3296       
3297          attrib ADDRESS_LINE_1_TXT length=$100 label="Address Line 1 Text"
3298                 ADDRESS_LINE_2_TXT length=$100 label="Address Line 2 Text"
3299                 ADDRESS_LINE_3_TXT length=$100 label="Address Line 3 Text"
3300                 ADDRESS_LINE_4_TXT length=$100 label="Address Line 4 Text"
3301                 ADDRESS_TYPE_CD length=$3 label="Address Type Code"
3302                 ANNUAL_INCOME_AMT length=8 format=NLNUM18.5 label="Annual Income Amount"
3303                 ASSOCIATE_COUNTERPARTY_ID length=$32
3304                 BANKRUPTCY_FILED_DT length=8 format=DATE9. label="Bankruptcy Filed Date"
3305                 BANKRUPTCY_STATUS_CD length=$3 label="Bankruptcy Status Code"
3306                 CITY_NM length=$100 label="City Name"
3307                 CORE_MKT_PARTICIPANT_FLG length=$1 label="Core Mkt Participant Flag"
3308                 COUNTERPARTY_ASSOC_TYPE_CD length=$10 label="Equity Instrument Type Code"
3309                 COUNTERPARTY_GROUP_ID length=$32 label="Counterparty Group Id"
3310                 COUNTERPARTY_GROUP_PARENT_FLG length=$1 label="Counterparty Group Parent Flag"
3311                 COUNTERPARTY_ID length=$26 label="Counterparty Key"
3312                 COUNTERPARTY_RLN_TYPE_CD length=$3 label="Counterparty Relationship Type Code"
3313                 COUNTERPARTY_TYPE_CD length=$3 label="Counterparty Type Code"
3314                 COUNTRY_CD length=$3 label="Country Code"
3315                 COUNTRY_OF_RESIDENCY_CD length=$3 label="Country Of Residency Code"
3316                 CREDIT_BUREAU_SCORE length=8 format=NLNUM8.2 label="Credit Bureau Score"
3317                 CREDIT_BUREAU_SCORE_DT length=8 format=DATE9. label="Credit Bureau Score Date"
3318                 CREDIT_RATING_CD length=$20 label="Credit Rating Code"
3319                 CURRENCY_CD length=$3 label="Currency Code"
83                                                         The SAS System                                19:16 Friday, April 4, 2008

3320                 CUSTOMER_TYPE_CD length=$3 label="Customer Type Code"
3321                 DELINQUENT_FLG length=$1 label="Delinquent Flag"
3322                 DISTRICT_NM length=$40 label="District Name"
3323                 DOMESTIC_CURRENCY_CD length=$3 label="Currency Code"
3324                 DRIVER_LICENSE_ID length=$32 label="Driver License ID"
3325                 DRIVERS_LIC_EXPIRATION_DT length=8 format=DATE9. label="Drivers License Expiration Date"
3326                 ECONOMIC_SECTOR_CD length=$3 label="Economic Sector Code"
3327                 EFFECTIVE_FROM_DTTM length=8 format=NLDATM21. label="Effective From Datetime"
3328                 EFFECTIVE_TO_DTTM length=8 format=NLDATM21. label="Effective To Datetime"
3329                 EMPLOYEE_ID length=$32 label="Employee Key"
3330                 FINANCIAL_ASSOCIATE_RK length=8 format=12. label="Financial Associate Key"
3331                 FIRST_NM length=$40 label="First Name"
3332                 FORECLOSED_FLG length=$1 label="Foreclosed Flag"
3333                 HIGH_RISK_CATEGORY_FLG length=$1 label="High Risk Category Flag"
3334                 HOUSEHOLD_RK length=8 format=12. label="Household Key"
3335                 IND_CORP_TYPE length=$3
3336                 IND_EXTENRAL_CUST_TYPE length=$2
3337                 INTERNAL_ORG_RK length=8 format=12. label="Internal Organization Key"
3338                 LAST_NM length=$40 label="Last Name"
3339                 LEGAL_JUDGEMENT_FLG length=$1 label="Legal Judgement Flag"
3340                 MIDDLE_INITIALS length=$20 label="Middle Initials"
3341                 MIDDLE_NM length=$40 label="Middle Name"
3342                 MODEL_RK length=8 format=12. label="Model Key"
3343                 NM_SUFFIX_TXT length=$40 label="Name Suffix"
3344                 PASSPORT_EXPIRATION_DT length=8 format=DATE9. label="Passport Expiration Date"
3345                 PASSPORT_NO length=$32 label="Passport No"
3346                 PENDING_LAWSUIT_FLG length=$1 label="Pending Lawsuit Flag"
3347                 POSTAL_CD length=$20 label="Postal Code"
3348                 PRIM_BRANCH_FINANCIAL_UNIT_RK length=8 format=12. label="Primary Branch Financial Unit Key"
3349                 PROCESSED_DTTM length=8 format=NLDATM21. label="Processed Datetime"
3350                 REGLTRY_COUNTERPARTY_TYPE_CD length=$3 label="Basel Portfolio Code"
3351                 REPL_ID length=$32
3352                 RISK_WEIGHT_PCT length=8 format=NLNUM9.4 label="Risk Weight Percent"
3353                 RM_ADDR_CTRY length=$20
3354                 RM_ADDR_TYPE_CD length=$3
3355                 RM_ADDR_ZIPCD length=$10
3356                 RM_BORROWER_CD length=$6
3357                 RM_DOSRI_CD length=$1
3358                 RM_INDUSTRY_CLASS length=$6
3359                 RMID length=$30
3360                 SALUTATION_NM length=$20 label="Salutation Name"
3361                 SEC_BRANCH_FINANCIAL_UNIT_RK length=8 format=12. label="Secondary Branch Financial Unit Key"
3362                 SECNDRY_CITIZENSHIP_COUNTRY_CD length=$3 label="Country Code"
3363                 SOCIAL_SECURITY_NO length=$20 label="Social Security No"
3364                 SOURCE_SYSTEM_CD length=$3 label="Source System Code"
3365                 STATE_REGION_CD length=$4 label="State Region Code"
3366                 TAX_ID length=$32 label="Tax Id"
3367                 TAX_ID_TYPE_CD length=$3 label="Tax Id Type Code"
3368                 TAX_STATUS_CD length=$3 label="Tax Status Code"
3369                 TITLE_TXT length=$20 label="Title Text"
3370                 TOTAL_ASSET_AMT length=8 format=NLNUM18.5 label="Total Asset Amount"
3371                 TOTAL_LIABILITY_AMT length=8 format=NLNUM18.5 label="Total Liability Amount"
3372                 VALID_FROM_DTTM length=8 format=NLDATM21. label="Valid From Datetime"
3373                 VALID_TO_DTTM length=8 format=NLDATM21. label="Valid To Datetime"
3374                 STANDARD_CODE length= $3
3375                 SOURCE length= $3
3376                 SOURCE_CODE length= $11
3377                 ETLS_W5JCO6XA length= $3
84                                                         The SAS System                                19:16 Friday, April 4, 2008

3378                 ETLS_W5JCO6XK length= $3
3379                 ETLS_W5JCO6XU length= $3
3380                 CODE_DESCRIPTION length= $100
3381                 ETLS_W5JCO72A length= $3
3382                 ETLS_W5JCO73O length= $3
3383                 ETLS_W5JCO74S length= $3
3384                 ETLS_W5JCO75M length= $3
3385                 ETLS_W5JCO766 length= $3
3386                 ;
3387       
3388          retain missing0-missing6 0;
3389       
3390          /* Build hash objects from lookup tables before reading first source row  */
3391          if (_n_ = 1) then
3392          do;
3393             /* Build hash h0 from lookup table etls_temp_lookupview0 */
3394             nlobs = .;
3395             dsid = open("etls_temp_lookupview0");
3396             if (dsid > 0) then
3397             do;
3398                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3399                   nlobs = attrn(dsid, 'NLOBS');
3400                else
3401                   nlobs = -1;
3402       
3403                dsid = close(dsid);
3404                if (nlobs ^= 0) then
3405                do;
3406                   if (nlobs > 0) then
3407                      exponent = ceil(log2(nlobs));
3408                   else
3409                      exponent = 8;
3410                   declare hash h0(dataset: "etls_temp_lookupview0", hashexp: exponent);
3411                   h0.defineKey( "SOURCE",
3412                                  "SOURCE_CODE");
3413                   h0.defineData( "STANDARD_CODE");
3414                   h0.defineDone();
3415                   if (nlobs = -1) then
3416                   do;
3417                      if (h0.Num_Items < 1) then
3418                      do;
3419                         put "NOTE: Lookup table is empty: etls_temp_lookupview0";
3420                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3421                              " etls_temp_lookupview0";
3422       
3423                         abort 3;
3424                      end;
3425                   end;
3426                end;
3427                else
3428                do;
3429                   put "NOTE: Lookup table is empty: etls_temp_lookupview0";
3430                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3431                        " etls_temp_lookupview0";
3432       
3433                   abort 3;
3434                end;
3435             end;
85                                                         The SAS System                                19:16 Friday, April 4, 2008

3436             else
3437             do;
3438                put "NOTE: Lookup table does not exist or cannot be opened:"
3439                     " etls_temp_lookupview0";
3440       
3441                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3442                     " etls_temp_lookupview0";
3443       
3444                abort 3;
3445             end;
3446       
3447             /* Build hash h1 from lookup table etls_temp_lookupview1 */
3448             nlobs = .;
3449             dsid = open("etls_temp_lookupview1");
3450             if (dsid > 0) then
3451             do;
3452                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3453                   nlobs = attrn(dsid, 'NLOBS');
3454                else
3455                   nlobs = -1;
3456       
3457                dsid = close(dsid);
3458                if (nlobs ^= 0) then
3459                do;
3460                   if (nlobs > 0) then
3461                      exponent = ceil(log2(nlobs));
3462                   else
3463                      exponent = 8;
3464                   declare hash h1(dataset: "etls_temp_lookupview1", hashexp: exponent);
3465                   h1.defineKey( "SOURCE",
3466                                  "CODE_DESCRIPTION");
3467                   h1.defineData( "ETLS_W5JCO6XA",
3468                                  "ETLS_W5JCO6XK",
3469                                  "ETLS_W5JCO6XU",
3470                                  "CURRENCY_CD",
3471                                  "CURRENCY_CD");
3472                   h1.defineDone();
3473                   if (nlobs = -1) then
3474                   do;
3475                      if (h1.Num_Items < 1) then
3476                      do;
3477                         put "NOTE: Lookup table is empty: etls_temp_lookupview1";
3478                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3479                              " etls_temp_lookupview1";
3480       
3481                         abort 3;
3482                      end;
3483                   end;
3484                end;
3485                else
3486                do;
3487                   put "NOTE: Lookup table is empty: etls_temp_lookupview1";
3488                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3489                        " etls_temp_lookupview1";
3490       
3491                   abort 3;
3492                end;
3493             end;
86                                                         The SAS System                                19:16 Friday, April 4, 2008

3494             else
3495             do;
3496                put "NOTE: Lookup table does not exist or cannot be opened:"
3497                     " etls_temp_lookupview1";
3498       
3499                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3500                     " etls_temp_lookupview1";
3501       
3502                abort 3;
3503             end;
3504       
3505             /* Build hash h2 from lookup table etls_temp_lookupview2 */
3506             nlobs = .;
3507             dsid = open("etls_temp_lookupview2");
3508             if (dsid > 0) then
3509             do;
3510                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3511                   nlobs = attrn(dsid, 'NLOBS');
3512                else
3513                   nlobs = -1;
3514       
3515                dsid = close(dsid);
3516                if (nlobs ^= 0) then
3517                do;
3518                   if (nlobs > 0) then
3519                      exponent = ceil(log2(nlobs));
3520                   else
3521                      exponent = 8;
3522                   declare hash h2(dataset: "etls_temp_lookupview2", hashexp: exponent);
3523                   h2.defineKey( "SOURCE",
3524                                  "SOURCE_CODE");
3525                   h2.defineData( "ETLS_W5JCO72A");
3526                   h2.defineDone();
3527                   if (nlobs = -1) then
3528                   do;
3529                      if (h2.Num_Items < 1) then
3530                      do;
3531                         put "NOTE: Lookup table is empty: etls_temp_lookupview2";
3532                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3533                              " etls_temp_lookupview2";
3534       
3535                         abort 3;
3536                      end;
3537                   end;
3538                end;
3539                else
3540                do;
3541                   put "NOTE: Lookup table is empty: etls_temp_lookupview2";
3542                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3543                        " etls_temp_lookupview2";
3544       
3545                   abort 3;
3546                end;
3547             end;
3548             else
3549             do;
3550                put "NOTE: Lookup table does not exist or cannot be opened:"
3551                     " etls_temp_lookupview2";
87                                                         The SAS System                                19:16 Friday, April 4, 2008

3552       
3553                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3554                     " etls_temp_lookupview2";
3555       
3556                abort 3;
3557             end;
3558       
3559             /* Build hash h3 from lookup table etls_temp_lookupview3 */
3560             nlobs = .;
3561             dsid = open("etls_temp_lookupview3");
3562             if (dsid > 0) then
3563             do;
3564                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3565                   nlobs = attrn(dsid, 'NLOBS');
3566                else
3567                   nlobs = -1;
3568       
3569                dsid = close(dsid);
3570                if (nlobs ^= 0) then
3571                do;
3572                   if (nlobs > 0) then
3573                      exponent = ceil(log2(nlobs));
3574                   else
3575                      exponent = 8;
3576                   declare hash h3(dataset: "etls_temp_lookupview3", hashexp: exponent);
3577                   h3.defineKey( "SOURCE",
3578                                  "SOURCE_CODE");
3579                   h3.defineData( "ETLS_W5JCO73O");
3580                   h3.defineDone();
3581                   if (nlobs = -1) then
3582                   do;
3583                      if (h3.Num_Items < 1) then
3584                      do;
3585                         put "NOTE: Lookup table is empty: etls_temp_lookupview3";
3586                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3587                              " etls_temp_lookupview3";
3588       
3589                         abort 3;
3590                      end;
3591                   end;
3592                end;
3593                else
3594                do;
3595                   put "NOTE: Lookup table is empty: etls_temp_lookupview3";
3596                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3597                        " etls_temp_lookupview3";
3598       
3599                   abort 3;
3600                end;
3601             end;
3602             else
3603             do;
3604                put "NOTE: Lookup table does not exist or cannot be opened:"
3605                     " etls_temp_lookupview3";
3606       
3607                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3608                     " etls_temp_lookupview3";
3609       
88                                                         The SAS System                                19:16 Friday, April 4, 2008

3610                abort 3;
3611             end;
3612       
3613             /* Build hash h4 from lookup table etls_temp_lookupview4 */
3614             nlobs = .;
3615             dsid = open("etls_temp_lookupview4");
3616             if (dsid > 0) then
3617             do;
3618                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3619                   nlobs = attrn(dsid, 'NLOBS');
3620                else
3621                   nlobs = -1;
3622       
3623                dsid = close(dsid);
3624                if (nlobs ^= 0) then
3625                do;
3626                   if (nlobs > 0) then
3627                      exponent = ceil(log2(nlobs));
3628                   else
3629                      exponent = 8;
3630                   declare hash h4(dataset: "etls_temp_lookupview4", hashexp: exponent);
3631                   h4.defineKey( "SOURCE",
3632                                  "SOURCE_CODE");
3633                   h4.defineData( "ETLS_W5JCO74S");
3634                   h4.defineDone();
3635                   if (nlobs = -1) then
3636                   do;
3637                      if (h4.Num_Items < 1) then
3638                      do;
3639                         put "NOTE: Lookup table is empty: etls_temp_lookupview4";
3640                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3641                              " etls_temp_lookupview4";
3642       
3643                         abort 3;
3644                      end;
3645                   end;
3646                end;
3647                else
3648                do;
3649                   put "NOTE: Lookup table is empty: etls_temp_lookupview4";
3650                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3651                        " etls_temp_lookupview4";
3652       
3653                   abort 3;
3654                end;
3655             end;
3656             else
3657             do;
3658                put "NOTE: Lookup table does not exist or cannot be opened:"
3659                     " etls_temp_lookupview4";
3660       
3661                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3662                     " etls_temp_lookupview4";
3663       
3664                abort 3;
3665             end;
3666       
3667             /* Build hash h5 from lookup table etls_temp_lookupview5 */
89                                                         The SAS System                                19:16 Friday, April 4, 2008

3668             nlobs = .;
3669             dsid = open("etls_temp_lookupview5");
3670             if (dsid > 0) then
3671             do;
3672                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3673                   nlobs = attrn(dsid, 'NLOBS');
3674                else
3675                   nlobs = -1;
3676       
3677                dsid = close(dsid);
3678                if (nlobs ^= 0) then
3679                do;
3680                   if (nlobs > 0) then
3681                      exponent = ceil(log2(nlobs));
3682                   else
3683                      exponent = 8;
3684                   declare hash h5(dataset: "etls_temp_lookupview5", hashexp: exponent);
3685                   h5.defineKey( "SOURCE",
3686                                  "SOURCE_CODE");
3687                   h5.defineData( "ETLS_W5JCO75M");
3688                   h5.defineDone();
3689                   if (nlobs = -1) then
3690                   do;
3691                      if (h5.Num_Items < 1) then
3692                      do;
3693                         put "NOTE: Lookup table is empty: etls_temp_lookupview5";
3694                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3695                              " etls_temp_lookupview5";
3696       
3697                         abort 3;
3698                      end;
3699                   end;
3700                end;
3701                else
3702                do;
3703                   put "NOTE: Lookup table is empty: etls_temp_lookupview5";
3704                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3705                        " etls_temp_lookupview5";
3706       
3707                   abort 3;
3708                end;
3709             end;
3710             else
3711             do;
3712                put "NOTE: Lookup table does not exist or cannot be opened:"
3713                     " etls_temp_lookupview5";
3714       
3715                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3716                     " etls_temp_lookupview5";
3717       
3718                abort 3;
3719             end;
3720       
3721             /* Build hash h6 from lookup table etls_temp_lookupview6 */
3722             nlobs = .;
3723             dsid = open("etls_temp_lookupview6");
3724             if (dsid > 0) then
3725             do;
90                                                         The SAS System                                19:16 Friday, April 4, 2008

3726                if ( attrc(dsid, 'MTYPE') = 'DATA' ) then
3727                   nlobs = attrn(dsid, 'NLOBS');
3728                else
3729                   nlobs = -1;
3730       
3731                dsid = close(dsid);
3732                if (nlobs ^= 0) then
3733                do;
3734                   if (nlobs > 0) then
3735                      exponent = ceil(log2(nlobs));
3736                   else
3737                      exponent = 8;
3738                   declare hash h6(dataset: "etls_temp_lookupview6", hashexp: exponent);
3739                   h6.defineKey( "SOURCE",
3740                                  "SOURCE_CODE");
3741                   h6.defineData( "ETLS_W5JCO766");
3742                   h6.defineDone();
3743                   if (nlobs = -1) then
3744                   do;
3745                      if (h6.Num_Items < 1) then
3746                      do;
3747                         put "NOTE: Lookup table is empty: etls_temp_lookupview6";
3748                         put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3749                              " etls_temp_lookupview6";
3750       
3751                         abort 3;
3752                      end;
3753                   end;
3754                end;
3755                else
3756                do;
3757                   put "NOTE: Lookup table is empty: etls_temp_lookupview6";
3758                   put "NOTE: Abort action indicated, condition= Lookup table is empty:"
3759                        " etls_temp_lookupview6";
3760       
3761                   abort 3;
3762                end;
3763             end;
3764             else
3765             do;
3766                put "NOTE: Lookup table does not exist or cannot be opened:"
3767                     " etls_temp_lookupview6";
3768       
3769                put "NOTE: Abort action indicated, condition= Lookup table missing:"
3770                     " etls_temp_lookupview6";
3771       
3772                abort 3;
3773             end;
3774       
3775             call missing (SOURCE, SOURCE_CODE, STANDARD_CODE, CODE_DESCRIPTION,
3776                           ETLS_W5JCO6XA, ETLS_W5JCO6XK, ETLS_W5JCO6XU, CURRENCY_CD,
3777                           ETLS_W5JCO72A, ETLS_W5JCO73O, ETLS_W5JCO74S, ETLS_W5JCO75M,
3778                           ETLS_W5JCO766);
3779       
3780          end; /* All hash objects have been defined */
3781       
3782          /* Read a row from the source table  */
3783          set work.W5GIMDWJ end = eof;
91                                                         The SAS System                                19:16 Friday, April 4, 2008

3784       
3785          /* Is the current key value stored in hash h0?  */
3786          SOURCE = SOURCE_SYSTEM_CD;
3787          SOURCE_CODE = RM_ADDR_TYPE_CD;
3788          rc0 = h0.find();
3789          ADDRESS_TYPE_CD = STANDARD_CODE;
3790       
3791          /* Is the current key value stored in hash h1?  */
3792          SOURCE = SOURCE_SYSTEM_CD;
3793          CODE_DESCRIPTION = RM_ADDR_CTRY;
3794          rc1 = h1.find();
3795          ASSOCIATE_COUNTERPARTY_ID = ETLS_W5JCO6XA;
3796          COUNTRY_CD = ETLS_W5JCO6XK;
3797          COUNTRY_OF_RESIDENCY_CD = ETLS_W5JCO6XU;
3798          DOMESTIC_CURRENCY_CD = CURRENCY_CD;
3799       
3800          /* Is the current key value stored in hash h2?  */
3801          SOURCE = SOURCE_SYSTEM_CD;
3802          SOURCE_CODE = RM_DOSRI_CD;
3803          rc2 = h2.find();
3804          COUNTERPARTY_RLN_TYPE_CD = ETLS_W5JCO72A;
3805       
3806          /* Is the current key value stored in hash h3?  */
3807          SOURCE = SOURCE_SYSTEM_CD;
3808          SOURCE_CODE = RM_BORROWER_CD;
3809          rc3 = h3.find();
3810          COUNTERPARTY_TYPE_CD = ETLS_W5JCO73O;
3811       
3812          /* Is the current key value stored in hash h4?  */
3813          SOURCE = SOURCE_SYSTEM_CD;
3814          SOURCE_CODE = RM_ADDR_ZIPCD;
3815          rc4 = h4.find();
3816          POSTAL_CD = ETLS_W5JCO74S;
3817       
3818          /* Is the current key value stored in hash h5?  */
3819          SOURCE = SOURCE_SYSTEM_CD;
3820          SOURCE_CODE = RM_INDUSTRY_CLASS;
3821          rc5 = h5.find();
3822          ECONOMIC_SECTOR_CD = ETLS_W5JCO75M;
3823       
3824          /* Is the current key value stored in hash h6?  */
3825          SOURCE = SOURCE_SYSTEM_CD;
3826          SOURCE_CODE = RM_BORROWER_CD;
3827          rc6 = h6.find();
3828          REGLTRY_COUNTERPARTY_TYPE_CD = ETLS_W5JCO766;
3829       
3830          /* Examine success of lookups  */
3831          if ( rc0=0 and rc1=0 and rc2=0 and rc3=0 and rc4=0 and rc5=0 and rc6=0 ) then
3832          do;
3833             /* Write row to target  */
3834             output work.W5GWKEDS;
3835             return;
3836          end;
3837          else
3838          do;
3839             error_total + 1;
3840       
3841             if (rc0 ^= 0) then
92                                                         The SAS System                                19:16 Friday, April 4, 2008

3842             do;
3843                exception_total + 1;
3844                /* Check: Lookup value not found-Set target columns to value  */
3845                ADDRESS_TYPE_CD="OTH";
3846                request_write_target = 1;
3847             end;
3848       
3849             if (rc1 ^= 0) then
3850             do;
3851                exception_total + 1;
3852                /* Check: Lookup value not found-Set target columns to value  */
3853                COUNTRY_CD ="OTH";
3854                COUNTRY_OF_RESIDENCY_CD ="OTH";
3855                CURRENCY_CD ="PHP";
3856                DOMESTIC_CURRENCY_CD  ="PHP";
3857                ASSOCIATE_COUNTERPARTY_ID ="PHL";
3858                request_write_target = 1;
3859             end;
3860       
3861             if (rc2 ^= 0) then
3862             do;
3863                exception_total + 1;
3864                /* Check: Lookup value not found-Set target columns to value  */
3865                COUNTERPARTY_RLN_TYPE_CD="NON";
3866                request_write_target = 1;
3867             end;
3868       
3869             if (rc3 ^= 0) then
3870             do;
3871                exception_total + 1;
3872                /* Check: Lookup value not found-Set target columns to value  */
3873                COUNTERPARTY_TYPE_CD="040";
3874                request_write_target = 1;
3875             end;
3876       
3877             if (rc4 ^= 0) then
3878             do;
3879                exception_total + 1;
3880                /* Check: Lookup value not found-Set target columns to value  */
3881                POSTAL_CD ="OTH";
3882                request_write_target = 1;
3883             end;
3884       
3885             if (rc5 ^= 0) then
3886             do;
3887                exception_total + 1;
3888                /* Check: Lookup value not found-Set target columns to value  */
3889                ECONOMIC_SECTOR_CD ="OTH";
3890                request_write_target = 1;
3891             end;
3892       
3893             if (rc6 ^= 0) then
3894             do;
3895                exception_total + 1;
3896                /* Check: Lookup value not found-Set target columns to value  */
3897                REGLTRY_COUNTERPARTY_TYPE_CD="040";
3898                request_write_target = 1;
3899             end;
93                                                         The SAS System                                19:16 Friday, April 4, 2008

3900       
3901             /* Set target columns to value/missing requested?  */
3902             if (request_write_target eq 1) then
3903                /* Write row to target  */
3904                output work.W5GWKEDS;
3905       
3906          end; /* One or more lookups failed */
3907       
3908          if (eof = 1) then
3909          do;
3910             put "Source records with errors: " error_total ;
3911             put "Total lookup exceptions: " exception_total ;
3912          end;
3913       
3914       run;

NOTE: There were 35 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW0.
NOTE: There were 3665 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW1.
NOTE: There were 30 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW2.
NOTE: There were 154 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW3.
NOTE: There were 13446 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW4.
NOTE: There were 7246 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW5.
NOTE: There were 177 observations read from the data set WORK.ETLS_TEMP_LOOKUPVIEW6.
Source records with errors: 16
Total lookup exceptions: 48
NOTE: There were 17 observations read from the data set WORK.AMXUCF00_WRM.
NOTE: There were 110799 observations read from the data set COPY.COPY_RMEXTRACT.
NOTE: There were 16 observations read from the data set WORK.W5GIMDWJ.
NOTE: The data set WORK.W5GWKEDS has 16 observations and 77 variables.
NOTE: DATA statement used (Total process time):
      real time           2.89 seconds
      cpu time            1.57 seconds
      

3915       
3916       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
3917       
3918       /*============================================================================*
3919        * Step:          Append                                    A5SFKZBN.BS000U97 *
3920        * Transform:     Append                                                      *
3921        * Description:                                                               *
3922        *                                                                            *
3923        * Source Tables: Splitter Target 2 - work.W5GWOI7C         A5SFKZBN.BQ000RYF *
3924        *                Splitter Target 2 - work.W5GWKEDS         A5SFKZBN.BQ000RY8 *
3925        * Target Table:  Append - work.W5HKAADN                    A5SFKZBN.BQ000RYG *
3926        *============================================================================*/
3927       
3928       %let transformID = %quote(A5SFKZBN.BS000U97);
94                                                         The SAS System                                19:16 Friday, April 4, 2008

3929       
3930       %let trans_rc = 0;
3931       
3932       proc datasets lib = work nolist nowarn memtype = (data view);
3933          delete W5HKAADN;
3934       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

3935       
3936       /*---- Map the columns  ----*/
3937       proc datasets lib = work nolist nowarn memtype = (data view);
3938          delete W5JCO6M0;
3939       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3940       
3941       data _null_;
3942          put "NOTE: The following column(s) do not have a column mapping, so the"
3943               " value(s) will be set to missing: ANNUAL_INCOME_AMT,"
3944               " BANKRUPTCY_FILED_DT, BANKRUPTCY_STATUS_CD, CORE_MKT_PARTICIPANT_FLG,"
3945               " COUNTERPARTY_ASSOC_TYPE_CD, COUNTERPARTY_GROUP_ID,"
3946               " COUNTERPARTY_GROUP_PARENT_FLG, CREDIT_BUREAU_SCORE,"
3947               " CREDIT_BUREAU_SCORE_DT, CREDIT_RATING_CD, DELINQUENT_FLG,"
3948               " DISTRICT_NM, DRIVER_LICENSE_ID, DRIVERS_LIC_EXPIRATION_DT,"
3949               " EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM, FINANCIAL_ASSOCIATE_RK,"
3950               " FORECLOSED_FLG, HIGH_RISK_CATEGORY_FLG, HOUSEHOLD_RK,"
3951               " INTERNAL_ORG_RK, LEGAL_JUDGEMENT_FLG, MODEL_RK, NM_SUFFIX_TXT,"
3952               " PASSPORT_EXPIRATION_DT, PASSPORT_NO, PENDING_LAWSUIT_FLG,"
3953               " PRIM_BRANCH_FINANCIAL_UNIT_RK, RISK_WEIGHT_PCT, RM_ADDR_CTRY,"
3954               " RM_ADDR_TYPE_CD, RM_ADDR_ZIPCD, RM_BORROWER_CD, RM_DOSRI_CD,"
3955               " RM_INDUSTRY_CLASS, RMID, SALUTATION_NM, SEC_BRANCH_FINANCIAL_UNIT_RK,"
3956               " SECNDRY_CITIZENSHIP_COUNTRY_CD, SOCIAL_SECURITY_NO, TITLE_TXT,"
3957               " TOTAL_LIABILITY_AMT, VALID_FROM_DTTM, VALID_TO_DTTM";
3958       run;

NOTE: The following column(s) do not have a column mapping, so the value(s) will be set to missing: ANNUAL_INCOME_AMT,
 BANKRUPTCY_FILED_DT, BANKRUPTCY_STATUS_CD, CORE_MKT_PARTICIPANT_FLG, COUNTERPARTY_ASSOC_TYPE_CD, COUNTERPARTY_GROUP_ID,
 COUNTERPARTY_GROUP_PARENT_FLG, CREDIT_BUREAU_SCORE, CREDIT_BUREAU_SCORE_DT, CREDIT_RATING_CD, DELINQUENT_FLG,
 DISTRICT_NM, DRIVER_LICENSE_ID, DRIVERS_LIC_EXPIRATION_DT, EFFECTIVE_FROM_DTTM, EFFECTIVE_TO_DTTM, FINANCIAL_ASSOCIATE_RK,
 FORECLOSED_FLG, HIGH_RISK_CATEGORY_FLG, HOUSEHOLD_RK, INTERNAL_ORG_RK, LEGAL_JUDGEMENT_FLG, MODEL_RK, NM_SUFFIX_TXT,
 PASSPORT_EXPIRATION_DT, PASSPORT_NO, PENDING_LAWSUIT_FLG, PRIM_BRANCH_FINANCIAL_UNIT_RK, RISK_WEIGHT_PCT, RM_ADDR_CTRY,
 RM_ADDR_TYPE_CD, RM_ADDR_ZIPCD, RM_BORROWER_CD, RM_DOSRI_CD, RM_INDUSTRY_CLASS, RMID, SALUTATION_NM, SEC_BRANCH_FINANCIAL_UNIT_RK,
 SECNDRY_CITIZENSHIP_COUNTRY_CD, SOCIAL_SECURITY_NO, TITLE_TXT, TOTAL_LIABILITY_AMT, VALID_FROM_DTTM, VALID_TO_DTTM
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

3959       
3960       %put %str(NOTE: Mapping columns ...);
95                                                         The SAS System                                19:16 Friday, April 4, 2008

NOTE: Mapping columns ...
3961       proc sql;
3962          create view work.W5JCO6M0 as
3963             select ADDRESS_LINE_1_TXT length = 100,
3964                    ADDRESS_LINE_2_TXT length = 100,
3965                    ADDRESS_LINE_3_TXT length = 100,
3966                    ADDRESS_LINE_4_TXT length = 100,
3967                    ADDRESS_TYPE_CD length = 3,
3968                    . as ANNUAL_INCOME_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5,
3969                    ASSOCIATE_COUNTERPARTY_ID length = 32,
3970                    . as BANKRUPTCY_FILED_DT length = 8 format = DATE9. informat = DATE9.,
3971                    "" as BANKRUPTCY_STATUS_CD length = 3,
3972                    CITY_NM length = 100,
3973                    "" as CORE_MKT_PARTICIPANT_FLG length = 1,
3974                    "" as COUNTERPARTY_ASSOC_TYPE_CD length = 10,
3975                    "" as COUNTERPARTY_GROUP_ID length = 32,
3976                    "" as COUNTERPARTY_GROUP_PARENT_FLG length = 1,
3977                    COUNTERPARTY_ID length = 26,
3978                    COUNTERPARTY_RLN_TYPE_CD length = 3,
3979                    COUNTERPARTY_TYPE_CD length = 3,
3980                    COUNTRY_CD length = 3,
3981                    COUNTRY_CD_TEMP length = 5,
3982                    COUNTRY_OF_RESIDENCY_CD length = 3,
3983                    COUNTRY_OF_RESIDENCY_CD_TEMP length = 5,
3984                    . as CREDIT_BUREAU_SCORE length = 8 format = NLNUM8.2 informat = NLNUM8.2,
3985                    . as CREDIT_BUREAU_SCORE_DT length = 8 format = DATE9. informat = DATE9.,
3986                    "" as CREDIT_RATING_CD length = 20,
3987                    CURRENCY_CD length = 3,
3988                    CUSTOMER_TYPE_CD length = 3,
3989                    "" as DELINQUENT_FLG length = 1,
3990                    "" as DISTRICT_NM length = 40,
3991                    DOMESTIC_CURRENCY_CD length = 3,
3992                    "" as DRIVER_LICENSE_ID length = 32,
3993                    . as DRIVERS_LIC_EXPIRATION_DT length = 8 format = DATE9. informat = DATE9.,
3994                    ECONOMIC_SECTOR_CD length = 3,
3995                    ECONOMIC_SECTOR_CD_TEMP length = 6,
3996                    . as EFFECTIVE_FROM_DTTM length = 8 format = NLDATM21. informat = NLDATM21.,
3997                    . as EFFECTIVE_TO_DTTM length = 8 format = NLDATM21. informat = NLDATM21.,
3998                    EMPLOYEE_ID length = 32,
3999                    . as FINANCIAL_ASSOCIATE_RK length = 8 format = 12. informat = 12.,
4000                    FIRST_NM length = 40,
4001                    "" as FORECLOSED_FLG length = 1,
4002                    "" as HIGH_RISK_CATEGORY_FLG length = 1,
4003                    . as HOUSEHOLD_RK length = 8 format = 12. informat = 12.,
4004                    IND_CORP_TYPE length = 3,
4005                    IND_EXTENRAL_CUST_TYPE length = 2,
4006                    . as INTERNAL_ORG_RK length = 8 format = 12. informat = 12.,
4007                    LAST_NM length = 40,
4008                    "" as LEGAL_JUDGEMENT_FLG length = 1,
4009                    MIDDLE_INITIALS length = 20,
4010                    MIDDLE_NM length = 40,
4011                    . as MODEL_RK length = 8 format = 12. informat = 12.,
4012                    "" as NM_SUFFIX_TXT length = 40,
4013                    . as PASSPORT_EXPIRATION_DT length = 8 format = DATE9. informat = DATE9.,
4014                    "" as PASSPORT_NO length = 32,
4015                    "" as PENDING_LAWSUIT_FLG length = 1,
4016                    POSTAL_CD length = 20,
4017                    POSTAL_CD_TEMP length = 11,
96                                                         The SAS System                                19:16 Friday, April 4, 2008

4018                    . as PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8 format = 12. informat = 12.,
4019                    PROCESSED_DTTM length = 8,
4020                    REGLTRY_COUNTERPARTY_TYPE_CD length = 3,
4021                    REPL_ID length = 32,
4022                    . as RISK_WEIGHT_PCT length = 8 format = NLNUM9.4 informat = NLNUM9.4,
4023                    "" as RM_ADDR_CTRY length = 20,
4024                    "" as RM_ADDR_TYPE_CD length = 3,
4025                    "" as RM_ADDR_ZIPCD length = 10,
4026                    "" as RM_BORROWER_CD length = 6,
4027                    "" as RM_DOSRI_CD length = 1,
4028                    "" as RM_INDUSTRY_CLASS length = 6,
4029                    "" as RMID length = 30,
4030                    "" as SALUTATION_NM length = 20,
4031                    . as SEC_BRANCH_FINANCIAL_UNIT_RK length = 8 format = 12. informat = 12.,
4032                    "" as SECNDRY_CITIZENSHIP_COUNTRY_CD length = 3,
4033                    "" as SOCIAL_SECURITY_NO length = 20,
4034                    SOURCE_SYSTEM_CD length = 3,
4035                    STATE_REGION_CD length = 4,
4036                    STATE_REGION_CD_TEMP length = 4,
4037                    TAX_ID length = 32,
4038                    TAX_ID_TYPE_CD length = 3,
4039                    TAX_STATUS_CD length = 3,
4040                    "" as TITLE_TXT length = 20,
4041                    TOTAL_ASSET_AMT length = 8,
4042                    . as TOTAL_LIABILITY_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5,
4043                    . as VALID_FROM_DTTM length = 8 format = NLDATM21. informat = NLDATM21.,
4044                    . as VALID_TO_DTTM length = 8 format = NLDATM21. informat = NLDATM21.
4045                from work.W5GWOI7C;
NOTE: SQL view WORK.W5JCO6M0 has been defined.
4046       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

4047       
4048       %let SYSLAST = work.W5JCO6M0;
4049       
4050       /*---- Map the columns  ----*/
4051       proc datasets lib = work nolist nowarn memtype = (data view);
4052          delete W5JCO6MB;
4053       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

4054       
4055       data _null_;
4056          put "NOTE: The following column(s) do not have a column mapping, so the"
4057               " value(s) will be set to missing: COUNTRY_CD_TEMP,"
4058               " COUNTRY_OF_RESIDENCY_CD_TEMP, ECONOMIC_SECTOR_CD_TEMP,"
4059               " POSTAL_CD_TEMP, STATE_REGION_CD_TEMP";
4060       run;

NOTE: The following column(s) do not have a column mapping, so the value(s) will be set to missing: COUNTRY_CD_TEMP,
 COUNTRY_OF_RESIDENCY_CD_TEMP, ECONOMIC_SECTOR_CD_TEMP, POSTAL_CD_TEMP, STATE_REGION_CD_TEMP
97                                                         The SAS System                                19:16 Friday, April 4, 2008

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

4061       
4062       %put %str(NOTE: Mapping columns ...);
NOTE: Mapping columns ...
4063       proc sql;
4064          create view work.W5JCO6MB as
4065             select ADDRESS_LINE_1_TXT length = 100,
4066                    ADDRESS_LINE_2_TXT length = 100,
4067                    ADDRESS_LINE_3_TXT length = 100,
4068                    ADDRESS_LINE_4_TXT length = 100,
4069                    ADDRESS_TYPE_CD length = 3,
4070                    ANNUAL_INCOME_AMT length = 8,
4071                    ASSOCIATE_COUNTERPARTY_ID length = 32,
4072                    BANKRUPTCY_FILED_DT length = 8,
4073                    BANKRUPTCY_STATUS_CD length = 3,
4074                    CITY_NM length = 100,
4075                    CORE_MKT_PARTICIPANT_FLG length = 1,
4076                    COUNTERPARTY_ASSOC_TYPE_CD length = 10,
4077                    COUNTERPARTY_GROUP_ID length = 32,
4078                    COUNTERPARTY_GROUP_PARENT_FLG length = 1,
4079                    COUNTERPARTY_ID length = 26,
4080                    COUNTERPARTY_RLN_TYPE_CD length = 3,
4081                    COUNTERPARTY_TYPE_CD length = 3,
4082                    COUNTRY_CD length = 3,
4083                    "" as COUNTRY_CD_TEMP length = 5,
4084                    COUNTRY_OF_RESIDENCY_CD length = 3,
4085                    "" as COUNTRY_OF_RESIDENCY_CD_TEMP length = 5,
4086                    CREDIT_BUREAU_SCORE length = 8,
4087                    CREDIT_BUREAU_SCORE_DT length = 8,
4088                    CREDIT_RATING_CD length = 20,
4089                    CURRENCY_CD length = 3,
4090                    CUSTOMER_TYPE_CD length = 3,
4091                    DELINQUENT_FLG length = 1,
4092                    DISTRICT_NM length = 40,
4093                    DOMESTIC_CURRENCY_CD length = 3,
4094                    DRIVER_LICENSE_ID length = 32,
4095                    DRIVERS_LIC_EXPIRATION_DT length = 8,
4096                    ECONOMIC_SECTOR_CD length = 3,
4097                    "" as ECONOMIC_SECTOR_CD_TEMP length = 6,
4098                    EFFECTIVE_FROM_DTTM length = 8,
4099                    EFFECTIVE_TO_DTTM length = 8,
4100                    EMPLOYEE_ID length = 32,
4101                    FINANCIAL_ASSOCIATE_RK length = 8,
4102                    FIRST_NM length = 40,
4103                    FORECLOSED_FLG length = 1,
4104                    HIGH_RISK_CATEGORY_FLG length = 1,
4105                    HOUSEHOLD_RK length = 8,
4106                    IND_CORP_TYPE length = 3,
4107                    IND_EXTENRAL_CUST_TYPE length = 2,
4108                    INTERNAL_ORG_RK length = 8,
4109                    LAST_NM length = 40,
4110                    LEGAL_JUDGEMENT_FLG length = 1,
4111                    MIDDLE_INITIALS length = 20,
4112                    MIDDLE_NM length = 40,
98                                                         The SAS System                                19:16 Friday, April 4, 2008

4113                    MODEL_RK length = 8,
4114                    NM_SUFFIX_TXT length = 40,
4115                    PASSPORT_EXPIRATION_DT length = 8,
4116                    PASSPORT_NO length = 32,
4117                    PENDING_LAWSUIT_FLG length = 1,
4118                    POSTAL_CD length = 20,
4119                    "" as POSTAL_CD_TEMP length = 11,
4120                    PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8,
4121                    PROCESSED_DTTM length = 8,
4122                    REGLTRY_COUNTERPARTY_TYPE_CD length = 3,
4123                    REPL_ID length = 32,
4124                    RISK_WEIGHT_PCT length = 8,
4125                    RM_ADDR_CTRY length = 20,
4126                    RM_ADDR_TYPE_CD length = 3,
4127                    RM_ADDR_ZIPCD length = 10,
4128                    RM_BORROWER_CD length = 6,
4129                    RM_DOSRI_CD length = 1,
4130                    RM_INDUSTRY_CLASS length = 6,
4131                    RMID length = 30,
4132                    SALUTATION_NM length = 20,
4133                    SEC_BRANCH_FINANCIAL_UNIT_RK length = 8,
4134                    SECNDRY_CITIZENSHIP_COUNTRY_CD length = 3,
4135                    SOCIAL_SECURITY_NO length = 20,
4136                    SOURCE_SYSTEM_CD length = 3,
4137                    STATE_REGION_CD length = 4,
4138                    "" as STATE_REGION_CD_TEMP length = 4,
4139                    TAX_ID length = 32,
4140                    TAX_ID_TYPE_CD length = 3,
4141                    TAX_STATUS_CD length = 3,
4142                    TITLE_TXT length = 20,
4143                    TOTAL_ASSET_AMT length = 8,
4144                    TOTAL_LIABILITY_AMT length = 8,
4145                    VALID_FROM_DTTM length = 8,
4146                    VALID_TO_DTTM length = 8
4147                from work.W5GWKEDS;
NOTE: SQL view WORK.W5JCO6MB has been defined.
4148       quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

4149       
4150       %let SYSLAST = work.W5JCO6MB;
4151       
4152       data work.W5HKAADN / view=work.W5HKAADN;
4153          set work.W5JCO6M0
4154              work.W5JCO6MB;
4155          keep ADDRESS_LINE_1_TXT ADDRESS_LINE_2_TXT ADDRESS_LINE_3_TXT
4156                 ADDRESS_LINE_4_TXT ADDRESS_TYPE_CD ANNUAL_INCOME_AMT
4157                 ASSOCIATE_COUNTERPARTY_ID BANKRUPTCY_FILED_DT BANKRUPTCY_STATUS_CD
4158                 CITY_NM CORE_MKT_PARTICIPANT_FLG COUNTERPARTY_ASSOC_TYPE_CD
4159                 COUNTERPARTY_GROUP_ID COUNTERPARTY_GROUP_PARENT_FLG COUNTERPARTY_ID
4160                 COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD COUNTRY_CD
4161                 COUNTRY_CD_TEMP COUNTRY_OF_RESIDENCY_CD COUNTRY_OF_RESIDENCY_CD_TEMP
4162                 CREDIT_BUREAU_SCORE CREDIT_BUREAU_SCORE_DT CREDIT_RATING_CD
4163                 CURRENCY_CD CUSTOMER_TYPE_CD DELINQUENT_FLG DISTRICT_NM
4164                 DOMESTIC_CURRENCY_CD DRIVER_LICENSE_ID DRIVERS_LIC_EXPIRATION_DT
99                                                         The SAS System                                19:16 Friday, April 4, 2008

4165                 ECONOMIC_SECTOR_CD ECONOMIC_SECTOR_CD_TEMP EFFECTIVE_FROM_DTTM
4166                 EFFECTIVE_TO_DTTM EMPLOYEE_ID FINANCIAL_ASSOCIATE_RK FIRST_NM
4167                 FORECLOSED_FLG HIGH_RISK_CATEGORY_FLG HOUSEHOLD_RK IND_CORP_TYPE
4168                 IND_EXTENRAL_CUST_TYPE INTERNAL_ORG_RK LAST_NM LEGAL_JUDGEMENT_FLG
4169                 MIDDLE_INITIALS MIDDLE_NM MODEL_RK NM_SUFFIX_TXT
4170                 PASSPORT_EXPIRATION_DT PASSPORT_NO PENDING_LAWSUIT_FLG POSTAL_CD
4171                 POSTAL_CD_TEMP PRIM_BRANCH_FINANCIAL_UNIT_RK PROCESSED_DTTM
4172                 REGLTRY_COUNTERPARTY_TYPE_CD REPL_ID RISK_WEIGHT_PCT RM_ADDR_CTRY
4173                 RM_ADDR_TYPE_CD RM_ADDR_ZIPCD RM_BORROWER_CD RM_DOSRI_CD
4174                 RM_INDUSTRY_CLASS RMID SALUTATION_NM SEC_BRANCH_FINANCIAL_UNIT_RK
4175                 SECNDRY_CITIZENSHIP_COUNTRY_CD SOCIAL_SECURITY_NO SOURCE_SYSTEM_CD
4176                 STATE_REGION_CD STATE_REGION_CD_TEMP TAX_ID TAX_ID_TYPE_CD
4177                 TAX_STATUS_CD TITLE_TXT TOTAL_ASSET_AMT TOTAL_LIABILITY_AMT
4178                 VALID_FROM_DTTM VALID_TO_DTTM;
4179       run;

NOTE: DATA STEP view saved on file WORK.W5HKAADN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

4180       
4181       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
4182       
4183       /*============================================================================*
4184        * Step:          Table Loader                              A5SFKZBN.BS000U9M *
4185        * Transform:     Table Loader (Version 2)                                    *
4186        * Description:                                                               *
4187        *                                                                            *
4188        * Source Table:  Append - work.W5HKAADN                    A5SFKZBN.BQ000RYG *
4189        * Target Table:  STG_INDIVIDUAL_CUSTOMER_ALS -             A5SFKZBN.BK0003BD *
4190        *                 STAGING.STG_INDIVIDUAL_CUSTOMER_ALS                        *
4191        *============================================================================*/
4192       
4193       %let SYSLAST = %nrquote(work.W5HKAADN);
4194       
4195       %let transformID = %quote(A5SFKZBN.BS000U9M);
4196       
4197       %let trans_rc = 0;
4198       
4199       %global etls_tableExist;
4200       %global etls_numIndex;
4201       %global etls_lastTable;
4202       %let etls_tableExist = -1;
4203       %let etls_numIndex = -1;
4204       %let etls_lastTable = &SYSLAST;
100                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable SYSLAST resolves to WORK.W5HKAADN                        
4205       
4206       /*---- Define load data macro  ----*/
4207       %macro etls_loader;
4208       
4209          %let SYSOPT = ;
4210       
4211          /* Get number of records in table  */
4212          %let etls_recordsBefore = 0;
4213          %macro etls_recordCheck;
4214             %let etls_recCheckExist = %eval(%sysfunc(exist(STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, DATA)) or
4215                   %sysfunc(exist(STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, VIEW)));
4216       
4217             %if (&etls_recCheckExist) %then
4218             %do;
4219                proc contents data = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS out = work.etls_contents(keep = nobs) noprint;
4220                run;
4221       
4222                data _null_;
4223                   set work.etls_contents (obs = 1);
4224                   call symput("etls_recordsBefore", left(put(nobs,32.)));
4225                run;
4226       
4227                proc datasets lib = work nolist nowarn memtype = (data view);
4228                   delete etls_contents;
4229                quit;
4230       
4231             %end;
4232          %mend etls_recordCheck;
4233          %etls_recordCheck;
4234       
4235          %let etls_table = %nrquote(STG_INDIVIDUAL_CUSTOMER_ALS);
4236          %let etls_lib   = %nrquote(STAGING);
4237       
4238          /*---- Map the columns  ----*/
4239          proc datasets lib = work nolist nowarn memtype = (data view);
4240             delete mapped;
4241          quit;
4242       
4243          data _null_;
4244             put "NOTE: The following column(s) do not have a column mapping, so the"
4245                  " value(s) will be set to missing: ASSOCIATE_COUNTERPARTY_RK";
4246          run;
4247       
4248          %put %str(NOTE: Mapping columns ...);
4249          proc sql;
4250             create view work.mapped as
4251                select ADDRESS_LINE_1_TXT length = 100,
4252                       ADDRESS_LINE_2_TXT length = 100,
4253                       ADDRESS_LINE_3_TXT length = 100,
4254                       ADDRESS_LINE_4_TXT length = 100,
4255                       ADDRESS_TYPE_CD length = 3,
4256                       ANNUAL_INCOME_AMT length = 8,
4257                       . as ASSOCIATE_COUNTERPARTY_RK length = 8 format = 12. informat = 12.,
4258                       ASSOCIATE_COUNTERPARTY_ID length = 32,
4259                       BANKRUPTCY_FILED_DT length = 8,
4260                       BANKRUPTCY_STATUS_CD length = 3,
4261                       CITY_NM length = 100,
101                                                        The SAS System                                19:16 Friday, April 4, 2008

4262                       CORE_MKT_PARTICIPANT_FLG length = 1,
4263                       COUNTERPARTY_ASSOC_TYPE_CD length = 10,
4264                       COUNTERPARTY_GROUP_ID length = 32,
4265                       COUNTERPARTY_GROUP_PARENT_FLG length = 1,
4266                       COUNTERPARTY_ID length = 26,
4267                       COUNTERPARTY_RLN_TYPE_CD length = 3,
4268                       COUNTERPARTY_TYPE_CD length = 3,
4269                       (case when COUNTRY_CD eq 'OTH' then 'PHL'
4270                          else COUNTRY_CD
4271                       end) as COUNTRY_CD length = 3,
4272                       COUNTRY_OF_RESIDENCY_CD length = 3,
4273                       CREDIT_BUREAU_SCORE length = 8,
4274                       CREDIT_BUREAU_SCORE_DT length = 8,
4275                       CREDIT_RATING_CD length = 20,
4276                       CURRENCY_CD length = 3,
4277                       CUSTOMER_TYPE_CD length = 3,
4278                       DELINQUENT_FLG length = 1,
4279                       DISTRICT_NM length = 40,
4280                       DOMESTIC_CURRENCY_CD length = 3,
4281                       DRIVER_LICENSE_ID length = 32,
4282                       DRIVERS_LIC_EXPIRATION_DT length = 8,
4283                       ECONOMIC_SECTOR_CD length = 3,
4284                       EFFECTIVE_FROM_DTTM length = 8,
4285                       EFFECTIVE_TO_DTTM length = 8,
4286                       EMPLOYEE_ID length = 32,
4287                       FINANCIAL_ASSOCIATE_RK length = 8,
4288                       FIRST_NM length = 40,
4289                       FORECLOSED_FLG length = 1,
4290                       HIGH_RISK_CATEGORY_FLG length = 1,
4291                       HOUSEHOLD_RK length = 8,
4292                       IND_CORP_TYPE length = 3,
4293                       IND_EXTENRAL_CUST_TYPE as IND_EXTERNAL_CUST_TYPE length = 2,
4294                       INTERNAL_ORG_RK length = 8,
4295                       LAST_NM length = 40,
4296                       LEGAL_JUDGEMENT_FLG length = 1,
4297                       MIDDLE_INITIALS length = 20,
4298                       MIDDLE_NM length = 40,
4299                       MODEL_RK length = 8,
4300                       NM_SUFFIX_TXT length = 40,
4301                       PASSPORT_EXPIRATION_DT length = 8,
4302                       PASSPORT_NO length = 32,
4303                       PENDING_LAWSUIT_FLG length = 1,
4304                       POSTAL_CD length = 20,
4305                       PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8,
4306                       PROCESSED_DTTM length = 8,
4307                       REGLTRY_COUNTERPARTY_TYPE_CD length = 3,
4308                       RISK_WEIGHT_PCT length = 8,
4309                       SALUTATION_NM length = 20,
4310                       SEC_BRANCH_FINANCIAL_UNIT_RK length = 8,
4311                       SECNDRY_CITIZENSHIP_COUNTRY_CD length = 3,
4312                       SOCIAL_SECURITY_NO length = 20,
4313                       SOURCE_SYSTEM_CD length = 3,
4314                       STATE_REGION_CD length = 4,
4315                       TAX_ID length = 32,
4316                       TAX_ID_TYPE_CD length = 3,
4317                       TAX_STATUS_CD length = 3,
4318                       TITLE_TXT length = 20,
4319                       TOTAL_ASSET_AMT length = 8,
102                                                        The SAS System                                19:16 Friday, April 4, 2008

4320                       TOTAL_LIABILITY_AMT length = 8,
4321                       VALID_FROM_DTTM length = 8,
4322                       VALID_TO_DTTM length = 8
4323                   from &etls_lastTable;
4324          quit;
4325       
4326          %let SYSLAST = work.mapped;
4327       
4328          %let etls_lastTable = &SYSLAST;
4329          %let SYSOPT = ;
4330       
4331          /* Determine if the target table exists  */
4332          %let etls_tableExist = %eval(%sysfunc(exist(STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, DATA)) or
4333                %sysfunc(exist(STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, VIEW)));
4334       
4335          /* Check for and remove foreign keys before deleting table */
4336          %if &etls_tableExist %then
4337          %do; /* table exists */
4338             %macro etls_CIContents(table=,workTableOut=);
4339                %put NOTE: Building table listing Constraints and Indexes for: &table;
4340                proc datasets lib=work nolist; delete &workTableOut; quit;
4341                proc contents data=&table noprint out2=&workTableOut; run;
4342                data &workTableOut;
4343                   length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
4344                   set &workTableOut;
4345                   if ICOwn ne 'YES';
4346                run;
4347                %rcSet(&syserr);
4348       
4349             %mend etls_CIContents;
4350       
4351             %etls_CIContents(table=STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, workTableOut=etls_commands);
4352       
4353             data etls_commands;
4354                set etls_commands(where=(upcase(type)="FOREIGN KEY")) end=eof;
4355                command='ic delete '||trim(name)||';';
4356             run;
4357       
4358             data _null_;
4359                set etls_commands(where=(1)) end=eof;
4360                if _n_=1 then
4361                   call execute('proc datasets nolist lib=STAGING;modify STG_INDIVIDUAL_CUSTOMER_ALS;');
4362                call execute(command);
4363                if eof then call execute('; quit;');
4364             run;
4365             %rcSet(&syserr);
4366       
4367          %end; /* table exists */
4368       
4369          /*---- Drop a table  ----*/
4370          %put %str(NOTE: Dropping table ...);
4371          proc datasets lib = STAGING nolist nodetails;
4372               delete STG_INDIVIDUAL_CUSTOMER_ALS;
4373          quit;
4374       
4375          %rcSet(&syserr);
4376       
4377          %let etls_tableExist = 0;
103                                                        The SAS System                                19:16 Friday, April 4, 2008

4378       
4379          /*---- Create a new table  ----*/
4380          data STAGING.STG_INDIVIDUAL_CUSTOMER_ALS
4381                  (label = 'STG_INDIVIDUAL_CUSTOMER_ALS');
4382             attrib ADDRESS_LINE_1_TXT length = $100
4383                       label = 'Address Line 1 Text';
4384             attrib ADDRESS_LINE_2_TXT length = $100
4385                       label = 'Address Line 2 Text';
4386             attrib ADDRESS_LINE_3_TXT length = $100
4387                       label = 'Address Line 3 Text';
4388             attrib ADDRESS_LINE_4_TXT length = $100
4389                       label = 'Address Line 4 Text';
4390             attrib ADDRESS_TYPE_CD length = $3
4391                       label = 'Address Type Code';
4392             attrib ANNUAL_INCOME_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5
4393                       label = 'Annual Income Amount';
4394             attrib ASSOCIATE_COUNTERPARTY_RK length = 8 format = 12. informat = 12.
4395                       label = 'Counterparty Key';
4396             attrib ASSOCIATE_COUNTERPARTY_ID length = $32;
4397             attrib BANKRUPTCY_FILED_DT length = 8 format = DATE9. informat = DATE9.
4398                       label = 'Bankruptcy Filed Date';
4399             attrib BANKRUPTCY_STATUS_CD length = $3
4400                       label = 'Bankruptcy Status Code';
4401             attrib CITY_NM length = $100
4402                       label = 'City Name';
4403             attrib CORE_MKT_PARTICIPANT_FLG length = $1
4404                       label = 'Core Mkt Participant Flag';
4405             attrib COUNTERPARTY_ASSOC_TYPE_CD length = $10
4406                       label = 'Equity Instrument Type Code';
4407             attrib COUNTERPARTY_GROUP_ID length = $32
4408                       label = 'Counterparty Group Id';
4409             attrib COUNTERPARTY_GROUP_PARENT_FLG length = $1
4410                       label = 'Counterparty Group Parent Flag';
4411             attrib COUNTERPARTY_ID length = $26
4412                       label = 'Counterparty Key';
4413             attrib COUNTERPARTY_RLN_TYPE_CD length = $3
4414                       label = 'Counterparty Relationship Type Code';
4415             attrib COUNTERPARTY_TYPE_CD length = $3
4416                       label = 'Counterparty Type Code';
4417             attrib COUNTRY_CD length = $3
4418                       label = 'Country Code';
4419             attrib COUNTRY_OF_RESIDENCY_CD length = $3
4420                       label = 'Country Of Residency Code';
4421             attrib CREDIT_BUREAU_SCORE length = 8 format = NLNUM8.2 informat = NLNUM8.2
4422                       label = 'Credit Bureau Score';
4423             attrib CREDIT_BUREAU_SCORE_DT length = 8 format = DATE9. informat = DATE9.
4424                       label = 'Credit Bureau Score Date';
4425             attrib CREDIT_RATING_CD length = $20
4426                       label = 'Credit Rating Code';
4427             attrib CURRENCY_CD length = $3
4428                       label = 'Currency Code';
4429             attrib CUSTOMER_TYPE_CD length = $3
4430                       label = 'Customer Type Code';
4431             attrib DELINQUENT_FLG length = $1
4432                       label = 'Delinquent Flag';
4433             attrib DISTRICT_NM length = $40
4434                       label = 'District Name';
4435             attrib DOMESTIC_CURRENCY_CD length = $3
104                                                        The SAS System                                19:16 Friday, April 4, 2008

4436                       label = 'Currency Code';
4437             attrib DRIVER_LICENSE_ID length = $32
4438                       label = 'Driver License ID';
4439             attrib DRIVERS_LIC_EXPIRATION_DT length = 8 format = DATE9. informat = DATE9.
4440                       label = 'Drivers License Expiration Date';
4441             attrib ECONOMIC_SECTOR_CD length = $3
4442                       label = 'Economic Sector Code';
4443             attrib EFFECTIVE_FROM_DTTM length = 8 format = NLDATM21. informat = NLDATM21.
4444                       label = 'Effective From Datetime';
4445             attrib EFFECTIVE_TO_DTTM length = 8 format = NLDATM21. informat = NLDATM21.
4446                       label = 'Effective To Datetime';
4447             attrib EMPLOYEE_ID length = $32
4448                       label = 'Employee Key';
4449             attrib FINANCIAL_ASSOCIATE_RK length = 8 format = 12. informat = 12.
4450                       label = 'Financial Associate Key';
4451             attrib FIRST_NM length = $40
4452                       label = 'First Name';
4453             attrib FORECLOSED_FLG length = $1
4454                       label = 'Foreclosed Flag';
4455             attrib HIGH_RISK_CATEGORY_FLG length = $1
4456                       label = 'High Risk Category Flag';
4457             attrib HOUSEHOLD_RK length = 8 format = 12. informat = 12.
4458                       label = 'Household Key';
4459             attrib IND_CORP_TYPE length = $3;
4460             attrib IND_EXTERNAL_CUST_TYPE length = $2;
4461             attrib INTERNAL_ORG_RK length = 8 format = 12. informat = 12.
4462                       label = 'Internal Organization Key';
4463             attrib LAST_NM length = $40
4464                       label = 'Last Name';
4465             attrib LEGAL_JUDGEMENT_FLG length = $1
4466                       label = 'Legal Judgement Flag';
4467             attrib MIDDLE_INITIALS length = $20
4468                       label = 'Middle Initials';
4469             attrib MIDDLE_NM length = $40
4470                       label = 'Middle Name';
4471             attrib MODEL_RK length = 8 format = 12. informat = 12.
4472                       label = 'Model Key';
4473             attrib NM_SUFFIX_TXT length = $40
4474                       label = 'Name Suffix';
4475             attrib PASSPORT_EXPIRATION_DT length = 8 format = DATE9. informat = DATE9.
4476                       label = 'Passport Expiration Date';
4477             attrib PASSPORT_NO length = $32
4478                       label = 'Passport No';
4479             attrib PENDING_LAWSUIT_FLG length = $1
4480                       label = 'Pending Lawsuit Flag';
4481             attrib POSTAL_CD length = $20
4482                       label = 'Postal Code';
4483             attrib PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8 format = 12. informat = 12.
4484                       label = 'Primary Branch Financial Unit Key';
4485             attrib PROCESSED_DTTM length = 8 format = NLDATM21. informat = NLDATM21.
4486                       label = 'Processed Datetime';
4487             attrib REGLTRY_COUNTERPARTY_TYPE_CD length = $3
4488                       label = 'Basel Portfolio Code';
4489             attrib RISK_WEIGHT_PCT length = 8 format = NLNUM9.4 informat = NLNUM9.4
4490                       label = 'Risk Weight Percent';
4491             attrib SALUTATION_NM length = $20
4492                       label = 'Salutation Name';
4493             attrib SEC_BRANCH_FINANCIAL_UNIT_RK length = 8 format = 12. informat = 12.
105                                                        The SAS System                                19:16 Friday, April 4, 2008

4494                       label = 'Secondary Branch Financial Unit Key';
4495             attrib SECNDRY_CITIZENSHIP_COUNTRY_CD length = $3
4496                       label = 'Country Code';
4497             attrib SOCIAL_SECURITY_NO length = $20
4498                       label = 'Social Security No';
4499             attrib SOURCE_SYSTEM_CD length = $3
4500                       label = 'Source System Code';
4501             attrib STATE_REGION_CD length = $4
4502                       label = 'State Region Code';
4503             attrib TAX_ID length = $32
4504                       label = 'Tax Id';
4505             attrib TAX_ID_TYPE_CD length = $3
4506                       label = 'Tax Id Type Code';
4507             attrib TAX_STATUS_CD length = $3
4508                       label = 'Tax Status Code';
4509             attrib TITLE_TXT length = $20
4510                       label = 'Title Text';
4511             attrib TOTAL_ASSET_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5
4512                       label = 'Total Asset Amount';
4513             attrib TOTAL_LIABILITY_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5
4514                       label = 'Total Liability Amount';
4515             attrib VALID_FROM_DTTM length = 8 format = NLDATM21. informat = NLDATM21.
4516                       label = 'Valid From Datetime';
4517             attrib VALID_TO_DTTM length = 8 format = NLDATM21. informat = NLDATM21.
4518                       label = 'Valid To Datetime';
4519             stop;
4520          run;
4521       
4522          %rcSet(&syserr);
4523       
4524          /*---- Append new data  ----*/
4525          %put %str(NOTE: Appending data ...);
4526       
4527          proc append base = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS
4528                      data = &etls_lastTable (&SYSOPT) force;
4529          run;
4530       
4531          %rcSet(&syserr);
4532       
4533          proc datasets lib = work nolist nowarn memtype = (data view);
4534             delete mapped;
4535          quit;
4536       
4537          /* Get number of records in table  */
4538          %let etls_recordsAfter = 0;
4539          %macro etls_recordCheck;
4540             %let etls_recCheckExist = %eval(%sysfunc(exist(STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, DATA)) or
4541                   %sysfunc(exist(STAGING.STG_INDIVIDUAL_CUSTOMER_ALS, VIEW)));
4542       
4543             %if (&etls_recCheckExist) %then
4544             %do;
4545                proc contents data = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS out = work.etls_contents(keep = nobs) noprint;
4546                run;
4547       
4548                data _null_;
4549                   set work.etls_contents (obs = 1);
4550                   call symput("etls_recordsAfter", left(put(nobs,32.)));
4551                run;
106                                                        The SAS System                                19:16 Friday, April 4, 2008

4552       
4553                proc datasets lib = work nolist nowarn memtype = (data view);
4554                   delete etls_contents;
4555                quit;
4556       
4557             %end;
4558          %mend etls_recordCheck;
4559          %etls_recordCheck;
4560       
4561       %mend etls_loader;
4562       %etls_loader;
MLOGIC(ETLS_LOADER):  Beginning execution.
MLOGIC(ETLS_LOADER):  %LET (variable name is SYSOPT)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_RECORDSBEFORE)
MLOGIC(ETLS_RECORDCHECK):  Beginning execution.
MLOGIC(ETLS_RECORDCHECK):  %LET (variable name is ETLS_RECCHECKEXIST)
SYMBOLGEN:  Macro variable ETLS_RECCHECKEXIST resolves to 1
MLOGIC(ETLS_RECORDCHECK):  %IF condition (&etls_recCheckExist) is TRUE
MPRINT(ETLS_RECORDCHECK):   proc contents data = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS out = work.etls_contents(keep = nobs) noprint;
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: The data set WORK.ETLS_CONTENTS has 70 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   data _null_;
MPRINT(ETLS_RECORDCHECK):   set work.etls_contents (obs = 1);
MPRINT(ETLS_RECORDCHECK):   call symput("etls_recordsBefore", left(put(nobs,32.)));
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: There were 1 observations read from the data set WORK.ETLS_CONTENTS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_RECORDCHECK):   delete etls_contents;
MPRINT(ETLS_RECORDCHECK):   quit;

NOTE: Deleting WORK.ETLS_CONTENTS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_RECORDCHECK):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_TABLE)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_LIB)
MPRINT(ETLS_LOADER):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_LOADER):   delete mapped;
MPRINT(ETLS_LOADER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
107                                                        The SAS System                                19:16 Friday, April 4, 2008

      cpu time            0.00 seconds
      

MPRINT(ETLS_LOADER):   data _null_;
MPRINT(ETLS_LOADER):   put "NOTE: The following column(s) do not have a column mapping, so the" " value(s) will be set to missing: 
ASSOCIATE_COUNTERPARTY_RK";
MPRINT(ETLS_LOADER):   run;

NOTE: The following column(s) do not have a column mapping, so the value(s) will be set to missing: ASSOCIATE_COUNTERPARTY_RK
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_LOADER):  %PUT NOTE: Mapping columns ...
NOTE: Mapping columns ...
MPRINT(ETLS_LOADER):   proc sql;
SYMBOLGEN:  Macro variable ETLS_LASTTABLE resolves to WORK.W5HKAADN
MPRINT(ETLS_LOADER):   create view work.mapped as select ADDRESS_LINE_1_TXT length = 100, ADDRESS_LINE_2_TXT length = 100, 
ADDRESS_LINE_3_TXT length = 100, ADDRESS_LINE_4_TXT length = 100, ADDRESS_TYPE_CD length = 3, ANNUAL_INCOME_AMT length = 8, . as 
ASSOCIATE_COUNTERPARTY_RK length = 8 format = 12. informat = 12., ASSOCIATE_COUNTERPARTY_ID length = 32, BANKRUPTCY_FILED_DT length 
= 8, BANKRUPTCY_STATUS_CD length = 3, CITY_NM length = 100, CORE_MKT_PARTICIPANT_FLG length = 1, COUNTERPARTY_ASSOC_TYPE_CD length 
= 10, COUNTERPARTY_GROUP_ID length = 32, COUNTERPARTY_GROUP_PARENT_FLG length = 1, COUNTERPARTY_ID length = 26, 
COUNTERPARTY_RLN_TYPE_CD length = 3, COUNTERPARTY_TYPE_CD length = 3, (case when COUNTRY_CD eq 'OTH' then 'PHL' else COUNTRY_CD 
end) as COUNTRY_CD length = 3, COUNTRY_OF_RESIDENCY_CD length = 3, CREDIT_BUREAU_SCORE length = 8, CREDIT_BUREAU_SCORE_DT length = 
8, CREDIT_RATING_CD length = 20, CURRENCY_CD length = 3, CUSTOMER_TYPE_CD length = 3, DELINQUENT_FLG length = 1, DISTRICT_NM length 
= 40, DOMESTIC_CURRENCY_CD length = 3, DRIVER_LICENSE_ID length = 32, DRIVERS_LIC_EXPIRATION_DT length = 8, ECONOMIC_SECTOR_CD 
length = 3, EFFECTIVE_FROM_DTTM length = 8, EFFECTIVE_TO_DTTM length = 8, EMPLOYEE_ID length = 32, FINANCIAL_ASSOCIATE_RK length = 
8, FIRST_NM length = 40, FORECLOSED_FLG length = 1, HIGH_RISK_CATEGORY_FLG length = 1, HOUSEHOLD_RK length = 8, IND_CORP_TYPE 
length = 3, IND_EXTENRAL_CUST_TYPE as IND_EXTERNAL_CUST_TYPE length = 2, INTERNAL_ORG_RK length = 8, LAST_NM length = 40, 
LEGAL_JUDGEMENT_FLG length = 1, MIDDLE_INITIALS length = 20, MIDDLE_NM length = 40, MODEL_RK length = 8, NM_SUFFIX_TXT length = 40, 
PASSPORT_EXPIRATION_DT length = 8, PASSPORT_NO length = 32, PENDING_LAWSUIT_FLG length = 1, POSTAL_CD length = 20, 
PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8, PROCESSED_DTTM length = 8, REGLTRY_COUNTERPARTY_TYPE_CD length = 3, RISK_WEIGHT_PCT 
length = 8, SALUTATION_NM length = 20, SEC_BRANCH_FINANCIAL_UNIT_RK length = 8, SECNDRY_CITIZENSHIP_COUNTRY_CD length = 3, 
SOCIAL_SECURITY_NO length = 20, SOURCE_SYSTEM_CD length = 3, STATE_REGION_CD length = 4, TAX_ID length = 32, TAX_ID_TYPE_CD length 
= 3, TAX_STATUS_CD length = 3, TITLE_TXT length = 20, TOTAL_ASSET_AMT length = 8, TOTAL_LIABILITY_AMT length = 8, VALID_FROM_DTTM 
length = 8, VALID_TO_DTTM length = 8 from WORK.W5HKAADN;
NOTE: SQL view WORK.MAPPED has been defined.
MPRINT(ETLS_LOADER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_LOADER):  %LET (variable name is SYSLAST)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_LASTTABLE)
SYMBOLGEN:  Macro variable SYSLAST resolves to WORK.mapped                          
MLOGIC(ETLS_LOADER):  %LET (variable name is SYSOPT)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_TABLEEXIST)
SYMBOLGEN:  Macro variable ETLS_TABLEEXIST resolves to 1
MLOGIC(ETLS_LOADER):  %IF condition &etls_tableExist is TRUE
MLOGIC(ETLS_CICONTENTS):  Beginning execution.
MLOGIC(ETLS_CICONTENTS):  Parameter TABLE has value STAGING.STG_INDIVIDUAL_CUSTOMER_ALS
MLOGIC(ETLS_CICONTENTS):  Parameter WORKTABLEOUT has value etls_commands
MLOGIC(ETLS_CICONTENTS):  %PUT NOTE: Building table listing Constraints and Indexes for: &table
SYMBOLGEN:  Macro variable TABLE resolves to STAGING.STG_INDIVIDUAL_CUSTOMER_ALS
NOTE: Building table listing Constraints and Indexes for: STAGING.STG_INDIVIDUAL_CUSTOMER_ALS
MPRINT(ETLS_CICONTENTS):   proc datasets lib=work nolist;
108                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable WORKTABLEOUT resolves to etls_commands
MPRINT(ETLS_CICONTENTS):   delete etls_commands;
MPRINT(ETLS_CICONTENTS):   quit;

NOTE: The file WORK.ETLS_COMMANDS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable TABLE resolves to STAGING.STG_INDIVIDUAL_CUSTOMER_ALS
SYMBOLGEN:  Macro variable WORKTABLEOUT resolves to etls_commands
MPRINT(ETLS_CICONTENTS):   proc contents data=STAGING.STG_INDIVIDUAL_CUSTOMER_ALS noprint out2=etls_commands;
MPRINT(ETLS_CICONTENTS):   run;

NOTE: The data set WORK.ETLS_COMMANDS has 0 observations and 0 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable WORKTABLEOUT resolves to etls_commands
MPRINT(ETLS_CICONTENTS):   data etls_commands;
MPRINT(ETLS_CICONTENTS):   length name $60 type $20 icown idxUnique idxNoMiss $3 recreate $600;
SYMBOLGEN:  Macro variable WORKTABLEOUT resolves to etls_commands
MPRINT(ETLS_CICONTENTS):   set etls_commands;
MPRINT(ETLS_CICONTENTS):   if ICOwn ne 'YES';
MPRINT(ETLS_CICONTENTS):   run;

NOTE: Variable name is uninitialized.
NOTE: Variable type is uninitialized.
NOTE: Variable icown is uninitialized.
NOTE: Variable idxUnique is uninitialized.
NOTE: Variable idxNoMiss is uninitialized.
NOTE: Variable recreate is uninitialized.
NOTE: There were 0 observations read from the data set WORK.ETLS_COMMANDS.
NOTE: The data set WORK.ETLS_COMMANDS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_CICONTENTS):  ;
MLOGIC(ETLS_CICONTENTS):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MPRINT(ETLS_LOADER):   data etls_commands;
MPRINT(ETLS_LOADER):   set etls_commands(where=(upcase(type)="FOREIGN KEY")) end=eof;
MPRINT(ETLS_LOADER):   command='ic delete '||trim(name)||';';
109                                                        The SAS System                                19:16 Friday, April 4, 2008

MPRINT(ETLS_LOADER):   run;

NOTE: There were 0 observations read from the data set WORK.ETLS_COMMANDS.
      WHERE UPCASE(type)='FOREIGN KEY';
NOTE: The data set WORK.ETLS_COMMANDS has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(ETLS_LOADER):   data _null_;
MPRINT(ETLS_LOADER):   set etls_commands(where=(1)) end=eof;
MPRINT(ETLS_LOADER):   if _n_=1 then call execute('proc datasets nolist lib=STAGING;modify STG_INDIVIDUAL_CUSTOMER_ALS;');
MPRINT(ETLS_LOADER):   call execute(command);
MPRINT(ETLS_LOADER):   if eof then call execute('; quit;');
MPRINT(ETLS_LOADER):   run;

NOTE: There were 0 observations read from the data set WORK.ETLS_COMMANDS.
      WHERE 1 /* an obviously TRUE where clause */ ;
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MLOGIC(ETLS_LOADER):  %PUT NOTE: Dropping table ...
NOTE: Dropping table ...
MPRINT(ETLS_LOADER):   proc datasets lib = STAGING nolist nodetails;
MPRINT(ETLS_LOADER):   delete STG_INDIVIDUAL_CUSTOMER_ALS;
MPRINT(ETLS_LOADER):   quit;

NOTE: Deleting STAGING.STG_INDIVIDUAL_CUSTOMER_ALS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_LOADER):  ;
110                                                        The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_TABLEEXIST)
MPRINT(ETLS_LOADER):   data STAGING.STG_INDIVIDUAL_CUSTOMER_ALS (label = 'STG_INDIVIDUAL_CUSTOMER_ALS');
MPRINT(ETLS_LOADER):   attrib ADDRESS_LINE_1_TXT length = $100 label = 'Address Line 1 Text';
MPRINT(ETLS_LOADER):   attrib ADDRESS_LINE_2_TXT length = $100 label = 'Address Line 2 Text';
MPRINT(ETLS_LOADER):   attrib ADDRESS_LINE_3_TXT length = $100 label = 'Address Line 3 Text';
MPRINT(ETLS_LOADER):   attrib ADDRESS_LINE_4_TXT length = $100 label = 'Address Line 4 Text';
MPRINT(ETLS_LOADER):   attrib ADDRESS_TYPE_CD length = $3 label = 'Address Type Code';
MPRINT(ETLS_LOADER):   attrib ANNUAL_INCOME_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5 label = 'Annual Income Amount';
MPRINT(ETLS_LOADER):   attrib ASSOCIATE_COUNTERPARTY_RK length = 8 format = 12. informat = 12. label = 'Counterparty Key';
MPRINT(ETLS_LOADER):   attrib ASSOCIATE_COUNTERPARTY_ID length = $32;
MPRINT(ETLS_LOADER):   attrib BANKRUPTCY_FILED_DT length = 8 format = DATE9. informat = DATE9. label = 'Bankruptcy Filed Date';
MPRINT(ETLS_LOADER):   attrib BANKRUPTCY_STATUS_CD length = $3 label = 'Bankruptcy Status Code';
MPRINT(ETLS_LOADER):   attrib CITY_NM length = $100 label = 'City Name';
MPRINT(ETLS_LOADER):   attrib CORE_MKT_PARTICIPANT_FLG length = $1 label = 'Core Mkt Participant Flag';
MPRINT(ETLS_LOADER):   attrib COUNTERPARTY_ASSOC_TYPE_CD length = $10 label = 'Equity Instrument Type Code';
MPRINT(ETLS_LOADER):   attrib COUNTERPARTY_GROUP_ID length = $32 label = 'Counterparty Group Id';
MPRINT(ETLS_LOADER):   attrib COUNTERPARTY_GROUP_PARENT_FLG length = $1 label = 'Counterparty Group Parent Flag';
MPRINT(ETLS_LOADER):   attrib COUNTERPARTY_ID length = $26 label = 'Counterparty Key';
MPRINT(ETLS_LOADER):   attrib COUNTERPARTY_RLN_TYPE_CD length = $3 label = 'Counterparty Relationship Type Code';
MPRINT(ETLS_LOADER):   attrib COUNTERPARTY_TYPE_CD length = $3 label = 'Counterparty Type Code';
MPRINT(ETLS_LOADER):   attrib COUNTRY_CD length = $3 label = 'Country Code';
MPRINT(ETLS_LOADER):   attrib COUNTRY_OF_RESIDENCY_CD length = $3 label = 'Country Of Residency Code';
MPRINT(ETLS_LOADER):   attrib CREDIT_BUREAU_SCORE length = 8 format = NLNUM8.2 informat = NLNUM8.2 label = 'Credit Bureau Score';
MPRINT(ETLS_LOADER):   attrib CREDIT_BUREAU_SCORE_DT length = 8 format = DATE9. informat = DATE9. label = 'Credit Bureau Score 
Date';
MPRINT(ETLS_LOADER):   attrib CREDIT_RATING_CD length = $20 label = 'Credit Rating Code';
MPRINT(ETLS_LOADER):   attrib CURRENCY_CD length = $3 label = 'Currency Code';
MPRINT(ETLS_LOADER):   attrib CUSTOMER_TYPE_CD length = $3 label = 'Customer Type Code';
MPRINT(ETLS_LOADER):   attrib DELINQUENT_FLG length = $1 label = 'Delinquent Flag';
MPRINT(ETLS_LOADER):   attrib DISTRICT_NM length = $40 label = 'District Name';
MPRINT(ETLS_LOADER):   attrib DOMESTIC_CURRENCY_CD length = $3 label = 'Currency Code';
MPRINT(ETLS_LOADER):   attrib DRIVER_LICENSE_ID length = $32 label = 'Driver License ID';
MPRINT(ETLS_LOADER):   attrib DRIVERS_LIC_EXPIRATION_DT length = 8 format = DATE9. informat = DATE9. label = 'Drivers License 
Expiration Date';
MPRINT(ETLS_LOADER):   attrib ECONOMIC_SECTOR_CD length = $3 label = 'Economic Sector Code';
MPRINT(ETLS_LOADER):   attrib EFFECTIVE_FROM_DTTM length = 8 format = NLDATM21. informat = NLDATM21. label = 'Effective From 
Datetime';
MPRINT(ETLS_LOADER):   attrib EFFECTIVE_TO_DTTM length = 8 format = NLDATM21. informat = NLDATM21. label = 'Effective To Datetime';
MPRINT(ETLS_LOADER):   attrib EMPLOYEE_ID length = $32 label = 'Employee Key';
MPRINT(ETLS_LOADER):   attrib FINANCIAL_ASSOCIATE_RK length = 8 format = 12. informat = 12. label = 'Financial Associate Key';
MPRINT(ETLS_LOADER):   attrib FIRST_NM length = $40 label = 'First Name';
MPRINT(ETLS_LOADER):   attrib FORECLOSED_FLG length = $1 label = 'Foreclosed Flag';
MPRINT(ETLS_LOADER):   attrib HIGH_RISK_CATEGORY_FLG length = $1 label = 'High Risk Category Flag';
MPRINT(ETLS_LOADER):   attrib HOUSEHOLD_RK length = 8 format = 12. informat = 12. label = 'Household Key';
MPRINT(ETLS_LOADER):   attrib IND_CORP_TYPE length = $3;
MPRINT(ETLS_LOADER):   attrib IND_EXTERNAL_CUST_TYPE length = $2;
MPRINT(ETLS_LOADER):   attrib INTERNAL_ORG_RK length = 8 format = 12. informat = 12. label = 'Internal Organization Key';
MPRINT(ETLS_LOADER):   attrib LAST_NM length = $40 label = 'Last Name';
MPRINT(ETLS_LOADER):   attrib LEGAL_JUDGEMENT_FLG length = $1 label = 'Legal Judgement Flag';
MPRINT(ETLS_LOADER):   attrib MIDDLE_INITIALS length = $20 label = 'Middle Initials';
MPRINT(ETLS_LOADER):   attrib MIDDLE_NM length = $40 label = 'Middle Name';
MPRINT(ETLS_LOADER):   attrib MODEL_RK length = 8 format = 12. informat = 12. label = 'Model Key';
MPRINT(ETLS_LOADER):   attrib NM_SUFFIX_TXT length = $40 label = 'Name Suffix';
MPRINT(ETLS_LOADER):   attrib PASSPORT_EXPIRATION_DT length = 8 format = DATE9. informat = DATE9. label = 'Passport Expiration 
Date';
MPRINT(ETLS_LOADER):   attrib PASSPORT_NO length = $32 label = 'Passport No';
MPRINT(ETLS_LOADER):   attrib PENDING_LAWSUIT_FLG length = $1 label = 'Pending Lawsuit Flag';
MPRINT(ETLS_LOADER):   attrib POSTAL_CD length = $20 label = 'Postal Code';
111                                                        The SAS System                                19:16 Friday, April 4, 2008

MPRINT(ETLS_LOADER):   attrib PRIM_BRANCH_FINANCIAL_UNIT_RK length = 8 format = 12. informat = 12. label = 'Primary Branch 
Financial Unit Key';
MPRINT(ETLS_LOADER):   attrib PROCESSED_DTTM length = 8 format = NLDATM21. informat = NLDATM21. label = 'Processed Datetime';
MPRINT(ETLS_LOADER):   attrib REGLTRY_COUNTERPARTY_TYPE_CD length = $3 label = 'Basel Portfolio Code';
MPRINT(ETLS_LOADER):   attrib RISK_WEIGHT_PCT length = 8 format = NLNUM9.4 informat = NLNUM9.4 label = 'Risk Weight Percent';
MPRINT(ETLS_LOADER):   attrib SALUTATION_NM length = $20 label = 'Salutation Name';
MPRINT(ETLS_LOADER):   attrib SEC_BRANCH_FINANCIAL_UNIT_RK length = 8 format = 12. informat = 12. label = 'Secondary Branch 
Financial Unit Key';
MPRINT(ETLS_LOADER):   attrib SECNDRY_CITIZENSHIP_COUNTRY_CD length = $3 label = 'Country Code';
MPRINT(ETLS_LOADER):   attrib SOCIAL_SECURITY_NO length = $20 label = 'Social Security No';
MPRINT(ETLS_LOADER):   attrib SOURCE_SYSTEM_CD length = $3 label = 'Source System Code';
MPRINT(ETLS_LOADER):   attrib STATE_REGION_CD length = $4 label = 'State Region Code';
MPRINT(ETLS_LOADER):   attrib TAX_ID length = $32 label = 'Tax Id';
MPRINT(ETLS_LOADER):   attrib TAX_ID_TYPE_CD length = $3 label = 'Tax Id Type Code';
MPRINT(ETLS_LOADER):   attrib TAX_STATUS_CD length = $3 label = 'Tax Status Code';
MPRINT(ETLS_LOADER):   attrib TITLE_TXT length = $20 label = 'Title Text';
MPRINT(ETLS_LOADER):   attrib TOTAL_ASSET_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5 label = 'Total Asset Amount';
MPRINT(ETLS_LOADER):   attrib TOTAL_LIABILITY_AMT length = 8 format = NLNUM18.5 informat = NLNUM18.5 label = 'Total Liability 
Amount';
MPRINT(ETLS_LOADER):   attrib VALID_FROM_DTTM length = 8 format = NLDATM21. informat = NLDATM21. label = 'Valid From Datetime';
MPRINT(ETLS_LOADER):   attrib VALID_TO_DTTM length = 8 format = NLDATM21. informat = NLDATM21. label = 'Valid To Datetime';
MPRINT(ETLS_LOADER):   stop;
MPRINT(ETLS_LOADER):   run;

NOTE: Variable ADDRESS_LINE_1_TXT is uninitialized.
NOTE: Variable ADDRESS_LINE_2_TXT is uninitialized.
NOTE: Variable ADDRESS_LINE_3_TXT is uninitialized.
NOTE: Variable ADDRESS_LINE_4_TXT is uninitialized.
NOTE: Variable ADDRESS_TYPE_CD is uninitialized.
NOTE: Variable ANNUAL_INCOME_AMT is uninitialized.
NOTE: Variable ASSOCIATE_COUNTERPARTY_RK is uninitialized.
NOTE: Variable ASSOCIATE_COUNTERPARTY_ID is uninitialized.
NOTE: Variable BANKRUPTCY_FILED_DT is uninitialized.
NOTE: Variable BANKRUPTCY_STATUS_CD is uninitialized.
NOTE: Variable CITY_NM is uninitialized.
NOTE: Variable CORE_MKT_PARTICIPANT_FLG is uninitialized.
NOTE: Variable COUNTERPARTY_ASSOC_TYPE_CD is uninitialized.
NOTE: Variable COUNTERPARTY_GROUP_ID is uninitialized.
NOTE: Variable COUNTERPARTY_GROUP_PARENT_FLG is uninitialized.
NOTE: Variable COUNTERPARTY_ID is uninitialized.
NOTE: Variable COUNTERPARTY_RLN_TYPE_CD is uninitialized.
NOTE: Variable COUNTERPARTY_TYPE_CD is uninitialized.
NOTE: Variable COUNTRY_CD is uninitialized.
NOTE: Variable COUNTRY_OF_RESIDENCY_CD is uninitialized.
NOTE: Variable CREDIT_BUREAU_SCORE is uninitialized.
NOTE: Variable CREDIT_BUREAU_SCORE_DT is uninitialized.
NOTE: Variable CREDIT_RATING_CD is uninitialized.
NOTE: Variable CURRENCY_CD is uninitialized.
NOTE: Variable CUSTOMER_TYPE_CD is uninitialized.
NOTE: Variable DELINQUENT_FLG is uninitialized.
NOTE: Variable DISTRICT_NM is uninitialized.
NOTE: Variable DOMESTIC_CURRENCY_CD is uninitialized.
NOTE: Variable DRIVER_LICENSE_ID is uninitialized.
NOTE: Variable DRIVERS_LIC_EXPIRATION_DT is uninitialized.
NOTE: Variable ECONOMIC_SECTOR_CD is uninitialized.
NOTE: Variable EFFECTIVE_FROM_DTTM is uninitialized.
NOTE: Variable EFFECTIVE_TO_DTTM is uninitialized.
NOTE: Variable EMPLOYEE_ID is uninitialized.
112                                                        The SAS System                                19:16 Friday, April 4, 2008

NOTE: Variable FINANCIAL_ASSOCIATE_RK is uninitialized.
NOTE: Variable FIRST_NM is uninitialized.
NOTE: Variable FORECLOSED_FLG is uninitialized.
NOTE: Variable HIGH_RISK_CATEGORY_FLG is uninitialized.
NOTE: Variable HOUSEHOLD_RK is uninitialized.
NOTE: Variable IND_CORP_TYPE is uninitialized.
NOTE: Variable IND_EXTERNAL_CUST_TYPE is uninitialized.
NOTE: Variable INTERNAL_ORG_RK is uninitialized.
NOTE: Variable LAST_NM is uninitialized.
NOTE: Variable LEGAL_JUDGEMENT_FLG is uninitialized.
NOTE: Variable MIDDLE_INITIALS is uninitialized.
NOTE: Variable MIDDLE_NM is uninitialized.
NOTE: Variable MODEL_RK is uninitialized.
NOTE: Variable NM_SUFFIX_TXT is uninitialized.
NOTE: Variable PASSPORT_EXPIRATION_DT is uninitialized.
NOTE: Variable PASSPORT_NO is uninitialized.
NOTE: Variable PENDING_LAWSUIT_FLG is uninitialized.
NOTE: Variable POSTAL_CD is uninitialized.
NOTE: Variable PRIM_BRANCH_FINANCIAL_UNIT_RK is uninitialized.
NOTE: Variable PROCESSED_DTTM is uninitialized.
NOTE: Variable REGLTRY_COUNTERPARTY_TYPE_CD is uninitialized.
NOTE: Variable RISK_WEIGHT_PCT is uninitialized.
NOTE: Variable SALUTATION_NM is uninitialized.
NOTE: Variable SEC_BRANCH_FINANCIAL_UNIT_RK is uninitialized.
NOTE: Variable SECNDRY_CITIZENSHIP_COUNTRY_CD is uninitialized.
NOTE: Variable SOCIAL_SECURITY_NO is uninitialized.
NOTE: Variable SOURCE_SYSTEM_CD is uninitialized.
NOTE: Variable STATE_REGION_CD is uninitialized.
NOTE: Variable TAX_ID is uninitialized.
NOTE: Variable TAX_ID_TYPE_CD is uninitialized.
NOTE: Variable TAX_STATUS_CD is uninitialized.
NOTE: Variable TITLE_TXT is uninitialized.
NOTE: Variable TOTAL_ASSET_AMT is uninitialized.
NOTE: Variable TOTAL_LIABILITY_AMT is uninitialized.
NOTE: Variable VALID_FROM_DTTM is uninitialized.
NOTE: Variable VALID_TO_DTTM is uninitialized.
NOTE: The data set STAGING.STG_INDIVIDUAL_CUSTOMER_ALS has 0 observations and 70 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MLOGIC(ETLS_LOADER):  %PUT NOTE: Appending data ...
NOTE: Appending data ...
SYMBOLGEN:  Macro variable ETLS_LASTTABLE resolves to WORK.mapped
SYMBOLGEN:  Macro variable SYSOPT resolves to 
MPRINT(ETLS_LOADER):   proc append base = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS data = WORK.mapped () force;
113                                                        The SAS System                                19:16 Friday, April 4, 2008

MPRINT(ETLS_LOADER):   run;

NOTE: Appending WORK.MAPPED to STAGING.STG_INDIVIDUAL_CUSTOMER_ALS.
NOTE: There were 142525 observations read from the data set WORK.MAPPED.
NOTE: 142525 observations added.
NOTE: The data set STAGING.STG_INDIVIDUAL_CUSTOMER_ALS has 142525 observations and 70 variables.
NOTE: View WORK.W5HKAADN.VIEW used (Total process time):
      real time           2.66 seconds
      cpu time            2.09 seconds
      
NOTE: There were 142509 observations read from the data set WORK.W5GWOI7C.
NOTE: There were 142509 observations read from the data set WORK.W5JCO6M0.
NOTE: There were 16 observations read from the data set WORK.W5GWKEDS.
NOTE: There were 16 observations read from the data set WORK.W5JCO6MB.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           2.66 seconds
      cpu time            2.09 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MPRINT(ETLS_LOADER):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_LOADER):   delete mapped;
MPRINT(ETLS_LOADER):   quit;
NOTE: Deleting WORK.MAPPED (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_RECORDSAFTER)
MLOGIC(ETLS_RECORDCHECK):  Beginning execution.
MLOGIC(ETLS_RECORDCHECK):  %LET (variable name is ETLS_RECCHECKEXIST)
SYMBOLGEN:  Macro variable ETLS_RECCHECKEXIST resolves to 1
MLOGIC(ETLS_RECORDCHECK):  %IF condition (&etls_recCheckExist) is TRUE
MPRINT(ETLS_RECORDCHECK):   proc contents data = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS out = work.etls_contents(keep = nobs) noprint;
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: The data set WORK.ETLS_CONTENTS has 70 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   data _null_;
MPRINT(ETLS_RECORDCHECK):   set work.etls_contents (obs = 1);
MPRINT(ETLS_RECORDCHECK):   call symput("etls_recordsAfter", left(put(nobs,32.)));
MPRINT(ETLS_RECORDCHECK):   run;

114                                                        The SAS System                                19:16 Friday, April 4, 2008

NOTE: There were 1 observations read from the data set WORK.ETLS_CONTENTS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_RECORDCHECK):   delete etls_contents;
MPRINT(ETLS_RECORDCHECK):   quit;

NOTE: Deleting WORK.ETLS_CONTENTS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_RECORDCHECK):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MLOGIC(ETLS_LOADER):  Ending execution.
4563       
4564       /*============================================================================*
4565        * Step:          Handle Invalid Values                     A5SFKZBN.BS000U94 *
4566        * Transform:     Handle Invalid Values                                       *
4567        * Description:                                                               *
4568        *                                                                            *
4569        * Source Table:  Splitter Target 1 - work.W5GWKEDS         A5SFKZBN.BQ000RY7 *
4570        * Target Table:  as - work.W5H9K8NY                        A5SFKZBN.BQ000RYA *
4571        *============================================================================*/
4572       
4573       %let SYSLAST = %nrquote(work.W5GWKEDS);
4574       
4575       %let transformID = %quote(A5SFKZBN.BS000U94);
4576       
4577       %let trans_rc = 0;
4578       
4579       /* Source table(s)/view(s)  */
4580       %let _INPUT0 = work.W5GWKEDS;
4581       
4582       /* Target table/view(s)  */
4583       %let _OUTPUT = work.W5H9K8NY;
4584       %let _OUTPUT0 = work.W5H9K8NY;
4585       
4586       /* Options  */
4587       %let columns = ;
4588       %let DWC = ;
4589       %let DWOC = ;
4590       %let OTHSRCTABLE = ;
4591       %let SRCOTH = RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD
4592               RM_INDUSTRY_CLASS;
4593       %let OTH = ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD
4594               POSTAL_CD ECONOMIC_SECTOR_CD;
4595       %let key = REPL_ID;
4596       %let SOURCECOL = SOURCE_SYSTEM_CD;
4597       
4598       /* List of target columns to keep  */
4599       %let keep = SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC KEY PROCESSED_DTTM;
4600       
4601       %macro invalid_values;
115                                                        The SAS System                                19:16 Friday, April 4, 2008

4602       	%let key=%sysfunc(compbl(&key));/*Key column/s of invalid rows*/
4603       	%if &SOURCECOL eq %str( ) %then %let SOURCECOL="&OTHSRCTABLE.";
4604       	%if &OTH ne %str( ) %then %do;/*Invalid formats*/
4605       		%let OTH=%sysfunc(compbl(&OTH));
4606       		%let numOTH= %sysfunc(sum(%sysfunc(countc(&OTH, %str( ))),1));
4607       		%put numOTH=&numOTH;
4608       	%end;
4609       	%if &SRCOTH ne %str( ) %then %do;/*Source column/s of invalid formats*/
4610       		%let SRCOTH=%sysfunc(compbl(&SRCOTH));
4611       		%let numSRCOTH= %sysfunc(sum(%sysfunc(countc(&SRCOTH, %str( ))),1));
4612       		%put numSRCOTH=&numSRCOTH;
4613       	%end;
4614       	%if &DWC ne %str( ) %then %do;/*Invalid Date with Cutoff*/
4615       		%let DWC=%sysfunc(compbl(&DWC));
4616       		%let numDWC= %sysfunc(sum(%sysfunc(countc(&DWC, %str( ))),1));
4617       		%put numDWC=&numDWC;
4618       	%end;
4619       	%if &DWOC ne %str( ) %then %do;/*Invalid Date without cutoff*/
4620       		%let DWOC=%sysfunc(compbl(&DWOC));
4621       		%let numDWOC= %sysfunc(sum(%sysfunc(countc(&DWOC, %str( ))),1));
4622       		%put numDWOC=&numDWOC;
4623       	%end;
4624       	%if &columns ne %str( ) %then %do;/*Invalid Numeric columns*/
4625       		%let columns=%sysfunc(compbl(&columns));
4626       		%let numcol= %sysfunc(sum(%sysfunc(countc(&columns, %str( ))),1));
4627       		%put numcol=&numcol;
4628       	%end;	
4629       	%let _key=%sysfunc(tranwrd(&key,%str( ),%str(, )));
4630       	%macro insert_exception;
4631       		data EXCEPTION (keep=SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC KEY PROCESSED_DTTM);
4632       			length SOURCE_TABLE $100 EXCEPTION_CD $32 EXCEPTION_DESC $100 KEY $32 PROCESSED_DTTM 8;
4633       			set &_INPUT0;
4634       			%if &columns ne %str( ) %then %do;
4635       				%do i=1 %to &numcol.;
4636       					%let colname=%scan(&columns.,&i.);
4637       					if %scan(&columns.,&i.)=. then do;
4638       						SOURCE_TABLE=scan("&_INPUT0.",2,'_');
4639       						EXCEPTION_CD="0003";
4640       						EXCEPTION_DESC="Invalid Numeric Values" || " (&colname)";
4641       						KEY=catt(&_key.);
4642       						PROCESSED_DTTM=datetime();
4643       						output;
4644       					end;
4645       				%end;
4646       			%end;
4647       			%if &DWC ne %str( ) %then %do;
4648       				%do j=1 %to &numDWC.;
4649       					%let colname=%scan(&DWC.,&j.);
4650       					if %scan(&DWC.,&j.)=. |  %scan(&DWC.,&j.) ge today() then do;
4651       						SOURCE_TABLE=scan("&_INPUT0.",2,'_');
4652       						EXCEPTION_CD="0004";
4653       						EXCEPTION_DESC="Invalid Date Values" || " (&colname)";
4654       						KEY=catt(&_key.);
4655       						PROCESSED_DTTM=datetime();
4656       						output;
4657       					end;
4658       				%end;
4659       			%end;
116                                                        The SAS System                                19:16 Friday, April 4, 2008

4660       			%if &DWOC ne %str( ) %then %do;
4661       				%do k=1 %to &numDWOC.;
4662       					%let colname=%scan(&DWOC.,&k.);
4663       					if %scan(&DWOC.,&k.)=. then do;
4664       						SOURCE_TABLE=scan("&_INPUT0.",2,'_');
4665       						EXCEPTION_CD="0004";
4666       						EXCEPTION_DESC="Invalid Date Values" || " (&colname)";
4667       						KEY=catt(&_key.);
4668       						PROCESSED_DTTM=datetime();
4669       						output;
4670       					end;
4671       				%end;
4672       			%end;
4673       			%if &OTH ne %str( ) %then %do;
4674       				%do l=1 %to &numOTH.;
4675       					%let colname=%scan(&OTH.,&l.);
4676       					%let colsource=%scan(&SRCOTH.,&l.);
4677       					if %scan(&OTH.,&l.)="OTH" |  compress(%scan(&OTH.,&l.)) eq '' then do;
4678       						SOURCE_TABLE=&SOURCECOL.;
4679       						EXCEPTION_CD="0005";
4680       						EXCEPTION_DESC=compbl("Invalid Source Code" || " (&colname), source value (" || &colsource. || ")");
4681       						KEY=catt(&_key.);
4682       						PROCESSED_DTTM=datetime();
4683       						output;
4684       					end;
4685       				%end;
4686       			%end;
4687       		run;
4688       		proc sql noprint;
4689       			delete *
4690       			from EXCEPTION
4691       			where  SOURCE_TABLE is null & EXCEPTION_CD is null & EXCEPTION_DESC is null &
4692       					 KEY is null
4693       			;
4694       			select count(*) into :nobs
4695       			from EXCEPTION
4696       			;
4697       		quit;
4698       		%if &nobs ne 0 %then %do;
4699       			proc sql;
4700       				insert into &_OUTPUT0.
4701       				select *
4702       				from EXCEPTION
4703       				;
4704       				drop table EXCEPTION;
4705       			quit;
4706       		%end;
4707       		%else %do;
4708       			%put No Invalid data.;
4709       		%end;
4710       	%mend;
4711       	%if %sysfunc(exist(&_OUTPUT0.)) = 0 %then %do;
4712       		proc sql;
4713       			create table &_OUTPUT0.
4714       			(
4715       				SOURCE_TABLE char(100),
4716       				EXCEPTION_CD char(32),
4717       				EXCEPTION_DESC char(100),
117                                                        The SAS System                                19:16 Friday, April 4, 2008

4718       				KEY char(32),
4719       				PROCESSED_DTTM num format=date9.
4720       			);
4721       		quit;
4722       		%insert_exception
4723       	%end;
4724       	%else %do;
4725       		%insert_exception
4726       	%end;
4727       %mend;
4728       %invalid_values;
MLOGIC(INVALID_VALUES):  Beginning execution.
MLOGIC(INVALID_VALUES):  %LET (variable name is KEY)
SYMBOLGEN:  Macro variable KEY resolves to REPL_ID
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MLOGIC(INVALID_VALUES):  %IF condition &SOURCECOL eq   is FALSE
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD          
            POSTAL_CD ECONOMIC_SECTOR_CD
MLOGIC(INVALID_VALUES):  %IF condition &OTH ne   is TRUE
MLOGIC(INVALID_VALUES):  %LET (variable name is OTH)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD          
            POSTAL_CD ECONOMIC_SECTOR_CD
MLOGIC(INVALID_VALUES):  %LET (variable name is NUMOTH)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
MLOGIC(INVALID_VALUES):  %PUT numOTH=&numOTH
SYMBOLGEN:  Macro variable NUMOTH resolves to 6
numOTH=6
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD          
            RM_INDUSTRY_CLASS
MLOGIC(INVALID_VALUES):  %IF condition &SRCOTH ne   is TRUE
MLOGIC(INVALID_VALUES):  %LET (variable name is SRCOTH)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD          
            RM_INDUSTRY_CLASS
MLOGIC(INVALID_VALUES):  %LET (variable name is NUMSRCOTH)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
MLOGIC(INVALID_VALUES):  %PUT numSRCOTH=&numSRCOTH
SYMBOLGEN:  Macro variable NUMSRCOTH resolves to 6
numSRCOTH=6
SYMBOLGEN:  Macro variable DWC resolves to 
MLOGIC(INVALID_VALUES):  %IF condition &DWC ne   is FALSE
SYMBOLGEN:  Macro variable DWOC resolves to 
MLOGIC(INVALID_VALUES):  %IF condition &DWOC ne   is FALSE
SYMBOLGEN:  Macro variable COLUMNS resolves to 
MLOGIC(INVALID_VALUES):  %IF condition &columns ne   is FALSE
MLOGIC(INVALID_VALUES):  %LET (variable name is _KEY)
SYMBOLGEN:  Macro variable KEY resolves to REPL_ID
SYMBOLGEN:  Macro variable _OUTPUT0 resolves to work.W5H9K8NY
MLOGIC(INVALID_VALUES):  %IF condition %sysfunc(exist(&_OUTPUT0.)) = 0 is TRUE
MPRINT(INVALID_VALUES):   proc sql;
SYMBOLGEN:  Macro variable _OUTPUT0 resolves to work.W5H9K8NY
MPRINT(INVALID_VALUES):   create table work.W5H9K8NY ( SOURCE_TABLE char(100), EXCEPTION_CD char(32), EXCEPTION_DESC char(100), KEY 
char(32), PROCESSED_DTTM num format=date9. );
NOTE: Table WORK.W5H9K8NY created, with 0 rows and 5 columns.
MPRINT(INVALID_VALUES):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
118                                                        The SAS System                                19:16 Friday, April 4, 2008

      cpu time            0.01 seconds
      

MLOGIC(INSERT_EXCEPTION):  Beginning execution.
MPRINT(INSERT_EXCEPTION):   data EXCEPTION (keep=SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC KEY PROCESSED_DTTM);
MPRINT(INSERT_EXCEPTION):   length SOURCE_TABLE $100 EXCEPTION_CD $32 EXCEPTION_DESC $100 KEY $32 PROCESSED_DTTM 8;
SYMBOLGEN:  Macro variable _INPUT0 resolves to work.W5GWKEDS
MPRINT(INSERT_EXCEPTION):   set work.W5GWKEDS;
SYMBOLGEN:  Macro variable COLUMNS resolves to 
MLOGIC(INSERT_EXCEPTION):  %IF condition &columns ne   is FALSE
SYMBOLGEN:  Macro variable DWC resolves to 
MLOGIC(INSERT_EXCEPTION):  %IF condition &DWC ne   is FALSE
SYMBOLGEN:  Macro variable DWOC resolves to 
MLOGIC(INSERT_EXCEPTION):  %IF condition &DWOC ne   is FALSE
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
MLOGIC(INSERT_EXCEPTION):  %IF condition &OTH ne   is TRUE
SYMBOLGEN:  Macro variable NUMOTH resolves to 6
MLOGIC(INSERT_EXCEPTION):  %DO loop beginning; index variable L; start value is 1; stop value is 6; by value is 1.  
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 1
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
SYMBOLGEN:  Macro variable L resolves to 1
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 1
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 1
MPRINT(INSERT_EXCEPTION):   if ADDRESS_TYPE_CD="OTH" | compress(ADDRESS_TYPE_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to ADDRESS_TYPE_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to RM_ADDR_TYPE_CD
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (ADDRESS_TYPE_CD), source value (" || RM_ADDR_TYPE_CD 
|| ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 2; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 2
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
SYMBOLGEN:  Macro variable L resolves to 2
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 2
119                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 2
MPRINT(INSERT_EXCEPTION):   if COUNTRY_CD="OTH" | compress(COUNTRY_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTRY_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to RM_ADDR_CTRY
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTRY_CD), source value (" || RM_ADDR_CTRY || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 3; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 3
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
SYMBOLGEN:  Macro variable L resolves to 3
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 3
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 3
MPRINT(INSERT_EXCEPTION):   if COUNTERPARTY_RLN_TYPE_CD="OTH" | compress(COUNTERPARTY_RLN_TYPE_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTERPARTY_RLN_TYPE_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to RM_DOSRI_CD
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTERPARTY_RLN_TYPE_CD), source value (" || 
RM_DOSRI_CD || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 4; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 4
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
SYMBOLGEN:  Macro variable L resolves to 4
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 4
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 4
120                                                        The SAS System                                19:16 Friday, April 4, 2008

MPRINT(INSERT_EXCEPTION):   if COUNTERPARTY_TYPE_CD="OTH" | compress(COUNTERPARTY_TYPE_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to COUNTERPARTY_TYPE_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to RM_BORROWER_CD
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (COUNTERPARTY_TYPE_CD), source value (" || 
RM_BORROWER_CD || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 5; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 5
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
SYMBOLGEN:  Macro variable L resolves to 5
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 5
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 5
MPRINT(INSERT_EXCEPTION):   if POSTAL_CD="OTH" | compress(POSTAL_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to POSTAL_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to RM_ADDR_ZIPCD
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (POSTAL_CD), source value (" || RM_ADDR_ZIPCD || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 6; loop will  iterate again.
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLNAME)
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 6
MLOGIC(INSERT_EXCEPTION):  %LET (variable name is COLSOURCE)
SYMBOLGEN:  Macro variable SRCOTH resolves to RM_ADDR_TYPE_CD RM_ADDR_CTRY RM_DOSRI_CD RM_BORROWER_CD RM_ADDR_ZIPCD 
            RM_INDUSTRY_CLASS
SYMBOLGEN:  Macro variable L resolves to 6
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 6
SYMBOLGEN:  Macro variable OTH resolves to ADDRESS_TYPE_CD COUNTRY_CD COUNTERPARTY_RLN_TYPE_CD COUNTERPARTY_TYPE_CD POSTAL_CD 
            ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable L resolves to 6
MPRINT(INSERT_EXCEPTION):   if ECONOMIC_SECTOR_CD="OTH" | compress(ECONOMIC_SECTOR_CD) eq '' then do;
SYMBOLGEN:  Macro variable SOURCECOL resolves to SOURCE_SYSTEM_CD
MPRINT(INSERT_EXCEPTION):   SOURCE_TABLE=SOURCE_SYSTEM_CD;
121                                                        The SAS System                                19:16 Friday, April 4, 2008

MPRINT(INSERT_EXCEPTION):   EXCEPTION_CD="0005";
SYMBOLGEN:  Macro variable COLNAME resolves to ECONOMIC_SECTOR_CD
SYMBOLGEN:  Macro variable COLSOURCE resolves to RM_INDUSTRY_CLASS
MPRINT(INSERT_EXCEPTION):   EXCEPTION_DESC=compbl("Invalid Source Code" || " (ECONOMIC_SECTOR_CD), source value (" || 
RM_INDUSTRY_CLASS || ")");
SYMBOLGEN:  Macro variable _KEY resolves to REPL_ID
MPRINT(INSERT_EXCEPTION):   KEY=catt(REPL_ID);
MPRINT(INSERT_EXCEPTION):   PROCESSED_DTTM=datetime();
MPRINT(INSERT_EXCEPTION):   output;
MPRINT(INSERT_EXCEPTION):   end;
MLOGIC(INSERT_EXCEPTION):  %DO loop index variable L is now 7; loop will not iterate again.
MPRINT(INSERT_EXCEPTION):   run;

NOTE: There were 16 observations read from the data set WORK.W5GWKEDS.
NOTE: The data set WORK.EXCEPTION has 32 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(INSERT_EXCEPTION):   proc sql noprint;
MPRINT(INSERT_EXCEPTION):   delete * from EXCEPTION where SOURCE_TABLE is null & EXCEPTION_CD is null & EXCEPTION_DESC is null & 
KEY is null ;
NOTE: No rows were deleted from WORK.EXCEPTION.

MPRINT(INSERT_EXCEPTION):   select count(*) into :nobs from EXCEPTION ;
MPRINT(INSERT_EXCEPTION):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable NOBS resolves to       32
MLOGIC(INSERT_EXCEPTION):  %IF condition &nobs ne 0 is TRUE
MPRINT(INSERT_EXCEPTION):   proc sql;
SYMBOLGEN:  Macro variable _OUTPUT0 resolves to work.W5H9K8NY
MPRINT(INSERT_EXCEPTION):   insert into work.W5H9K8NY select * from EXCEPTION ;
NOTE: 32 rows were inserted into WORK.W5H9K8NY.

MPRINT(INSERT_EXCEPTION):   drop table EXCEPTION;
NOTE: Table WORK.EXCEPTION has been dropped.
MPRINT(INSERT_EXCEPTION):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(INSERT_EXCEPTION):  Ending execution.
MLOGIC(INVALID_VALUES):  Ending execution.
4729       
4730       
4731       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
122                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
4732       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
4733       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
4734       
4735       /*============================================================================*
4736        * Step:          Append                                    A5SFKZBN.BS000U93 *
4737        * Transform:     Append                                                      *
4738        * Description:                                                               *
4739        *                                                                            *
4740        * Source Tables: as - work.W5H9K8AE                        A5SFKZBN.BQ000RY9 *
4741        *                as - work.W5H9K8NY                        A5SFKZBN.BQ000RYA *
4742        * Target Table:  AppendWorkTableName - work.W5H9KM5A       A5SFKZBN.BQ000RYB *
4743        *============================================================================*/
4744       
4745       %let transformID = %quote(A5SFKZBN.BS000U93);
4746       
4747       %let trans_rc = 0;
4748       
4749       proc datasets lib = work nolist nowarn memtype = (data view);
4750          delete W5H9KM5A;
4751       quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

4752       
4753       data work.W5H9KM5A / view=work.W5H9KM5A;
4754          set work.W5H9K8AE
4755              work.W5H9K8NY;
4756          keep KEY SOURCE_TABLE EXCEPTION_CD EXCEPTION_DESC PROCESSED_DTTM;
4757       run;

NOTE: DATA STEP view saved on file WORK.W5H9KM5A.
123                                                        The SAS System                                19:16 Friday, April 4, 2008

NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

4758       
4759       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
4760       
4761       /*============================================================================*
4762        * Step:          Table Loader                              A5SFKZBN.BS000U9N *
4763        * Transform:     Table Loader (Version 2)                                    *
4764        * Description:                                                               *
4765        *                                                                            *
4766        * Source Table:  AppendWorkTableName - work.W5H9KM5A       A5SFKZBN.BQ000RYB *
4767        * Target Table:  Exception Table - admin.Exception_Table   A5SFKZBN.BK0003UX *
4768        *============================================================================*/
4769       
4770       /* Access the data for ADMIN SHARE  */
4771       LIBNAME admin REMOTE  HOSTNAME="baslstsp"  Server=sasshr slibref=ADMIN sapw=XXXXXXXXXXXXXXXXXXXXXX ;
NOTE: Libref ADMIN was successfully assigned as follows: 
      Engine:        REMOTE 
      Physical Name: /sasdata/admin
4772       %rcSet(&syslibrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSLIBRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
4773       
4774       %let SYSLAST = %nrquote(work.W5H9KM5A);
4775       
4776       %let transformID = %quote(A5SFKZBN.BS000U9N);
4777       
4778       %let trans_rc = 0;
4779       
4780       %global etls_tableExist;
4781       %global etls_numIndex;
4782       %global etls_lastTable;
4783       %let etls_tableExist = -1;
4784       %let etls_numIndex = -1;
4785       %let etls_lastTable = &SYSLAST;
SYMBOLGEN:  Macro variable SYSLAST resolves to WORK.W5H9KM5A                        
124                                                        The SAS System                                19:16 Friday, April 4, 2008

4786       
4787       /*---- Define load data macro  ----*/
4788       %macro etls_loader;
4789       
4790          %let SYSOPT = ;
4791       
4792          /* Get number of records in table  */
4793          %let etls_recordsBefore = 0;
4794          %macro etls_recordCheck;
4795             %let etls_recCheckExist = %eval(%sysfunc(exist(admin.Exception_Table, DATA)) or
4796                   %sysfunc(exist(admin.Exception_Table, VIEW)));
4797       
4798             %if (&etls_recCheckExist) %then
4799             %do;
4800                proc contents data = admin.Exception_Table out = work.etls_contents(keep = nobs) noprint;
4801                run;
4802       
4803                data _null_;
4804                   set work.etls_contents (obs = 1);
4805                   call symput("etls_recordsBefore", left(put(nobs,32.)));
4806                run;
4807       
4808                proc datasets lib = work nolist nowarn memtype = (data view);
4809                   delete etls_contents;
4810                quit;
4811       
4812             %end;
4813          %mend etls_recordCheck;
4814          %etls_recordCheck;
4815       
4816          %let etls_table = %nrquote(Exception Table);
4817          %let etls_lib   = %nrquote(ADMIN SHARE);
4818       
4819          /*---- Map the columns  ----*/
4820          proc datasets lib = work nolist nowarn memtype = (data view);
4821             delete mapped;
4822          quit;
4823       
4824          data _null_;
4825             put "NOTE: The following column(s) do not have a column mapping, so the"
4826                  " value(s) will be set to missing: SOURCE_TABLE, EXCEPTION_CD,"
4827                  " EXCEPTION_DESC, KEY, PROCESSED_DTTM";
4828          run;
4829       
4830          %put %str(NOTE: Mapping columns ...);
4831          proc sql;
4832             create view work.mapped as
4833                select "" as SOURCE_TABLE length = 32,
4834                       "" as EXCEPTION_CD length = 16,
4835                       "" as EXCEPTION_DESC length = 100,
4836                       "" as KEY length = 50,
4837                       . as PROCESSED_DTTM length = 8 format = Datetime.
4838                   from &etls_lastTable;
4839          quit;
4840       
4841          %let SYSLAST = work.mapped;
4842       
4843          %let etls_lastTable = &SYSLAST;
125                                                        The SAS System                                19:16 Friday, April 4, 2008

4844          %let SYSOPT = ;
4845       
4846          /* Determine if the target table exists  */
4847          %let etls_tableExist = %eval(%sysfunc(exist(admin.Exception_Table, DATA)) or
4848                %sysfunc(exist(admin.Exception_Table, VIEW)));
4849       
4850          /*---- Create a new table  ----*/
4851          %if (&etls_tableExist eq 0) %then
4852          %do;  /* if table does not exist  */
4853       
4854             %put %str(NOTE: Creating table ...);
4855       
4856             data admin.Exception_Table
4857                     (label = 'Exception Table');
4858                attrib SOURCE_TABLE length = $32;
4859                attrib EXCEPTION_CD length = $16;
4860                attrib EXCEPTION_DESC length = $100;
4861                attrib KEY length = $50;
4862                attrib PROCESSED_DTTM length = 8 format = Datetime.;
4863                stop;
4864             run;
4865       
4866             %rcSet(&syserr);
4867       
4868          %end;  /* if table does not exist  */
4869       
4870          /* Loader CI Selections: 'ASIS','ASIS','ASIS','ASIS' */
4871       
4872          /*---- Append new data  ----*/
4873          %put %str(NOTE: Appending data ...);
4874       
4875          proc append base = admin.Exception_Table
4876                      data = &etls_lastTable (&SYSOPT) force;
4877          run;
4878       
4879          %rcSet(&syserr);
4880       
4881          proc datasets lib = work nolist nowarn memtype = (data view);
4882             delete mapped;
4883          quit;
4884       
4885          /* Get number of records in table  */
4886          %let etls_recordsAfter = 0;
4887          %macro etls_recordCheck;
4888             %let etls_recCheckExist = %eval(%sysfunc(exist(admin.Exception_Table, DATA)) or
4889                   %sysfunc(exist(admin.Exception_Table, VIEW)));
4890       
4891             %if (&etls_recCheckExist) %then
4892             %do;
4893                proc contents data = admin.Exception_Table out = work.etls_contents(keep = nobs) noprint;
4894                run;
4895       
4896                data _null_;
4897                   set work.etls_contents (obs = 1);
4898                   call symput("etls_recordsAfter", left(put(nobs,32.)));
4899                run;
4900       
4901                proc datasets lib = work nolist nowarn memtype = (data view);
126                                                        The SAS System                                19:16 Friday, April 4, 2008

4902                   delete etls_contents;
4903                quit;
4904       
4905             %end;
4906          %mend etls_recordCheck;
4907          %etls_recordCheck;
4908       
4909       %mend etls_loader;
4910       %etls_loader;
MLOGIC(ETLS_LOADER):  Beginning execution.
MLOGIC(ETLS_LOADER):  %LET (variable name is SYSOPT)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_RECORDSBEFORE)
MLOGIC(ETLS_RECORDCHECK):  Beginning execution.
MLOGIC(ETLS_RECORDCHECK):  %LET (variable name is ETLS_RECCHECKEXIST)
SYMBOLGEN:  Macro variable ETLS_RECCHECKEXIST resolves to 1
MLOGIC(ETLS_RECORDCHECK):  %IF condition (&etls_recCheckExist) is TRUE
MPRINT(ETLS_RECORDCHECK):   proc contents data = admin.Exception_Table out = work.etls_contents(keep = nobs) noprint;
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: The data set WORK.ETLS_CONTENTS has 5 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   data _null_;
MPRINT(ETLS_RECORDCHECK):   set work.etls_contents (obs = 1);
MPRINT(ETLS_RECORDCHECK):   call symput("etls_recordsBefore", left(put(nobs,32.)));
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: There were 1 observations read from the data set WORK.ETLS_CONTENTS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_RECORDCHECK):   delete etls_contents;
MPRINT(ETLS_RECORDCHECK):   quit;

NOTE: Deleting WORK.ETLS_CONTENTS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_RECORDCHECK):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_TABLE)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_LIB)
MPRINT(ETLS_LOADER):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_LOADER):   delete mapped;
MPRINT(ETLS_LOADER):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
127                                                        The SAS System                                19:16 Friday, April 4, 2008


MPRINT(ETLS_LOADER):   data _null_;
MPRINT(ETLS_LOADER):   put "NOTE: The following column(s) do not have a column mapping, so the" " value(s) will be set to missing: 
SOURCE_TABLE, EXCEPTION_CD," " EXCEPTION_DESC, KEY, PROCESSED_DTTM";
MPRINT(ETLS_LOADER):   run;

NOTE: The following column(s) do not have a column mapping, so the value(s) will be set to missing: SOURCE_TABLE, EXCEPTION_CD,
 EXCEPTION_DESC, KEY, PROCESSED_DTTM
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_LOADER):  %PUT NOTE: Mapping columns ...
NOTE: Mapping columns ...
MPRINT(ETLS_LOADER):   proc sql;
SYMBOLGEN:  Macro variable ETLS_LASTTABLE resolves to WORK.W5H9KM5A
MPRINT(ETLS_LOADER):   create view work.mapped as select "" as SOURCE_TABLE length = 32, "" as EXCEPTION_CD length = 16, "" as 
EXCEPTION_DESC length = 100, "" as KEY length = 50, . as PROCESSED_DTTM length = 8 format = Datetime. from WORK.W5H9KM5A;
NOTE: SQL view WORK.MAPPED has been defined.
MPRINT(ETLS_LOADER):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_LOADER):  %LET (variable name is SYSLAST)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_LASTTABLE)
SYMBOLGEN:  Macro variable SYSLAST resolves to WORK.mapped                          
MLOGIC(ETLS_LOADER):  %LET (variable name is SYSOPT)
MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_TABLEEXIST)
SYMBOLGEN:  Macro variable ETLS_TABLEEXIST resolves to 1
MLOGIC(ETLS_LOADER):  %IF condition (&etls_tableExist eq 0) is FALSE
MLOGIC(ETLS_LOADER):  %PUT NOTE: Appending data ...
NOTE: Appending data ...
SYMBOLGEN:  Macro variable ETLS_LASTTABLE resolves to WORK.mapped
SYMBOLGEN:  Macro variable SYSOPT resolves to 
MPRINT(ETLS_LOADER):   proc append base = admin.Exception_Table data = WORK.mapped () force;
MPRINT(ETLS_LOADER):   run;

NOTE: Appending WORK.MAPPED to ADMIN.EXCEPTION_TABLE.
NOTE: There were 181305 observations read from the data set WORK.MAPPED.
NOTE: 181305 observations added.
NOTE: The data set ADMIN.EXCEPTION_TABLE has 1653870 observations and 5 variables.
NOTE: View WORK.W5H9KM5A.VIEW used (Total process time):
      real time           34.36 seconds
      cpu time            10.41 seconds
      
NOTE: There were 181273 observations read from the data set WORK.W5H9K8AE.
NOTE: There were 32 observations read from the data set WORK.W5H9K8NY.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           34.36 seconds
      cpu time            10.41 seconds
      

MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
128                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MPRINT(ETLS_LOADER):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_LOADER):   delete mapped;
MPRINT(ETLS_LOADER):   quit;
NOTE: Deleting WORK.MAPPED (memtype=VIEW).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_LOADER):  %LET (variable name is ETLS_RECORDSAFTER)
MLOGIC(ETLS_RECORDCHECK):  Beginning execution.
MLOGIC(ETLS_RECORDCHECK):  %LET (variable name is ETLS_RECCHECKEXIST)
SYMBOLGEN:  Macro variable ETLS_RECCHECKEXIST resolves to 1
MLOGIC(ETLS_RECORDCHECK):  %IF condition (&etls_recCheckExist) is TRUE
MPRINT(ETLS_RECORDCHECK):   proc contents data = admin.Exception_Table out = work.etls_contents(keep = nobs) noprint;
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: The data set WORK.ETLS_CONTENTS has 5 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   data _null_;
MPRINT(ETLS_RECORDCHECK):   set work.etls_contents (obs = 1);
MPRINT(ETLS_RECORDCHECK):   call symput("etls_recordsAfter", left(put(nobs,32.)));
MPRINT(ETLS_RECORDCHECK):   run;

NOTE: There were 1 observations read from the data set WORK.ETLS_CONTENTS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(ETLS_RECORDCHECK):   proc datasets lib = work nolist nowarn memtype = (data view);
MPRINT(ETLS_RECORDCHECK):   delete etls_contents;
MPRINT(ETLS_RECORDCHECK):   quit;

NOTE: Deleting WORK.ETLS_CONTENTS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MLOGIC(ETLS_RECORDCHECK):  Ending execution.
MPRINT(ETLS_LOADER):  ;
MLOGIC(ETLS_LOADER):  Ending execution.
4911       
4912       /*============================================================================*
4913        * Step:          Check Table Status                        A5SFKZBN.BS000U9I *
129                                                        The SAS System                                19:16 Friday, April 4, 2008

4914        * Transform:     Check Table Status                                          *
4915        * Description:   Check whether the loading of Source table is                *
4916        *                successful.Prerequisite:      1) Table should be            *
4917        *                registered in ADMIN_TABLE_LOG     2) Declare Libraries      *
4918        *                 Project Transform     3) Declare Macros                    *
4919        *                                                                            *
4920        * Source Table:  COPY_AMXURT00 - COPY.COPY_AMXURT00        A5SFKZBN.BK0002BF *
4921        * Target Table:  Check Table Status - work.W5GX7ZTA        A5SFKZBN.BQ000RYO *
4922        *============================================================================*/
4923       
4924       %let SYSLAST = %nrquote(COPY.COPY_AMXURT00);
4925       
4926       %let transformID = %quote(A5SFKZBN.BS000U9I);
4927       
4928       %let trans_rc = 0;
4929       
4930       /* Source table(s)/view(s)  */
4931       %let _INPUT0 = COPY.COPY_AMXURT00;
4932       
4933       /* Target table/view(s)  */
4934       %let _OUTPUT = work.W5GX7ZTA;
4935       %let _OUTPUT0 = work.W5GX7ZTA;
4936       
4937       /* Options  */
4938       
4939       /* List of target columns to keep  */
4940       %let keep = ;
4941       
4942       %macro CheckTableStatus;
4943       	%local STATUS PROD LIBRARY trigger;
4944       	%let PROD=%upcase(%scan(&_INPUT0., 2, .));
4945       	%let LIBRARY=%scan(&_INPUT0., 1, .);
4946       	%if &library = %str() %then %let library=WORK;
4947       	/* Start Check Table Existence*/
4948       	%if %sysfunc(exist(&LIBRARY..&PROD.)) %then %do;
4949       		proc sql noprint;
4950       			create table maxrundate as
4951       			select max(rundate_start) as maxrundate format datetime16.
4952       			from ADMIN.ADMIN_TABLE_LOG
4953       			where PRODUCT eq "&prod" & PROC_DATE in (
4954                                                   select MAX(PROC_DATE)
4955                                                   from ADMIN.ADMIN_TABLE_LOG
4956                                                   where UPCASE(PRODUCT) eq "&prod")
4957                ;
4958       			select jobstat into :status
4959       			from ADMIN.ADMIN_TABLE_LOG
4960       			where PRODUCT eq "&prod" & PROC_DATE in (
4961                                                   select MAX(PROC_DATE)
4962                                                   from ADMIN.ADMIN_TABLE_LOG
4963                                                   where UPCASE(PRODUCT) eq "&prod") &
4964          			                           	  RUNDATE_START eq (select maxrundate from maxrundate)
4965       			;
4966       			%put sqlobs=&sqlobs;
4967       			%put PROD=&PROD;
4968       		/*	%put maxprocdte=%sysfunc(putn(&MAXPROCDATE,datetime16.));*/
4969       			%put status=&STATUS;
4970       		quit;
4971       		data _null_;
130                                                        The SAS System                                19:16 Friday, April 4, 2008

4972       			set maxrundate;
4973       			put maxrundate=;
4974       			format maxrundate datetime16.;
4975       		run;
4976       		proc datasets library=WORK nolist;
4977       			delete maxrundate;
4978       		quit;
4979       		%if &sqlobs ne 0 %then %do; /*Check Table Registration in ATL*/
4980       			%if &STATUS = S %then %do;
4981       				%put NOTE: Loading of &PROD. is successful;
4982       				%put NOTE: Job will proceed;
4983       			%end;
4984       			%else %do;
4985       				data _null_;
4986       					%put ERROR: Loading of table &PROD. is Unsuccessful;
4987       					%put WARNING: Job will be aborted;		
4988       					abort;
4989       				run;
4990       			%end;
4991       		%end;/*End Check Table Registration in ATL*/
4992       		%else %do;
4993       			data _null_;
4994       				%put ERROR: &PROD. is not registered in ADMIN_TABLE_LOG or Error in ADMIN_TABLE_LOG_DATES;
4995       				%put WARNING: Job will be aborted;		
4996       				abort;
4997       			run;
4998       		%end;
4999       	%end;/*End Check Table Existence*/
5000       	%else %do;
5001       		data _null_;
5002       			%put ERROR: Dataset &LIBRARY..&PROD. does not exist;
5003       			%put WARNING: Job will be aborted;		
5004       			abort;
5005       		run;
5006       	%end;
5007       %mend;
5008       %CheckTableStatus
MLOGIC(CHECKTABLESTATUS):  Beginning execution.
MLOGIC(CHECKTABLESTATUS):  %LOCAL  STATUS PROD LIBRARY TRIGGER
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is PROD)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_AMXURT00
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is LIBRARY)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_AMXURT00
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
MLOGIC(CHECKTABLESTATUS):  %IF condition &library =  is FALSE
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
MLOGIC(CHECKTABLESTATUS):  %IF condition %sysfunc(exist(&LIBRARY..&PROD.)) is TRUE
MPRINT(CHECKTABLESTATUS):   proc sql noprint;
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
MPRINT(CHECKTABLESTATUS):   create table maxrundate as select max(rundate_start) as maxrundate format datetime16. from 
ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_AMXURT00" & PROC_DATE in ( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where 
UPCASE(PRODUCT) eq "COPY_AMXURT00") ;
NOTE: Table WORK.MAXRUNDATE created, with 1 rows and 1 columns.

SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
131                                                        The SAS System                                19:16 Friday, April 4, 2008

MPRINT(CHECKTABLESTATUS):   select jobstat into :status from ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_AMXURT00" & PROC_DATE in 
( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where UPCASE(PRODUCT) eq "COPY_AMXURT00") & RUNDATE_START eq (select maxrundate 
from maxrundate) ;
MLOGIC(CHECKTABLESTATUS):  %PUT sqlobs=&sqlobs
SYMBOLGEN:  Macro variable SQLOBS resolves to 1
sqlobs=1
MLOGIC(CHECKTABLESTATUS):  %PUT PROD=&PROD
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
PROD=COPY_AMXURT00
MLOGIC(CHECKTABLESTATUS):  %PUT status=&STATUS
SYMBOLGEN:  Macro variable STATUS resolves to S
status=S
MPRINT(CHECKTABLESTATUS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.14 seconds
      cpu time            0.02 seconds
      

MPRINT(CHECKTABLESTATUS):   data _null_;
MPRINT(CHECKTABLESTATUS):   set maxrundate;
MPRINT(CHECKTABLESTATUS):   put maxrundate=;
MPRINT(CHECKTABLESTATUS):   format maxrundate datetime16.;
MPRINT(CHECKTABLESTATUS):   run;

maxrundate=04APR08:19:07:00
NOTE: There were 1 observations read from the data set WORK.MAXRUNDATE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKTABLESTATUS):   proc datasets library=WORK nolist;
MPRINT(CHECKTABLESTATUS):   delete maxrundate;
MPRINT(CHECKTABLESTATUS):   quit;

NOTE: Deleting WORK.MAXRUNDATE (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 1
MLOGIC(CHECKTABLESTATUS):  %IF condition &sqlobs ne 0 is TRUE
SYMBOLGEN:  Macro variable STATUS resolves to S
MLOGIC(CHECKTABLESTATUS):  %IF condition &STATUS = S is TRUE
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Loading of &PROD. is successful
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXURT00
NOTE: Loading of COPY_AMXURT00 is successful
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Job will proceed
NOTE: Job will proceed
MLOGIC(CHECKTABLESTATUS):  Ending execution.
5009       
5010       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
132                                                        The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5011       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5012       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5013       
5014       /*============================================================================*
5015        * Step:          Check Table Status                        A5SFKZBN.BS000U9H *
5016        * Transform:     Check Table Status                                          *
5017        * Description:   Check whether the loading of Source table is                *
5018        *                successful.Prerequisite:      1) Table should be            *
5019        *                registered in ADMIN_TABLE_LOG     2) Declare Libraries      *
5020        *                 Project Transform     3) Declare Macros                    *
5021        *                                                                            *
5022        * Source Table:  COPY_AMXUCF00 - COPY.COPY_AMXUCF00        A5SFKZBN.BK00035M *
5023        * Target Table:  Check Table Status - work.W5GX80KB        A5SFKZBN.BQ000RYN *
5024        *============================================================================*/
5025       
5026       %let SYSLAST = %nrquote(COPY.COPY_AMXUCF00);
5027       
5028       %let transformID = %quote(A5SFKZBN.BS000U9H);
5029       
5030       %let trans_rc = 0;
5031       
5032       /* Source table(s)/view(s)  */
5033       %let _INPUT0 = COPY.COPY_AMXUCF00;
5034       
5035       /* Target table/view(s)  */
5036       %let _OUTPUT = work.W5GX80KB;
5037       %let _OUTPUT0 = work.W5GX80KB;
5038       
5039       /* Options  */
5040       
5041       /* List of target columns to keep  */
5042       %let keep = ;
5043       
133                                                        The SAS System                                19:16 Friday, April 4, 2008

5044       %macro CheckTableStatus;
5045       	%local STATUS PROD LIBRARY trigger;
5046       	%let PROD=%upcase(%scan(&_INPUT0., 2, .));
5047       	%let LIBRARY=%scan(&_INPUT0., 1, .);
5048       	%if &library = %str() %then %let library=WORK;
5049       	/* Start Check Table Existence*/
5050       	%if %sysfunc(exist(&LIBRARY..&PROD.)) %then %do;
5051       		proc sql noprint;
5052       			create table maxrundate as
5053       			select max(rundate_start) as maxrundate format datetime16.
5054       			from ADMIN.ADMIN_TABLE_LOG
5055       			where PRODUCT eq "&prod" & PROC_DATE in (
5056                                                   select MAX(PROC_DATE)
5057                                                   from ADMIN.ADMIN_TABLE_LOG
5058                                                   where UPCASE(PRODUCT) eq "&prod")
5059                ;
5060       			select jobstat into :status
5061       			from ADMIN.ADMIN_TABLE_LOG
5062       			where PRODUCT eq "&prod" & PROC_DATE in (
5063                                                   select MAX(PROC_DATE)
5064                                                   from ADMIN.ADMIN_TABLE_LOG
5065                                                   where UPCASE(PRODUCT) eq "&prod") &
5066          			                           	  RUNDATE_START eq (select maxrundate from maxrundate)
5067       			;
5068       			%put sqlobs=&sqlobs;
5069       			%put PROD=&PROD;
5070       		/*	%put maxprocdte=%sysfunc(putn(&MAXPROCDATE,datetime16.));*/
5071       			%put status=&STATUS;
5072       		quit;
5073       		data _null_;
5074       			set maxrundate;
5075       			put maxrundate=;
5076       			format maxrundate datetime16.;
5077       		run;
5078       		proc datasets library=WORK nolist;
5079       			delete maxrundate;
5080       		quit;
5081       		%if &sqlobs ne 0 %then %do; /*Check Table Registration in ATL*/
5082       			%if &STATUS = S %then %do;
5083       				%put NOTE: Loading of &PROD. is successful;
5084       				%put NOTE: Job will proceed;
5085       			%end;
5086       			%else %do;
5087       				data _null_;
5088       					%put ERROR: Loading of table &PROD. is Unsuccessful;
5089       					%put WARNING: Job will be aborted;		
5090       					abort;
5091       				run;
5092       			%end;
5093       		%end;/*End Check Table Registration in ATL*/
5094       		%else %do;
5095       			data _null_;
5096       				%put ERROR: &PROD. is not registered in ADMIN_TABLE_LOG or Error in ADMIN_TABLE_LOG_DATES;
5097       				%put WARNING: Job will be aborted;		
5098       				abort;
5099       			run;
5100       		%end;
5101       	%end;/*End Check Table Existence*/
134                                                        The SAS System                                19:16 Friday, April 4, 2008

5102       	%else %do;
5103       		data _null_;
5104       			%put ERROR: Dataset &LIBRARY..&PROD. does not exist;
5105       			%put WARNING: Job will be aborted;		
5106       			abort;
5107       		run;
5108       	%end;
5109       %mend;
5110       %CheckTableStatus
MLOGIC(CHECKTABLESTATUS):  Beginning execution.
MLOGIC(CHECKTABLESTATUS):  %LOCAL  STATUS PROD LIBRARY TRIGGER
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is PROD)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_AMXUCF00
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is LIBRARY)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_AMXUCF00
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
MLOGIC(CHECKTABLESTATUS):  %IF condition &library =  is FALSE
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
MLOGIC(CHECKTABLESTATUS):  %IF condition %sysfunc(exist(&LIBRARY..&PROD.)) is TRUE
MPRINT(CHECKTABLESTATUS):   proc sql noprint;
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
MPRINT(CHECKTABLESTATUS):   create table maxrundate as select max(rundate_start) as maxrundate format datetime16. from 
ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_AMXUCF00" & PROC_DATE in ( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where 
UPCASE(PRODUCT) eq "COPY_AMXUCF00") ;
NOTE: Table WORK.MAXRUNDATE created, with 1 rows and 1 columns.

SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
MPRINT(CHECKTABLESTATUS):   select jobstat into :status from ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_AMXUCF00" & PROC_DATE in 
( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where UPCASE(PRODUCT) eq "COPY_AMXUCF00") & RUNDATE_START eq (select maxrundate 
from maxrundate) ;
MLOGIC(CHECKTABLESTATUS):  %PUT sqlobs=&sqlobs
SYMBOLGEN:  Macro variable SQLOBS resolves to 1
sqlobs=1
MLOGIC(CHECKTABLESTATUS):  %PUT PROD=&PROD
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
PROD=COPY_AMXUCF00
MLOGIC(CHECKTABLESTATUS):  %PUT status=&STATUS
SYMBOLGEN:  Macro variable STATUS resolves to S
status=S
MPRINT(CHECKTABLESTATUS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKTABLESTATUS):   data _null_;
MPRINT(CHECKTABLESTATUS):   set maxrundate;
MPRINT(CHECKTABLESTATUS):   put maxrundate=;
MPRINT(CHECKTABLESTATUS):   format maxrundate datetime16.;
MPRINT(CHECKTABLESTATUS):   run;

maxrundate=04APR08:19:06:13
NOTE: There were 1 observations read from the data set WORK.MAXRUNDATE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
135                                                        The SAS System                                19:16 Friday, April 4, 2008

      cpu time            0.00 seconds
      

MPRINT(CHECKTABLESTATUS):   proc datasets library=WORK nolist;
MPRINT(CHECKTABLESTATUS):   delete maxrundate;
MPRINT(CHECKTABLESTATUS):   quit;

NOTE: Deleting WORK.MAXRUNDATE (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 1
MLOGIC(CHECKTABLESTATUS):  %IF condition &sqlobs ne 0 is TRUE
SYMBOLGEN:  Macro variable STATUS resolves to S
MLOGIC(CHECKTABLESTATUS):  %IF condition &STATUS = S is TRUE
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Loading of &PROD. is successful
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCF00
NOTE: Loading of COPY_AMXUCF00 is successful
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Job will proceed
NOTE: Job will proceed
MLOGIC(CHECKTABLESTATUS):  Ending execution.
5111       
5112       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5113       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5114       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5115       
136                                                        The SAS System                                19:16 Friday, April 4, 2008

5116       /*============================================================================*
5117        * Step:          Check Table Status                        A5SFKZBN.BS000U9G *
5118        * Transform:     Check Table Status                                          *
5119        * Description:   Check whether the loading of Source table is                *
5120        *                successful.Prerequisite:      1) Table should be            *
5121        *                registered in ADMIN_TABLE_LOG     2) Declare Libraries      *
5122        *                 Project Transform     3) Declare Macros                    *
5123        *                                                                            *
5124        * Source Table:  COPY_AMXUCE - COPY.COPY_AMXUCE            A5SFKZBN.BK0006Y4 *
5125        * Target Table:  Check Table Status - work.W5GX80P7        A5SFKZBN.BQ000RYM *
5126        *============================================================================*/
5127       
5128       %let SYSLAST = %nrquote(COPY.COPY_AMXUCE);
5129       
5130       %let transformID = %quote(A5SFKZBN.BS000U9G);
5131       
5132       %let trans_rc = 0;
5133       
5134       /* Source table(s)/view(s)  */
5135       %let _INPUT0 = COPY.COPY_AMXUCE;
5136       
5137       /* Target table/view(s)  */
5138       %let _OUTPUT = work.W5GX80P7;
5139       %let _OUTPUT0 = work.W5GX80P7;
5140       
5141       /* Options  */
5142       
5143       /* List of target columns to keep  */
5144       %let keep = ;
5145       
5146       %macro CheckTableStatus;
5147       	%local STATUS PROD LIBRARY trigger;
5148       	%let PROD=%upcase(%scan(&_INPUT0., 2, .));
5149       	%let LIBRARY=%scan(&_INPUT0., 1, .);
5150       	%if &library = %str() %then %let library=WORK;
5151       	/* Start Check Table Existence*/
5152       	%if %sysfunc(exist(&LIBRARY..&PROD.)) %then %do;
5153       		proc sql noprint;
5154       			create table maxrundate as
5155       			select max(rundate_start) as maxrundate format datetime16.
5156       			from ADMIN.ADMIN_TABLE_LOG
5157       			where PRODUCT eq "&prod" & PROC_DATE in (
5158                                                   select MAX(PROC_DATE)
5159                                                   from ADMIN.ADMIN_TABLE_LOG
5160                                                   where UPCASE(PRODUCT) eq "&prod")
5161                ;
5162       			select jobstat into :status
5163       			from ADMIN.ADMIN_TABLE_LOG
5164       			where PRODUCT eq "&prod" & PROC_DATE in (
5165                                                   select MAX(PROC_DATE)
5166                                                   from ADMIN.ADMIN_TABLE_LOG
5167                                                   where UPCASE(PRODUCT) eq "&prod") &
5168          			                           	  RUNDATE_START eq (select maxrundate from maxrundate)
5169       			;
5170       			%put sqlobs=&sqlobs;
5171       			%put PROD=&PROD;
5172       		/*	%put maxprocdte=%sysfunc(putn(&MAXPROCDATE,datetime16.));*/
5173       			%put status=&STATUS;
137                                                        The SAS System                                19:16 Friday, April 4, 2008

5174       		quit;
5175       		data _null_;
5176       			set maxrundate;
5177       			put maxrundate=;
5178       			format maxrundate datetime16.;
5179       		run;
5180       		proc datasets library=WORK nolist;
5181       			delete maxrundate;
5182       		quit;
5183       		%if &sqlobs ne 0 %then %do; /*Check Table Registration in ATL*/
5184       			%if &STATUS = S %then %do;
5185       				%put NOTE: Loading of &PROD. is successful;
5186       				%put NOTE: Job will proceed;
5187       			%end;
5188       			%else %do;
5189       				data _null_;
5190       					%put ERROR: Loading of table &PROD. is Unsuccessful;
5191       					%put WARNING: Job will be aborted;		
5192       					abort;
5193       				run;
5194       			%end;
5195       		%end;/*End Check Table Registration in ATL*/
5196       		%else %do;
5197       			data _null_;
5198       				%put ERROR: &PROD. is not registered in ADMIN_TABLE_LOG or Error in ADMIN_TABLE_LOG_DATES;
5199       				%put WARNING: Job will be aborted;		
5200       				abort;
5201       			run;
5202       		%end;
5203       	%end;/*End Check Table Existence*/
5204       	%else %do;
5205       		data _null_;
5206       			%put ERROR: Dataset &LIBRARY..&PROD. does not exist;
5207       			%put WARNING: Job will be aborted;		
5208       			abort;
5209       		run;
5210       	%end;
5211       %mend;
5212       %CheckTableStatus
MLOGIC(CHECKTABLESTATUS):  Beginning execution.
MLOGIC(CHECKTABLESTATUS):  %LOCAL  STATUS PROD LIBRARY TRIGGER
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is PROD)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_AMXUCE
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is LIBRARY)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_AMXUCE
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
MLOGIC(CHECKTABLESTATUS):  %IF condition &library =  is FALSE
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
MLOGIC(CHECKTABLESTATUS):  %IF condition %sysfunc(exist(&LIBRARY..&PROD.)) is TRUE
MPRINT(CHECKTABLESTATUS):   proc sql noprint;
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
MPRINT(CHECKTABLESTATUS):   create table maxrundate as select max(rundate_start) as maxrundate format datetime16. from 
ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_AMXUCE" & PROC_DATE in ( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where 
UPCASE(PRODUCT) eq "COPY_AMXUCE") ;
NOTE: Table WORK.MAXRUNDATE created, with 1 rows and 1 columns.

138                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
MPRINT(CHECKTABLESTATUS):   select jobstat into :status from ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_AMXUCE" & PROC_DATE in ( 
select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where UPCASE(PRODUCT) eq "COPY_AMXUCE") & RUNDATE_START eq (select maxrundate from 
maxrundate) ;
MLOGIC(CHECKTABLESTATUS):  %PUT sqlobs=&sqlobs
SYMBOLGEN:  Macro variable SQLOBS resolves to 1
sqlobs=1
MLOGIC(CHECKTABLESTATUS):  %PUT PROD=&PROD
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
PROD=COPY_AMXUCE
MLOGIC(CHECKTABLESTATUS):  %PUT status=&STATUS
SYMBOLGEN:  Macro variable STATUS resolves to S
status=S
MPRINT(CHECKTABLESTATUS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.15 seconds
      cpu time            0.02 seconds
      

MPRINT(CHECKTABLESTATUS):   data _null_;
MPRINT(CHECKTABLESTATUS):   set maxrundate;
MPRINT(CHECKTABLESTATUS):   put maxrundate=;
MPRINT(CHECKTABLESTATUS):   format maxrundate datetime16.;
MPRINT(CHECKTABLESTATUS):   run;

maxrundate=04APR08:19:06:47
NOTE: There were 1 observations read from the data set WORK.MAXRUNDATE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKTABLESTATUS):   proc datasets library=WORK nolist;
MPRINT(CHECKTABLESTATUS):   delete maxrundate;
MPRINT(CHECKTABLESTATUS):   quit;

NOTE: Deleting WORK.MAXRUNDATE (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 1
MLOGIC(CHECKTABLESTATUS):  %IF condition &sqlobs ne 0 is TRUE
SYMBOLGEN:  Macro variable STATUS resolves to S
MLOGIC(CHECKTABLESTATUS):  %IF condition &STATUS = S is TRUE
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Loading of &PROD. is successful
SYMBOLGEN:  Macro variable PROD resolves to COPY_AMXUCE
NOTE: Loading of COPY_AMXUCE is successful
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Job will proceed
NOTE: Job will proceed
MLOGIC(CHECKTABLESTATUS):  Ending execution.
5213       
5214       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
139                                                        The SAS System                                19:16 Friday, April 4, 2008

SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5215       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5216       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5217       
5218       /*============================================================================*
5219        * Step:          Check Table Status                        A5SFKZBN.BS000U9F *
5220        * Transform:     Check Table Status                                          *
5221        * Description:   Check whether the loading of Source table is                *
5222        *                successful.Prerequisite:      1) Table should be            *
5223        *                registered in ADMIN_TABLE_LOG     2) Declare Libraries      *
5224        *                 Project Transform     3) Declare Macros                    *
5225        *                                                                            *
5226        * Source Table:  COPY_RMEXTRACT - COPY.COPY_RMEXTRACT      A5SFKZBN.BK00071X *
5227        * Target Table:  Check Table Status - work.W5GX807W        A5SFKZBN.BQ000RYL *
5228        *============================================================================*/
5229       
5230       %let SYSLAST = %nrquote(COPY.COPY_RMEXTRACT);
5231       
5232       %let transformID = %quote(A5SFKZBN.BS000U9F);
5233       
5234       %let trans_rc = 0;
5235       
5236       /* Source table(s)/view(s)  */
5237       %let _INPUT0 = COPY.COPY_RMEXTRACT;
5238       
5239       /* Target table/view(s)  */
5240       %let _OUTPUT = work.W5GX807W;
5241       %let _OUTPUT0 = work.W5GX807W;
5242       
5243       /* Options  */
5244       
5245       /* List of target columns to keep  */
140                                                        The SAS System                                19:16 Friday, April 4, 2008

5246       %let keep = ;
5247       
5248       %macro CheckTableStatus;
5249       	%local STATUS PROD LIBRARY trigger;
5250       	%let PROD=%upcase(%scan(&_INPUT0., 2, .));
5251       	%let LIBRARY=%scan(&_INPUT0., 1, .);
5252       	%if &library = %str() %then %let library=WORK;
5253       	/* Start Check Table Existence*/
5254       	%if %sysfunc(exist(&LIBRARY..&PROD.)) %then %do;
5255       		proc sql noprint;
5256       			create table maxrundate as
5257       			select max(rundate_start) as maxrundate format datetime16.
5258       			from ADMIN.ADMIN_TABLE_LOG
5259       			where PRODUCT eq "&prod" & PROC_DATE in (
5260                                                   select MAX(PROC_DATE)
5261                                                   from ADMIN.ADMIN_TABLE_LOG
5262                                                   where UPCASE(PRODUCT) eq "&prod")
5263                ;
5264       			select jobstat into :status
5265       			from ADMIN.ADMIN_TABLE_LOG
5266       			where PRODUCT eq "&prod" & PROC_DATE in (
5267                                                   select MAX(PROC_DATE)
5268                                                   from ADMIN.ADMIN_TABLE_LOG
5269                                                   where UPCASE(PRODUCT) eq "&prod") &
5270          			                           	  RUNDATE_START eq (select maxrundate from maxrundate)
5271       			;
5272       			%put sqlobs=&sqlobs;
5273       			%put PROD=&PROD;
5274       		/*	%put maxprocdte=%sysfunc(putn(&MAXPROCDATE,datetime16.));*/
5275       			%put status=&STATUS;
5276       		quit;
5277       		data _null_;
5278       			set maxrundate;
5279       			put maxrundate=;
5280       			format maxrundate datetime16.;
5281       		run;
5282       		proc datasets library=WORK nolist;
5283       			delete maxrundate;
5284       		quit;
5285       		%if &sqlobs ne 0 %then %do; /*Check Table Registration in ATL*/
5286       			%if &STATUS = S %then %do;
5287       				%put NOTE: Loading of &PROD. is successful;
5288       				%put NOTE: Job will proceed;
5289       			%end;
5290       			%else %do;
5291       				data _null_;
5292       					%put ERROR: Loading of table &PROD. is Unsuccessful;
5293       					%put WARNING: Job will be aborted;		
5294       					abort;
5295       				run;
5296       			%end;
5297       		%end;/*End Check Table Registration in ATL*/
5298       		%else %do;
5299       			data _null_;
5300       				%put ERROR: &PROD. is not registered in ADMIN_TABLE_LOG or Error in ADMIN_TABLE_LOG_DATES;
5301       				%put WARNING: Job will be aborted;		
5302       				abort;
5303       			run;
141                                                        The SAS System                                19:16 Friday, April 4, 2008

5304       		%end;
5305       	%end;/*End Check Table Existence*/
5306       	%else %do;
5307       		data _null_;
5308       			%put ERROR: Dataset &LIBRARY..&PROD. does not exist;
5309       			%put WARNING: Job will be aborted;		
5310       			abort;
5311       		run;
5312       	%end;
5313       %mend;
5314       %CheckTableStatus
MLOGIC(CHECKTABLESTATUS):  Beginning execution.
MLOGIC(CHECKTABLESTATUS):  %LOCAL  STATUS PROD LIBRARY TRIGGER
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is PROD)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_RMEXTRACT
MLOGIC(CHECKTABLESTATUS):  %LET (variable name is LIBRARY)
SYMBOLGEN:  Macro variable _INPUT0 resolves to COPY.COPY_RMEXTRACT
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
MLOGIC(CHECKTABLESTATUS):  %IF condition &library =  is FALSE
SYMBOLGEN:  Macro variable LIBRARY resolves to COPY
SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
MLOGIC(CHECKTABLESTATUS):  %IF condition %sysfunc(exist(&LIBRARY..&PROD.)) is TRUE
MPRINT(CHECKTABLESTATUS):   proc sql noprint;
SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
MPRINT(CHECKTABLESTATUS):   create table maxrundate as select max(rundate_start) as maxrundate format datetime16. from 
ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_RMEXTRACT" & PROC_DATE in ( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where 
UPCASE(PRODUCT) eq "COPY_RMEXTRACT") ;
NOTE: Table WORK.MAXRUNDATE created, with 1 rows and 1 columns.

SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
MPRINT(CHECKTABLESTATUS):   select jobstat into :status from ADMIN.ADMIN_TABLE_LOG where PRODUCT eq "COPY_RMEXTRACT" & PROC_DATE in 
( select MAX(PROC_DATE) from ADMIN.ADMIN_TABLE_LOG where UPCASE(PRODUCT) eq "COPY_RMEXTRACT") & RUNDATE_START eq (select maxrundate 
from maxrundate) ;
MLOGIC(CHECKTABLESTATUS):  %PUT sqlobs=&sqlobs
SYMBOLGEN:  Macro variable SQLOBS resolves to 1
sqlobs=1
MLOGIC(CHECKTABLESTATUS):  %PUT PROD=&PROD
SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
PROD=COPY_RMEXTRACT
MLOGIC(CHECKTABLESTATUS):  %PUT status=&STATUS
SYMBOLGEN:  Macro variable STATUS resolves to S
status=S
MPRINT(CHECKTABLESTATUS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
      

MPRINT(CHECKTABLESTATUS):   data _null_;
MPRINT(CHECKTABLESTATUS):   set maxrundate;
MPRINT(CHECKTABLESTATUS):   put maxrundate=;
MPRINT(CHECKTABLESTATUS):   format maxrundate datetime16.;
MPRINT(CHECKTABLESTATUS):   run;

maxrundate=26MAR08:16:55:43
NOTE: There were 1 observations read from the data set WORK.MAXRUNDATE.
142                                                        The SAS System                                19:16 Friday, April 4, 2008

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(CHECKTABLESTATUS):   proc datasets library=WORK nolist;
MPRINT(CHECKTABLESTATUS):   delete maxrundate;
MPRINT(CHECKTABLESTATUS):   quit;

NOTE: Deleting WORK.MAXRUNDATE (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

SYMBOLGEN:  Macro variable SQLOBS resolves to 1
MLOGIC(CHECKTABLESTATUS):  %IF condition &sqlobs ne 0 is TRUE
SYMBOLGEN:  Macro variable STATUS resolves to S
MLOGIC(CHECKTABLESTATUS):  %IF condition &STATUS = S is TRUE
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Loading of &PROD. is successful
SYMBOLGEN:  Macro variable PROD resolves to COPY_RMEXTRACT
NOTE: Loading of COPY_RMEXTRACT is successful
MLOGIC(CHECKTABLESTATUS):  %PUT NOTE: Job will proceed
NOTE: Job will proceed
MLOGIC(CHECKTABLESTATUS):  Ending execution.
5315       
5316       %rcSet(&syserr);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5317       %rcSet(&sysrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SYSRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
MLOGIC(RCSET):  Ending execution.
5318       %rcSet(&sqlrc);
MLOGIC(RCSET):  Beginning execution.
SYMBOLGEN:  Macro variable SQLRC resolves to 0
MLOGIC(RCSET):  Parameter ERROR has value 0
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable TRANS_RC resolves to 0
MLOGIC(RCSET):  %IF condition (&error gt &trans_rc) is FALSE
SYMBOLGEN:  Macro variable ERROR resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MLOGIC(RCSET):  %IF condition (&error gt &job_rc) is FALSE
143                                                        The SAS System                                19:16 Friday, April 4, 2008

MLOGIC(RCSET):  Ending execution.
5319       
5320       /*============================================================================*
5321        * Step:          Log End Time                              A5SFKZBN.BS000U9J *
5322        * Transform:     Log End Time                                                *
5323        * Description:                                                               *
5324        *                                                                            *
5325        * Source Tables: STG_INDIVIDUAL_CUSTOMER_ALS -             A5SFKZBN.BK0003BD *
5326        *                 STAGING.STG_INDIVIDUAL_CUSTOMER_ALS                        *
5327        *                Check Table Status - work.W5GX7ZTA        A5SFKZBN.BQ000RYO *
5328        *                Check Table Status - work.W5GX807W        A5SFKZBN.BQ000RYL *
5329        *                Check Table Status - work.W5GX80KB        A5SFKZBN.BQ000RYN *
5330        *                Check Table Status - work.W5GX80P7        A5SFKZBN.BQ000RYM *
5331        *                Exception Table - admin.Exception_Table   A5SFKZBN.BK0003UX *
5332        * Target Table:  Log End Time - work.W5I1BIIG              A5SFKZBN.BQ000RYP *
5333        *============================================================================*/
5334       
5335       %let transformID = %quote(A5SFKZBN.BS000U9J);
5336       
5337       %let trans_rc = 0;
5338       
5339       /* Source table(s)/view(s)  */
5340       %let _INPUT0 = STAGING.STG_INDIVIDUAL_CUSTOMER_ALS;
5341       %let _INPUT1 = work.W5GX7ZTA;
5342       %let _INPUT2 = work.W5GX807W;
5343       %let _INPUT3 = work.W5GX80KB;
5344       %let _INPUT4 = work.W5GX80P7;
5345       %let _INPUT5 = admin.Exception_Table;
5346       
5347       /* Target table/view(s)  */
5348       %let _OUTPUT = work.W5I1BIIG;
5349       %let _OUTPUT0 = work.W5I1BIIG;
5350       
5351       /* Options  */
5352       
5353       /* List of target columns to keep  */
5354       %let keep = ;
5355       
5356       %global gdtPRunEnd;
5357       %let gdtPRunEnd = %sysfunc(datetime());
5358       
5359       %put logendtime calls logadminjob;
logendtime calls logadminjob
5360       %LogAdminJob(setType = 2, setprod=&gcPProd,setstart=&gdtPRunBeg, setstop =&gdtPRunEnd);
MLOGIC(LOGADMINJOB):  Beginning execution.
SYMBOLGEN:  Macro variable GCPPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS     
SYMBOLGEN:  Macro variable GDTPRUNBEG resolves to 1522955817.64654
SYMBOLGEN:  Macro variable GDTPRUNEND resolves to 1522955874.84123
MLOGIC(LOGADMINJOB):  Parameter SETTYPE has value 2
MLOGIC(LOGADMINJOB):  Parameter SETPROD has value STG_INDIVIDUAL_CUSTOMER_ALS
MLOGIC(LOGADMINJOB):  Parameter SETSTART has value 1522955817.64654
MLOGIC(LOGADMINJOB):  Parameter SETSTOP has value 1522955874.84123
MLOGIC(LOGADMINJOB):  Parameter SYSMSG has value 
MPRINT(LOGADMINJOB):   proc sql noprint;
MPRINT(LOGADMINJOB):   select max(batch_no) into: maxbatchno from admin.admin_table_log ;
MPRINT(LOGADMINJOB):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.04 seconds
144                                                        The SAS System                                19:16 Friday, April 4, 2008

      cpu time            0.01 seconds
      

SYMBOLGEN:  Macro variable SETTYPE resolves to 2
MLOGIC(LOGADMINJOB):  %IF condition &setType = 0 is FALSE
SYMBOLGEN:  Macro variable SETTYPE resolves to 2
MLOGIC(LOGADMINJOB):  %IF condition &setType = 1 is FALSE
SYMBOLGEN:  Macro variable SETTYPE resolves to 2
MLOGIC(LOGADMINJOB):  %IF condition &setType = 3 is FALSE
MPRINT(LOGADMINJOB):   data ADMIN.ADMIN_TABLE_LOG;
MPRINT(LOGADMINJOB):   modify ADMIN.ADMIN_TABLE_LOG;
SYMBOLGEN:  Macro variable SETPROD resolves to STG_INDIVIDUAL_CUSTOMER_ALS
SYMBOLGEN:  Macro variable SETSTART resolves to 1522955817.64654
MPRINT(LOGADMINJOB):   if PRODUCT = "STG_INDIVIDUAL_CUSTOMER_ALS" & RUNDATE_START=1522955817.64654 then do;
SYMBOLGEN:  Macro variable SETSTOP resolves to 1522955874.84123
MPRINT(LOGADMINJOB):   rundate_end = 1522955874.84123;
MPRINT(LOGADMINJOB):   duration = RUNDATE_END - RUNDATE_START;
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MPRINT(LOGADMINJOB):   job_rc = 4;
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
SYMBOLGEN:  Macro variable HASHSTAT resolves to 0
MPRINT(LOGADMINJOB):   if 4 > 4 | 0 ne 0 then jobstat = 'U';
MPRINT(LOGADMINJOB):   else jobstat = 'S';
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
SYMBOLGEN:  Macro variable HASHSTAT resolves to 0
MPRINT(LOGADMINJOB):   if 4 in(4, 0) & 0 = 0 then remarks="Successful";
SYMBOLGEN:  Macro variable HASHSTAT resolves to 0
SYMBOLGEN:  Macro variable JOB_RC resolves to 4
MPRINT(LOGADMINJOB):   else if 0 ne 0 & 4 in(4, 0) then remarks='Hash Count do not Match';
MPRINT(LOGADMINJOB):   else remarks= "An Error occured check the log for details";
MPRINT(LOGADMINJOB):   put rundate_end= rundate_start=;
MPRINT(LOGADMINJOB):   replace;
MPRINT(LOGADMINJOB):   end;
MPRINT(LOGADMINJOB):   run;

ERROR: User asked for termination
NOTE: The SAS System stopped processing this step because of errors.
NOTE: There were 16328 observations read from the data set ADMIN.ADMIN_TABLE_LOG.
NOTE: The data set ADMIN.ADMIN_TABLE_LOG has been updated.  There were 0 observations rewritten, 0 observations added and 0 
      observations deleted.
NOTE: DATA statement used (Total process time):
      real time           7.23 seconds
      cpu time            0.90 seconds
      
ERROR: Errors printed on page 144.

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
NOTE: The SAS System used:
      real time           1:04.77
      cpu time            26.77 seconds
      
